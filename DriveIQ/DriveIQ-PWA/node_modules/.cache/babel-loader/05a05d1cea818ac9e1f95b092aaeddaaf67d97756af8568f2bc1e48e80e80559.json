{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\MapView\\\\MapView.jsx\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport './MapView.scss';\n\n// Custom red icon for the markers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst redIcon = new L.Icon({\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-red.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\nconst MapView = ({\n  gpsData\n}) => {\n  // Default coordinates to use when gpsData is empty\n  const defaultCoords = [26.6338, 92.8006]; // Coordinates for Tezpur, India\n\n  // Map GPS data into array of [latitude, longitude]\n  const route = gpsData.length ? gpsData.map(point => [point.Latitude, point.Longitude]) : [defaultCoords];\n\n  // Set starting point and ending point for markers\n  const startPoint = route[0];\n  const endPoint = route[route.length - 1];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-view\",\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    children: [\"  \", /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: startPoint,\n      zoom: 14,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), route.length > 1 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"blue\",\n        weight: 4,\n        opacity: 0.7,\n        smoothFactor: 1.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 30\n      }, this), route.map((point, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: point,\n        icon: redIcon\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)), startPoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: startPoint,\n        icon: redIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 24\n      }, this), endPoint && startPoint !== endPoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: endPoint,\n        icon: redIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Polyline","Marker","L","jsxDEV","_jsxDEV","redIcon","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","shadowSize","MapView","gpsData","defaultCoords","route","length","map","point","Latitude","Longitude","startPoint","endPoint","className","style","height","width","children","center","zoom","url","fileName","_jsxFileName","lineNumber","columnNumber","positions","color","weight","opacity","smoothFactor","index","position","icon","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/MapView/MapView.jsx"],"sourcesContent":["import React from 'react';\r\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport './MapView.scss';\r\n\r\n// Custom red icon for the markers\r\nconst redIcon = new L.Icon({\r\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x-red.png',\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n  shadowSize: [41, 41],\r\n});\r\n\r\nconst MapView = ({ gpsData }) => {\r\n  // Default coordinates to use when gpsData is empty\r\n  const defaultCoords = [26.6338, 92.8006];  // Coordinates for Tezpur, India\r\n  \r\n  // Map GPS data into array of [latitude, longitude]\r\n  const route = gpsData.length ? gpsData.map(point => [point.Latitude, point.Longitude]) : [defaultCoords];\r\n\r\n  // Set starting point and ending point for markers\r\n  const startPoint = route[0];\r\n  const endPoint = route[route.length - 1];\r\n\r\n  return (\r\n    <div className=\"map-view\" style={{ height: '500px', width: '100%' }}>  {/* Set a taller height */}\r\n      <MapContainer center={startPoint} zoom={14} style={{ height: '100%', width: '100%' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        \r\n        {/* Draw the route as a polyline */}\r\n        {route.length > 1 && <Polyline positions={route} color=\"blue\" weight={4} opacity={0.7} smoothFactor={1.5} />}\r\n\r\n        {/* Add markers for each point */}\r\n        {route.map((point, index) => (\r\n          <Marker key={index} position={point} icon={redIcon} />\r\n        ))}\r\n\r\n        {/* Optional: Start marker */}\r\n        {startPoint && <Marker position={startPoint} icon={redIcon} />}\r\n        \r\n        {/* Optional: End marker */}\r\n        {endPoint && startPoint !== endPoint && <Marker position={endPoint} icon={redIcon} />}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}