{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js'; // Import necessary components from Chart.js\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport api from '../../utils/api';\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\nimport './Dashboard.scss';\n\n// Register the required Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [chartData, setChartData] = useState(null);\n  const [route, setRoute] = useState([]);\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Start or stop GPS tracking\n  const toggleTracking = () => {\n    if (isTracking) {\n      setIsTracking(false);\n    } else {\n      setIsTracking(true);\n      startTracking();\n    }\n  };\n\n  // Simulate GPS tracking for testing\n  const startTracking = () => {\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches for driver_id 1\n    simulatedBatches.forEach((batch, index) => {\n      setTimeout(() => processBatch(batch), index * 5000); // Process each batch after 5 seconds\n    });\n  };\n\n  // Process each batch of GPS data\n  const processBatch = async batch => {\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData); // Check if car is moving\n    if (isMoving) {\n      try {\n        const driver_id = localStorage.getItem('driver_id');\n        const response = await api.post('/record-telematics', {\n          driver_id,\n          gps_data: batch.gps_data // Send GPS data for processing\n        });\n        console.log('Telematics Response:', response.data);\n        const features = response.data.features;\n\n        // Ensure the features object contains the keys before accessing them\n        if (features) {\n          var _features$SpeedMS, _features$Acceleratio, _features$JerkMS, _features$Braking_Int;\n          const speed = (_features$SpeedMS = features['Speed(m/s)']) !== null && _features$SpeedMS !== void 0 ? _features$SpeedMS : 0; // Default to 0 if not available\n          const acceleration = (_features$Acceleratio = features['Acceleration(m/s^2)']) !== null && _features$Acceleratio !== void 0 ? _features$Acceleratio : 0;\n          const jerk = (_features$JerkMS = features['Jerk(m/s^3)']) !== null && _features$JerkMS !== void 0 ? _features$JerkMS : 0;\n          const brakingIntensity = (_features$Braking_Int = features['Braking_Intensity']) !== null && _features$Braking_Int !== void 0 ? _features$Braking_Int : 0;\n\n          // Update GPS data for route plotting\n          setGpsData(prevData => [...prevData, ...batch.gps_data]);\n          setRoute(prevRoute => [...prevRoute, ...batch.gps_data.map(point => [point.Latitude, point.Longitude])]);\n\n          // Update the chart with telematics features (e.g., speed, acceleration)\n          updateChart({\n            speed,\n            acceleration,\n            jerk,\n            brakingIntensity\n          });\n        } else {\n          console.error('Error: Features object is undefined or missing keys');\n        }\n      } catch (error) {\n        console.error('Error recording telematics data:', error);\n        setError('Error processing GPS data. Please try again.');\n      }\n    }\n  };\n\n  // Update chart data for speed, acceleration, jerk, and braking intensity\n  const updateChart = ({\n    speed,\n    acceleration,\n    jerk,\n    brakingIntensity\n  }) => {\n    const chartLabels = ['Speed', 'Acceleration', 'Jerk', 'Braking Intensity'];\n    setChartData({\n      labels: chartLabels,\n      datasets: [{\n        label: 'Driving Features',\n        data: [speed, acceleration, jerk, brakingIntensity],\n        // Values for chart\n        borderColor: 'rgba(75, 192, 192, 1)',\n        fill: false\n      }]\n    });\n  };\n  const renderChart = () => {\n    if (!chartData || !chartData.labels || chartData.labels.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available yet. Start tracking to see the graph.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracking-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTracking,\n        children: isTracking ? 'Stop Tracking' : 'Start Tracking'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Route Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [26.6337, 92.7926],\n        zoom: 14,\n        scrollWheelZoom: false,\n        className: \"map-container\",\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 OpenStreetMap contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: route,\n          color: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Driving Feature Fluctuations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), renderChart(), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BatchProcessing, {\n      gpsData: gpsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"B843tzlY2IbaU89+RDR2lIs6ZIw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","MapContainer","TileLayer","Polyline","api","smartGpsTracking","generateSimulatedRoute","BatchProcessing","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","chartData","setChartData","route","setRoute","isTracking","setIsTracking","error","setError","toggleTracking","startTracking","simulatedBatches","forEach","batch","index","setTimeout","processBatch","isMoving","gps_data","driver_id","localStorage","getItem","response","post","console","log","data","features","_features$SpeedMS","_features$Acceleratio","_features$JerkMS","_features$Braking_Int","speed","acceleration","jerk","brakingIntensity","prevData","prevRoute","map","point","Latitude","Longitude","updateChart","chartLabels","labels","datasets","label","borderColor","fill","renderChart","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","center","zoom","scrollWheelZoom","url","attribution","positions","color","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';  // Import necessary components from Chart.js\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport api from '../../utils/api';\r\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\r\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\r\nimport './Dashboard.scss';\r\n\r\n// Register the required Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [route, setRoute] = useState([]);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Start or stop GPS tracking\r\n  const toggleTracking = () => {\r\n    if (isTracking) {\r\n      setIsTracking(false);\r\n    } else {\r\n      setIsTracking(true);\r\n      startTracking();\r\n    }\r\n  };\r\n\r\n  // Simulate GPS tracking for testing\r\n  const startTracking = () => {\r\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches for driver_id 1\r\n    simulatedBatches.forEach((batch, index) => {\r\n      setTimeout(() => processBatch(batch), index * 5000); // Process each batch after 5 seconds\r\n    });\r\n  };\r\n\r\n  // Process each batch of GPS data\r\n  const processBatch = async (batch) => {\r\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData); // Check if car is moving\r\n    if (isMoving) {\r\n      try {\r\n        const driver_id = localStorage.getItem('driver_id');\r\n        const response = await api.post('/record-telematics', {\r\n          driver_id,\r\n          gps_data: batch.gps_data, // Send GPS data for processing\r\n        });\r\n\r\n        console.log('Telematics Response:', response.data);\r\n\r\n        const features = response.data.features;\r\n\r\n        // Ensure the features object contains the keys before accessing them\r\n        if (features) {\r\n          const speed = features['Speed(m/s)'] ?? 0; // Default to 0 if not available\r\n          const acceleration = features['Acceleration(m/s^2)'] ?? 0;\r\n          const jerk = features['Jerk(m/s^3)'] ?? 0;\r\n          const brakingIntensity = features['Braking_Intensity'] ?? 0;\r\n\r\n          // Update GPS data for route plotting\r\n          setGpsData((prevData) => [...prevData, ...batch.gps_data]);\r\n          setRoute((prevRoute) => [\r\n            ...prevRoute,\r\n            ...batch.gps_data.map((point) => [point.Latitude, point.Longitude]),\r\n          ]);\r\n\r\n          // Update the chart with telematics features (e.g., speed, acceleration)\r\n          updateChart({ speed, acceleration, jerk, brakingIntensity });\r\n        } else {\r\n          console.error('Error: Features object is undefined or missing keys');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error recording telematics data:', error);\r\n        setError('Error processing GPS data. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Update chart data for speed, acceleration, jerk, and braking intensity\r\n  const updateChart = ({ speed, acceleration, jerk, brakingIntensity }) => {\r\n    const chartLabels = ['Speed', 'Acceleration', 'Jerk', 'Braking Intensity'];\r\n    setChartData({\r\n      labels: chartLabels,\r\n      datasets: [\r\n        {\r\n          label: 'Driving Features',\r\n          data: [speed, acceleration, jerk, brakingIntensity], // Values for chart\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          fill: false,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const renderChart = () => {\r\n    if (!chartData || !chartData.labels || chartData.labels.length === 0) {\r\n      return <p>No data available yet. Start tracking to see the graph.</p>;\r\n    }\r\n\r\n    return <Line data={chartData} />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      <div className=\"tracking-controls\">\r\n        <button onClick={toggleTracking}>\r\n          {isTracking ? 'Stop Tracking' : 'Start Tracking'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Map Section */}\r\n      <div className=\"map-section\">\r\n        <h3>Route Map</h3>\r\n        <MapContainer center={[26.6337, 92.7926]} zoom={14} scrollWheelZoom={false} className=\"map-container\">\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; OpenStreetMap contributors\"\r\n          />\r\n          <Polyline positions={route} color=\"blue\" />\r\n        </MapContainer>\r\n      </div>\r\n\r\n      {/* Chart Section */}\r\n      <div className=\"chart-section\">\r\n        <h3>Driving Feature Fluctuations</h3>\r\n        {renderChart()} {/* Render chart */}\r\n      </div>\r\n\r\n      {/* Batch Processing Section */}\r\n      <BatchProcessing gpsData={gpsData} /> {/* Pass the GPS data to BatchProcessing */}\r\n\r\n      {/* Error Message */}\r\n      {error && <div className=\"error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}