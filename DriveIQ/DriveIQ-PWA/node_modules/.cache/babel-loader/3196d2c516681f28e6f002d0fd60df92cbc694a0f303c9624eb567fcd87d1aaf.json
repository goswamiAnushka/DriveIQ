{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Importing necessary Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  var _performanceData$spee, _performanceData$acce, _performanceData$jerk;\n  const [gpsData, setGpsData] = useState([]); // Store full GPS data for the route\n  const [route, setRoute] = useState([]); // Coordinates for map polyline\n  const [currentBatch, setCurrentBatch] = useState([]); // Store current batch GPS data\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMoving, setIsMoving] = useState(false); // Track if the car is moving\n\n  // Fetch driver data (driver_id) from the backend using JWT token\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Generate mock GPS data simulating car's movement\n  const generateMockData = () => {\n    const baseLat = 40.712776; // Starting coordinates (NYC)\n    const baseLon = -74.005974;\n    const distanceIncrement = 0.001; // Approx 100 meters\n    const minSpeed = 0; // Start from stationary\n    const maxSpeed = 40; // Max 40 km/h\n\n    let lastLat = gpsData.length > 0 ? gpsData[gpsData.length - 1].Latitude : baseLat;\n    let lastLon = gpsData.length > 0 ? gpsData[gpsData.length - 1].Longitude : baseLon;\n    const timeStepIncrement = 60; // 60 seconds between each point\n\n    const mockBatch = [];\n    for (let i = 0; i < 10; i++) {\n      const speed = Math.random() * (maxSpeed - minSpeed) + minSpeed; // Random speed between 0 and max\n      const timeStep = Date.now() + i * timeStepIncrement * 1000;\n      lastLat += distanceIncrement;\n      lastLon += distanceIncrement;\n      mockBatch.push({\n        Latitude: lastLat,\n        Longitude: lastLon,\n        Time_Step: timeStep,\n        Speed: speed\n      });\n    }\n    return mockBatch;\n  };\n\n  // Detect car movement and create batches\n  const detectCarMovement = () => {\n    const mockBatch = generateMockData();\n    const isBatchMoving = mockBatch.some(data => data.Speed > 5); // Check if car is moving\n\n    if (isBatchMoving) {\n      if (!isMoving) {\n        // Car has started moving, start a new batch\n        setIsMoving(true);\n        setCurrentBatch(mockBatch);\n      } else {\n        // Car is already moving, add to the current batch\n        setCurrentBatch(prevBatch => [...prevBatch, ...mockBatch]);\n      }\n    } else {\n      // Car has stopped moving, send current batch to backend\n      if (isMoving && currentBatch.length > 0) {\n        sendGpsDataToBackend(currentBatch);\n        setRoute(prevRoute => [...prevRoute, [currentBatch[0].Latitude, currentBatch[0].Longitude], [currentBatch[currentBatch.length - 1].Latitude, currentBatch[currentBatch.length - 1].Longitude]]);\n        setCurrentBatch([]); // Clear current batch\n        setIsMoving(false);\n      }\n    }\n  };\n\n  // Send GPS batch to the backend\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Process backend response for performance and GPS data\n      const gps = response.data.gps_data || [];\n      const performance = response.data.performance || {\n        speed: [],\n        acceleration: [],\n        jerk: []\n      };\n      setGpsData([...gpsData, ...gps]); // Update GPS data\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      setError('Error sending GPS data');\n    }\n  };\n\n  // Use effect to simulate car movement every 10 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      detectCarMovement(); // Check movement and handle batches\n    }, 10000); // Every 10 seconds\n\n    return () => clearInterval(interval); // Cleanup interval\n  }, [isMoving, currentBatch, gpsData]);\n\n  // Process daily data at midnight\n  const processDailyData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\n        driver_id: driverId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Daily data processed', response.data);\n    } catch (err) {\n      console.error('Error processing daily data', err);\n    }\n  };\n\n  // Schedule process-daily-data call at 12 AM every day\n  useEffect(() => {\n    const midnight = new Date();\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\n\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\n    const timer = setTimeout(() => {\n      processDailyData();\n    }, delay);\n    return () => clearTimeout(timer); // Clean up timer\n  }, [driverId]);\n\n  // Prepare chart data for the performance graphs\n  const chartData = {\n    labels: (gpsData === null || gpsData === void 0 ? void 0 : gpsData.map((_, index) => `T${index}`)) || [],\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.speed) || [],\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.acceleration) || [],\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.jerk) || [],\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [40.712776, -74.005974],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route || [],\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$spee = performanceData.speed) === null || _performanceData$spee === void 0 ? void 0 : _performanceData$spee.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$acce = performanceData.acceleration) === null || _performanceData$acce === void 0 ? void 0 : _performanceData$acce.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$jerk = performanceData.jerk) === null || _performanceData$jerk === void 0 ? void 0 : _performanceData$jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", (route === null || route === void 0 ? void 0 : route.length) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"pjOjkXic4syzs/w+rvHUYn0gcVY=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","axios","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","_performanceData$spee","_performanceData$acce","_performanceData$jerk","gpsData","setGpsData","route","setRoute","currentBatch","setCurrentBatch","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","isMoving","setIsMoving","fetchData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","generateMockData","baseLat","baseLon","distanceIncrement","minSpeed","maxSpeed","lastLat","length","Latitude","lastLon","Longitude","timeStepIncrement","mockBatch","i","Math","random","timeStep","Date","now","push","Time_Step","Speed","detectCarMovement","isBatchMoving","some","prevBatch","sendGpsDataToBackend","prevRoute","gpsDataBatch","post","gps_data","gps","performance","interval","setInterval","clearInterval","processDailyData","console","log","midnight","setHours","delay","getTime","timer","setTimeout","clearTimeout","chartData","labels","map","_","index","datasets","label","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","slice","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Importing necessary Chart.js components\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]); // Store full GPS data for the route\r\n  const [route, setRoute] = useState([]);     // Coordinates for map polyline\r\n  const [currentBatch, setCurrentBatch] = useState([]); // Store current batch GPS data\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMoving, setIsMoving] = useState(false);  // Track if the car is moving\r\n\r\n  // Fetch driver data (driver_id) from the backend using JWT token\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Generate mock GPS data simulating car's movement\r\n  const generateMockData = () => {\r\n    const baseLat = 40.712776; // Starting coordinates (NYC)\r\n    const baseLon = -74.005974;\r\n    const distanceIncrement = 0.001; // Approx 100 meters\r\n    const minSpeed = 0; // Start from stationary\r\n    const maxSpeed = 40; // Max 40 km/h\r\n\r\n    let lastLat = gpsData.length > 0 ? gpsData[gpsData.length - 1].Latitude : baseLat;\r\n    let lastLon = gpsData.length > 0 ? gpsData[gpsData.length - 1].Longitude : baseLon;\r\n    const timeStepIncrement = 60; // 60 seconds between each point\r\n\r\n    const mockBatch = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      const speed = Math.random() * (maxSpeed - minSpeed) + minSpeed; // Random speed between 0 and max\r\n      const timeStep = Date.now() + i * timeStepIncrement * 1000;\r\n\r\n      lastLat += distanceIncrement;\r\n      lastLon += distanceIncrement;\r\n\r\n      mockBatch.push({\r\n        Latitude: lastLat,\r\n        Longitude: lastLon,\r\n        Time_Step: timeStep,\r\n        Speed: speed,\r\n      });\r\n    }\r\n\r\n    return mockBatch;\r\n  };\r\n\r\n  // Detect car movement and create batches\r\n  const detectCarMovement = () => {\r\n    const mockBatch = generateMockData();\r\n    const isBatchMoving = mockBatch.some(data => data.Speed > 5); // Check if car is moving\r\n\r\n    if (isBatchMoving) {\r\n      if (!isMoving) {\r\n        // Car has started moving, start a new batch\r\n        setIsMoving(true);\r\n        setCurrentBatch(mockBatch);\r\n      } else {\r\n        // Car is already moving, add to the current batch\r\n        setCurrentBatch(prevBatch => [...prevBatch, ...mockBatch]);\r\n      }\r\n    } else {\r\n      // Car has stopped moving, send current batch to backend\r\n      if (isMoving && currentBatch.length > 0) {\r\n        sendGpsDataToBackend(currentBatch);\r\n        setRoute(prevRoute => [\r\n          ...prevRoute,\r\n          [currentBatch[0].Latitude, currentBatch[0].Longitude],\r\n          [currentBatch[currentBatch.length - 1].Latitude, currentBatch[currentBatch.length - 1].Longitude],\r\n        ]);\r\n        setCurrentBatch([]); // Clear current batch\r\n        setIsMoving(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Send GPS batch to the backend\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/record-telematics',\r\n        {\r\n          driver_id: driverId,\r\n          gps_data: gpsDataBatch,\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Process backend response for performance and GPS data\r\n      const gps = response.data.gps_data || [];\r\n      const performance = response.data.performance || { speed: [], acceleration: [], jerk: [] };\r\n\r\n      setGpsData([...gpsData, ...gps]); // Update GPS data\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      setError('Error sending GPS data');\r\n    }\r\n  };\r\n\r\n  // Use effect to simulate car movement every 10 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      detectCarMovement(); // Check movement and handle batches\r\n    }, 10000); // Every 10 seconds\r\n\r\n    return () => clearInterval(interval);  // Cleanup interval\r\n  }, [isMoving, currentBatch, gpsData]);\r\n\r\n  // Process daily data at midnight\r\n  const processDailyData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/process-daily-data',\r\n        { driver_id: driverId },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      console.log('Daily data processed', response.data);\r\n    } catch (err) {\r\n      console.error('Error processing daily data', err);\r\n    }\r\n  };\r\n\r\n  // Schedule process-daily-data call at 12 AM every day\r\n  useEffect(() => {\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0);  // Set time to 12 AM midnight\r\n\r\n    const delay = midnight.getTime() - Date.now();  // Time until next midnight\r\n    const timer = setTimeout(() => {\r\n      processDailyData();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer);  // Clean up timer\r\n  }, [driverId]);\r\n\r\n  // Prepare chart data for the performance graphs\r\n  const chartData = {\r\n    labels: gpsData?.map((_, index) => `T${index}`) || [],\r\n    datasets: [\r\n      { label: 'Speed (m/s)', data: performanceData?.speed || [], borderColor: 'rgba(75,192,192,1)' },\r\n      { label: 'Acceleration (m/s²)', data: performanceData?.acceleration || [], borderColor: '#FF6384' },\r\n      { label: 'Jerk (m/s³)', data: performanceData?.jerk || [], borderColor: '#36A2EB' },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[40.712776, -74.005974]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route || []} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData?.speed?.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData?.acceleration?.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData?.jerk?.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route?.length || 0}\r\n        </div>\r\n      </div>\r\n      <DailyScorePopup driverId={driverId} />  {/* Display the Daily Score Popup */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AACjE,OAAO,0BAA0B;AACjC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,eAAe,EAAEC,MAAM,EAAEC,UAAU,EAAEC,cAAc,QAAQ,gBAAgB;AACpF,OAAO,kBAAkB;;AAEzB;AACA,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElBT,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC+B,KAAK,EAAEC,QAAQ,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAK;EAC5C,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACmC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpC,QAAQ,CAAC;IACrDqC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC0C,KAAK,EAAEC,QAAQ,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC4C,QAAQ,EAAEC,WAAW,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,MAAM6C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAG,MAAM5C,KAAK,CAAC6C,GAAG,CAAC,qCAAqC,EAAE;UACtEC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUN,KAAK;UAAG;QAC9C,CAAC,CAAC;QACFN,WAAW,CAACS,QAAQ,CAACI,IAAI,CAACC,SAAS,CAAC;MACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZb,QAAQ,CAAC,0BAA0B,CAAC;MACtC;IACF,CAAC;IACDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,OAAO,GAAG,SAAS,CAAC,CAAC;IAC3B,MAAMC,OAAO,GAAG,CAAC,SAAS;IAC1B,MAAMC,iBAAiB,GAAG,KAAK,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;;IAErB,IAAIC,OAAO,GAAGlC,OAAO,CAACmC,MAAM,GAAG,CAAC,GAAGnC,OAAO,CAACA,OAAO,CAACmC,MAAM,GAAG,CAAC,CAAC,CAACC,QAAQ,GAAGP,OAAO;IACjF,IAAIQ,OAAO,GAAGrC,OAAO,CAACmC,MAAM,GAAG,CAAC,GAAGnC,OAAO,CAACA,OAAO,CAACmC,MAAM,GAAG,CAAC,CAAC,CAACG,SAAS,GAAGR,OAAO;IAClF,MAAMS,iBAAiB,GAAG,EAAE,CAAC,CAAC;;IAE9B,MAAMC,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMjC,KAAK,GAAGkC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIV,QAAQ,GAAGD,QAAQ,CAAC,GAAGA,QAAQ,CAAC,CAAC;MAChE,MAAMY,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,CAAC,GAAGF,iBAAiB,GAAG,IAAI;MAE1DL,OAAO,IAAIH,iBAAiB;MAC5BM,OAAO,IAAIN,iBAAiB;MAE5BS,SAAS,CAACO,IAAI,CAAC;QACbX,QAAQ,EAAEF,OAAO;QACjBI,SAAS,EAAED,OAAO;QAClBW,SAAS,EAAEJ,QAAQ;QACnBK,KAAK,EAAEzC;MACT,CAAC,CAAC;IACJ;IAEA,OAAOgC,SAAS;EAClB,CAAC;;EAED;EACA,MAAMU,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMV,SAAS,GAAGZ,gBAAgB,CAAC,CAAC;IACpC,MAAMuB,aAAa,GAAGX,SAAS,CAACY,IAAI,CAAC3B,IAAI,IAAIA,IAAI,CAACwB,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE9D,IAAIE,aAAa,EAAE;MACjB,IAAI,CAACpC,QAAQ,EAAE;QACb;QACAC,WAAW,CAAC,IAAI,CAAC;QACjBX,eAAe,CAACmC,SAAS,CAAC;MAC5B,CAAC,MAAM;QACL;QACAnC,eAAe,CAACgD,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE,GAAGb,SAAS,CAAC,CAAC;MAC5D;IACF,CAAC,MAAM;MACL;MACA,IAAIzB,QAAQ,IAAIX,YAAY,CAAC+B,MAAM,GAAG,CAAC,EAAE;QACvCmB,oBAAoB,CAAClD,YAAY,CAAC;QAClCD,QAAQ,CAACoD,SAAS,IAAI,CACpB,GAAGA,SAAS,EACZ,CAACnD,YAAY,CAAC,CAAC,CAAC,CAACgC,QAAQ,EAAEhC,YAAY,CAAC,CAAC,CAAC,CAACkC,SAAS,CAAC,EACrD,CAAClC,YAAY,CAACA,YAAY,CAAC+B,MAAM,GAAG,CAAC,CAAC,CAACC,QAAQ,EAAEhC,YAAY,CAACA,YAAY,CAAC+B,MAAM,GAAG,CAAC,CAAC,CAACG,SAAS,CAAC,CAClG,CAAC;QACFjC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QACrBW,WAAW,CAAC,KAAK,CAAC;MACpB;IACF;EACF,CAAC;;EAED;EACA,MAAMsC,oBAAoB,GAAG,MAAOE,YAAY,IAAK;IACnD,IAAI;MACF,MAAMtC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAM5C,KAAK,CAACgF,IAAI,CAC/B,6CAA6C,EAC7C;QACE/B,SAAS,EAAEf,QAAQ;QACnB+C,QAAQ,EAAEF;MACZ,CAAC,EACD;QACEjC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG;MAC9C,CACF,CAAC;;MAED;MACA,MAAMyC,GAAG,GAAGtC,QAAQ,CAACI,IAAI,CAACiC,QAAQ,IAAI,EAAE;MACxC,MAAME,WAAW,GAAGvC,QAAQ,CAACI,IAAI,CAACmC,WAAW,IAAI;QAAEpD,KAAK,EAAE,EAAE;QAAEC,YAAY,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAC;MAE1FT,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE,GAAG2D,GAAG,CAAC,CAAC,CAAC,CAAC;MAClCpD,kBAAkB,CAAC;QACjBC,KAAK,EAAEoD,WAAW,CAACpD,KAAK;QACxBC,YAAY,EAAEmD,WAAW,CAACnD,YAAY;QACtCC,IAAI,EAAEkD,WAAW,CAAClD;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOiB,GAAG,EAAE;MACZb,QAAQ,CAAC,wBAAwB,CAAC;IACpC;EACF,CAAC;;EAED;EACA1C,SAAS,CAAC,MAAM;IACd,MAAMyF,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCZ,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAE;EACzC,CAAC,EAAE,CAAC9C,QAAQ,EAAEX,YAAY,EAAEJ,OAAO,CAAC,CAAC;;EAErC;EACA,MAAMgE,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAM9C,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAM5C,KAAK,CAACgF,IAAI,CAC/B,8CAA8C,EAC9C;QAAE/B,SAAS,EAAEf;MAAS,CAAC,EACvB;QAAEY,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG;MAAE,CAClD,CAAC;MACD+C,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE7C,QAAQ,CAACI,IAAI,CAAC;IACpD,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZsC,OAAO,CAACpD,KAAK,CAAC,6BAA6B,EAAEc,GAAG,CAAC;IACnD;EACF,CAAC;;EAED;EACAvD,SAAS,CAAC,MAAM;IACd,MAAM+F,QAAQ,GAAG,IAAItB,IAAI,CAAC,CAAC;IAC3BsB,QAAQ,CAACC,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;;IAEjC,MAAMC,KAAK,GAAGF,QAAQ,CAACG,OAAO,CAAC,CAAC,GAAGzB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAE;IAChD,MAAMyB,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BR,gBAAgB,CAAC,CAAC;IACpB,CAAC,EAAEK,KAAK,CAAC;IAET,OAAO,MAAMI,YAAY,CAACF,KAAK,CAAC,CAAC,CAAE;EACrC,CAAC,EAAE,CAAC5D,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM+D,SAAS,GAAG;IAChBC,MAAM,EAAE,CAAA3E,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE4E,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK,IAAIA,KAAK,EAAE,CAAC,KAAI,EAAE;IACrDC,QAAQ,EAAE,CACR;MAAEC,KAAK,EAAE,aAAa;MAAEvD,IAAI,EAAE,CAAAnB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEE,KAAK,KAAI,EAAE;MAAEyE,WAAW,EAAE;IAAqB,CAAC,EAC/F;MAAED,KAAK,EAAE,qBAAqB;MAAEvD,IAAI,EAAE,CAAAnB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,YAAY,KAAI,EAAE;MAAEwE,WAAW,EAAE;IAAU,CAAC,EACnG;MAAED,KAAK,EAAE,aAAa;MAAEvD,IAAI,EAAE,CAAAnB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEI,IAAI,KAAI,EAAE;MAAEuE,WAAW,EAAE;IAAU,CAAC;EAEvF,CAAC;EAED,oBACExF,OAAA;IAAKyF,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC1F,OAAA;MAAA0F,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxB1E,KAAK,iBAAIpB,OAAA;MAAGyF,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEtE;IAAK;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClD9F,OAAA;MAAKyF,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC1F,OAAA;QAAKyF,SAAS,EAAC,aAAa;QAAAC,QAAA,eAC1B1F,OAAA,CAACpB,YAAY;UAACmH,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC,SAAS,CAAE;UAACC,IAAI,EAAE,EAAG;UAACP,SAAS,EAAC,KAAK;UAAAC,QAAA,gBACtE1F,OAAA,CAACnB,SAAS;YAACoH,GAAG,EAAC;UAAoD;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACtE9F,OAAA,CAAClB,QAAQ;YAACoH,SAAS,EAAEzF,KAAK,IAAI,EAAG;YAAC0F,KAAK,EAAC;UAAM;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACN9F,OAAA;QAAKyF,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5B1F,OAAA,CAACjB,IAAI;UAACiD,IAAI,EAAEiD;QAAU;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN9F,OAAA;MAAKyF,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B1F,OAAA;QAAKyF,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB1F,OAAA,CAACd,eAAe;UAAAyG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,YAAQ,EAACjF,eAAe,aAAfA,eAAe,wBAAAT,qBAAA,GAAfS,eAAe,CAAEE,KAAK,cAAAX,qBAAA,uBAAtBA,qBAAA,CAAwBgG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAC,MAChE;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN9F,OAAA;QAAKyF,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB1F,OAAA,CAACb,MAAM;UAAAwG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,mBAAe,EAACjF,eAAe,aAAfA,eAAe,wBAAAR,qBAAA,GAAfQ,eAAe,CAAEG,YAAY,cAAAX,qBAAA,uBAA7BA,qBAAA,CAA+B+F,KAAK,CAAC,CAAC,CAAC,CAAC,EAAC,UACrE;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN9F,OAAA;QAAKyF,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB1F,OAAA,CAACZ,UAAU;UAAAuG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,WAAO,EAACjF,eAAe,aAAfA,eAAe,wBAAAP,qBAAA,GAAfO,eAAe,CAAEI,IAAI,cAAAX,qBAAA,uBAArBA,qBAAA,CAAuB8F,KAAK,CAAC,CAAC,CAAC,CAAC,EAAC,UACzD;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN9F,OAAA;QAAKyF,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB1F,OAAA,CAACX,cAAc;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,yBAAqB,EAAC,CAAArF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiC,MAAM,KAAI,CAAC;MAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN9F,OAAA,CAACf,eAAe;MAACiC,QAAQ,EAAEA;IAAS;MAAAyE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,MAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAAC3F,EAAA,CAtMID,SAAS;AAAAmG,EAAA,GAATnG,SAAS;AAwMf,eAAeA,SAAS;AAAC,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}