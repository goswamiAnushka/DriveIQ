{"ast":null,"code":"import api from './api'; // Axios instance\n\n// Helper function to generate random GPS points between start and end coordinates\nconst generateIntermediatePoints = (startLat, startLng, endLat, endLng, numPoints) => {\n  const points = [];\n  for (let i = 0; i < numPoints; i++) {\n    const lat = startLat + (endLat - startLat) * (Math.random() * 0.9 + 0.1); // Randomize latitude\n    const lng = startLng + (endLng - startLng) * (Math.random() * 0.9 + 0.1); // Randomize longitude\n    const timeStep = Math.floor(Math.random() * 100) + 60; // Random time steps (60-160 seconds)\n    const speed = Math.random() * 10 + 10; // Random speed (10-20 m/s)\n    points.push({\n      Latitude: lat,\n      Longitude: lng,\n      Time_Step: timeStep,\n      Speed: speed\n    });\n  }\n  return points;\n};\n\n// Mock GPS data for development/testing with random intermediate points\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const batch1 = generateIntermediatePoints(26.6348, 92.7966, 26.6408, 92.8006, 5); // Home to office\n  const batch2 = generateIntermediatePoints(26.6408, 92.8006, 26.6428, 92.8046, 5); // Office to market\n  const batch3 = generateIntermediatePoints(26.6428, 92.8046, 26.6458, 92.8086, 5); // Market to medicine shop\n  const batch4 = generateIntermediatePoints(26.6458, 92.8086, 26.6348, 92.7966, 5); // Back to home\n\n  const allRoutes = [batch1, batch2, batch3, batch4];\n  for (let route of allRoutes) {\n    let batch = [];\n    for (let i = 0; i < route.length; i++) {\n      const point = route[i];\n      const dataPoint = {\n        Latitude: point.Latitude,\n        Longitude: point.Longitude,\n        Time_Step: point.Time_Step,\n        Speed: point.Speed\n      };\n      setGpsData(prev => [...prev, dataPoint]); // Update local state\n      batch.push(dataPoint);\n      if (batch.length === route.length) {\n        await sendGPSBatchToBackend(batch, driverId); // Send the batch to backend\n        batch = [];\n      }\n\n      // Simulate real-time delay between GPS points\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n};\n\n// Real-time GPS tracking using geolocation API for mobile devices\nexport const getRealTimeGPSData = (setGpsData, driverId) => {\n  if (navigator.geolocation) {\n    let batch = [];\n    navigator.geolocation.watchPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      const speed = position.coords.speed || 0;\n      const timeStep = Date.now();\n      const dataPoint = {\n        Latitude: latitude,\n        Longitude: longitude,\n        Time_Step: timeStep,\n        Speed: speed\n      };\n      setGpsData(prev => [...prev, dataPoint]);\n      batch.push(dataPoint);\n      if (batch.length === 5 || speed === 0) {\n        // Batch data or stop condition\n        await sendGPSBatchToBackend(batch, driverId);\n        batch = [];\n      }\n    }, error => {\n      console.error('Error getting geolocation:', error);\n    }, {\n      enableHighAccuracy: true,\n      maximumAge: 1000,\n      timeout: 5000\n    });\n  } else {\n    console.error('Geolocation is not supported by this browser');\n  }\n};\n\n// Send GPS data batch to backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch\n    });\n    if (response.status === 200) {\n      console.log('GPS data batch successfully sent to backend');\n    }\n  } catch (err) {\n    console.error('Error sending GPS data:', err);\n  }\n};\n\n// Trigger process daily data at midnight\nexport const triggerDailyDataProcessing = async driverId => {\n  try {\n    const response = await api.post('/process-daily-data', {\n      driver_id: driverId\n    });\n    if (response.status === 200) {\n      console.log('Daily data processed:', response.data);\n    }\n  } catch (error) {\n    console.error('Error processing daily data:', error);\n  }\n};","map":{"version":3,"names":["api","generateIntermediatePoints","startLat","startLng","endLat","endLng","numPoints","points","i","lat","Math","random","lng","timeStep","floor","speed","push","Latitude","Longitude","Time_Step","Speed","mockGPSData","setGpsData","driverId","batch1","batch2","batch3","batch4","allRoutes","route","batch","length","point","dataPoint","prev","sendGPSBatchToBackend","Promise","resolve","setTimeout","getRealTimeGPSData","navigator","geolocation","watchPosition","position","latitude","longitude","coords","Date","now","error","console","enableHighAccuracy","maximumAge","timeout","response","post","driver_id","gps_data","status","log","err","triggerDailyDataProcessing","data"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["import api from './api';  // Axios instance\r\n\r\n// Helper function to generate random GPS points between start and end coordinates\r\nconst generateIntermediatePoints = (startLat, startLng, endLat, endLng, numPoints) => {\r\n  const points = [];\r\n  for (let i = 0; i < numPoints; i++) {\r\n    const lat = startLat + (endLat - startLat) * (Math.random() * 0.9 + 0.1);  // Randomize latitude\r\n    const lng = startLng + (endLng - startLng) * (Math.random() * 0.9 + 0.1);  // Randomize longitude\r\n    const timeStep = Math.floor(Math.random() * 100) + 60;  // Random time steps (60-160 seconds)\r\n    const speed = Math.random() * 10 + 10;  // Random speed (10-20 m/s)\r\n    points.push({ Latitude: lat, Longitude: lng, Time_Step: timeStep, Speed: speed });\r\n  }\r\n  return points;\r\n};\r\n\r\n// Mock GPS data for development/testing with random intermediate points\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const batch1 = generateIntermediatePoints(26.6348, 92.7966, 26.6408, 92.8006, 5);  // Home to office\r\n  const batch2 = generateIntermediatePoints(26.6408, 92.8006, 26.6428, 92.8046, 5);  // Office to market\r\n  const batch3 = generateIntermediatePoints(26.6428, 92.8046, 26.6458, 92.8086, 5);  // Market to medicine shop\r\n  const batch4 = generateIntermediatePoints(26.6458, 92.8086, 26.6348, 92.7966, 5);  // Back to home\r\n\r\n  const allRoutes = [batch1, batch2, batch3, batch4];\r\n\r\n  for (let route of allRoutes) {\r\n    let batch = [];\r\n    for (let i = 0; i < route.length; i++) {\r\n      const point = route[i];\r\n      const dataPoint = {\r\n        Latitude: point.Latitude,\r\n        Longitude: point.Longitude,\r\n        Time_Step: point.Time_Step,\r\n        Speed: point.Speed,\r\n      };\r\n\r\n      setGpsData(prev => [...prev, dataPoint]);  // Update local state\r\n      batch.push(dataPoint);\r\n\r\n      if (batch.length === route.length) {\r\n        await sendGPSBatchToBackend(batch, driverId);  // Send the batch to backend\r\n        batch = [];\r\n      }\r\n\r\n      // Simulate real-time delay between GPS points\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n  }\r\n};\r\n\r\n// Real-time GPS tracking using geolocation API for mobile devices\r\nexport const getRealTimeGPSData = (setGpsData, driverId) => {\r\n  if (navigator.geolocation) {\r\n    let batch = [];\r\n    navigator.geolocation.watchPosition(async (position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      const speed = position.coords.speed || 0;\r\n      const timeStep = Date.now();\r\n\r\n      const dataPoint = {\r\n        Latitude: latitude,\r\n        Longitude: longitude,\r\n        Time_Step: timeStep,\r\n        Speed: speed,\r\n      };\r\n\r\n      setGpsData(prev => [...prev, dataPoint]);\r\n      batch.push(dataPoint);\r\n\r\n      if (batch.length === 5 || speed === 0) {  // Batch data or stop condition\r\n        await sendGPSBatchToBackend(batch, driverId);\r\n        batch = [];\r\n      }\r\n    }, (error) => {\r\n      console.error('Error getting geolocation:', error);\r\n    }, {\r\n      enableHighAccuracy: true,\r\n      maximumAge: 1000,\r\n      timeout: 5000,\r\n    });\r\n  } else {\r\n    console.error('Geolocation is not supported by this browser');\r\n  }\r\n};\r\n\r\n// Send GPS data batch to backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const response = await api.post('/record-telematics', { driver_id: driverId, gps_data: batch });\r\n    if (response.status === 200) {\r\n      console.log('GPS data batch successfully sent to backend');\r\n    }\r\n  } catch (err) {\r\n    console.error('Error sending GPS data:', err);\r\n  }\r\n};\r\n\r\n// Trigger process daily data at midnight\r\nexport const triggerDailyDataProcessing = async (driverId) => {\r\n  try {\r\n    const response = await api.post('/process-daily-data', { driver_id: driverId });\r\n    if (response.status === 200) {\r\n      console.log('Daily data processed:', response.data);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error processing daily data:', error);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}