{"ast":null,"code":"import api from './api'; // Axios instance\n\n// Helper to send a batch of GPS data to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch // Send the batch data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Function to generate realistic GPS coordinates between two points\nconst generateIntermediatePoints = (start, end, steps) => {\n  const latDiff = (end.Latitude - start.Latitude) / steps;\n  const lngDiff = (end.Longitude - start.Longitude) / steps;\n  let points = [];\n  for (let i = 1; i <= steps; i++) {\n    points.push({\n      Latitude: start.Latitude + latDiff * i,\n      Longitude: start.Longitude + lngDiff * i,\n      Time_Step: 60 * i // Assume each step takes 1 minute (60 seconds)\n    });\n  }\n  return points;\n};\n\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const basePoints = [{\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  },\n  // Point A (Home)\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Point B (Office)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Point C (Market)\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220\n  } // Point D (Pharmacy)\n  ];\n  const journey = [];\n\n  // Generate route A -> B -> C -> D -> A with realistic intermediate points\n  for (let i = 0; i < basePoints.length; i++) {\n    const currentPoint = basePoints[i];\n    const nextPoint = basePoints[(i + 1) % basePoints.length]; // Loop back to A after D\n\n    const steps = 5; // Number of intermediate points between stops\n    const segmentPoints = generateIntermediatePoints(currentPoint, nextPoint, steps);\n    journey.push(...segmentPoints); // Add the generated points to the journey\n\n    // Update the GPS data state\n    segmentPoints.forEach(point => {\n      setGpsData(prev => [...prev, point]);\n    });\n  }\n\n  // Send GPS data in batches of 5 points\n  let batch = [];\n  for (let i = 0; i < journey.length; i++) {\n    batch.push(journey[i]);\n\n    // Send a batch when there are 5 points or at the end\n    if (batch.length === 5 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId); // Send the batch to the backend\n      batch = []; // Clear the batch\n    }\n  }\n};\n\n// Real GPS tracking function (unchanged for now)\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n\n    // Time step between current and last recorded GPS point\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep // Time step in seconds\n    };\n\n    // If thereâ€™s significant movement, record and batch the data\n    if (lastPosition) {\n      const distanceMoved = calculateDistance(lastPosition, {\n        latitude,\n        longitude\n      }); // in meters\n\n      if (distanceMoved > 10) {\n        // Only track if more than 10m movement\n        gpsBatch.push(gpsDataPoint);\n        setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n      }\n    } else {\n      // First point, just push to the batch\n      gpsBatch.push(gpsDataPoint);\n    }\n\n    // Send batch every 5 points or at significant stop\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      // Send on stop or batch size\n      sendGPSBatchToBackend(gpsBatch, driverId);\n      gpsBatch.length = 0; // Reset the batch\n    }\n    lastPosition = {\n      latitude,\n      longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Radius of the earth in meters\n  const lat1 = point1.latitude * Math.PI / 180;\n  const lat2 = point2.latitude * Math.PI / 180;\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};\n\n// Helper function to calculate time step between two timestamps (in seconds)\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Return difference in seconds\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","generateIntermediatePoints","start","end","steps","latDiff","Latitude","lngDiff","Longitude","points","i","push","Time_Step","mockGPSData","setGpsData","basePoints","journey","length","currentPoint","nextPoint","segmentPoints","forEach","point","prev","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","startTime","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","timeStep","calculateTimeStep","gpsDataPoint","distanceMoved","calculateDistance","prevGpsData","onError","message","options","enableHighAccuracy","timeout","maximumAge","watchPosition","point1","point2","R","lat1","Math","PI","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","endTime","floor"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["import api from './api';  // Axios instance\r\n\r\n// Helper to send a batch of GPS data to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');  // Get JWT token\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,  // Send the batch data\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Function to generate realistic GPS coordinates between two points\r\nconst generateIntermediatePoints = (start, end, steps) => {\r\n  const latDiff = (end.Latitude - start.Latitude) / steps;\r\n  const lngDiff = (end.Longitude - start.Longitude) / steps;\r\n\r\n  let points = [];\r\n  for (let i = 1; i <= steps; i++) {\r\n    points.push({\r\n      Latitude: start.Latitude + latDiff * i,\r\n      Longitude: start.Longitude + lngDiff * i,\r\n      Time_Step: 60 * i,  // Assume each step takes 1 minute (60 seconds)\r\n    });\r\n  }\r\n  return points;\r\n};\r\n\r\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const basePoints = [\r\n    { Latitude: 26.6338, Longitude: 92.8006 },  // Point A (Home)\r\n    { Latitude: 26.6382, Longitude: 92.8074 },  // Point B (Office)\r\n    { Latitude: 26.6451, Longitude: 92.8185 },  // Point C (Market)\r\n    { Latitude: 26.6492, Longitude: 92.8220 }   // Point D (Pharmacy)\r\n  ];\r\n\r\n  const journey = [];\r\n\r\n  // Generate route A -> B -> C -> D -> A with realistic intermediate points\r\n  for (let i = 0; i < basePoints.length; i++) {\r\n    const currentPoint = basePoints[i];\r\n    const nextPoint = basePoints[(i + 1) % basePoints.length];  // Loop back to A after D\r\n    \r\n    const steps = 5;  // Number of intermediate points between stops\r\n    const segmentPoints = generateIntermediatePoints(currentPoint, nextPoint, steps);\r\n    \r\n    journey.push(...segmentPoints);  // Add the generated points to the journey\r\n\r\n    // Update the GPS data state\r\n    segmentPoints.forEach(point => {\r\n      setGpsData(prev => [...prev, point]);\r\n    });\r\n  }\r\n\r\n  // Send GPS data in batches of 5 points\r\n  let batch = [];\r\n  for (let i = 0; i < journey.length; i++) {\r\n    batch.push(journey[i]);\r\n\r\n    // Send a batch when there are 5 points or at the end\r\n    if (batch.length === 5 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);  // Send the batch to the backend\r\n      batch = [];  // Clear the batch\r\n    }\r\n  }\r\n};\r\n\r\n// Real GPS tracking function (unchanged for now)\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n\r\n    // Time step between current and last recorded GPS point\r\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep,  // Time step in seconds\r\n    };\r\n\r\n    // If thereâ€™s significant movement, record and batch the data\r\n    if (lastPosition) {\r\n      const distanceMoved = calculateDistance(lastPosition, { latitude, longitude }); // in meters\r\n\r\n      if (distanceMoved > 10) { // Only track if more than 10m movement\r\n        gpsBatch.push(gpsDataPoint);\r\n        setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n      }\r\n    } else {\r\n      // First point, just push to the batch\r\n      gpsBatch.push(gpsDataPoint);\r\n    }\r\n\r\n    // Send batch every 5 points or at significant stop\r\n    if (gpsBatch.length >= 5 || timeStep > 300) {  // Send on stop or batch size\r\n      sendGPSBatchToBackend(gpsBatch, driverId);\r\n      gpsBatch.length = 0;  // Reset the batch\r\n    }\r\n\r\n    lastPosition = { latitude, longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3;  // Radius of the earth in meters\r\n  const lat1 = point1.latitude * Math.PI / 180;\r\n  const lat2 = point2.latitude * Math.PI / 180;\r\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;  // Returns the distance in meters\r\n};\r\n\r\n// Helper function to calculate time step between two timestamps (in seconds)\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000);  // Return difference in seconds\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}