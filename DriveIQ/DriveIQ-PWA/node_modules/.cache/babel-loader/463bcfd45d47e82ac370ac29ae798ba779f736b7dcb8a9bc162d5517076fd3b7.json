{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2'; // Import Bar for distribution chart\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport api from '../../utils/api';\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\nimport './Dashboard.scss';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [speedData, setSpeedData] = useState([]);\n  const [accelerationData, setAccelerationData] = useState([]);\n  const [jerkData, setJerkData] = useState([]);\n  const [brakingData, setBrakingData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState(null);\n  const [dailyData, setDailyData] = useState(null); // New state for daily data\n\n  const cleanValue = value => isNaN(value) ? 'N/A' : value;\n  useEffect(() => {\n    if (dailyData) {\n      console.log('Rendering Daily Data: ', dailyData);\n    }\n  }, [dailyData]);\n  const toggleTracking = () => {\n    if (isTracking) {\n      setIsTracking(false);\n    } else {\n      setIsTracking(true);\n      startTracking();\n    }\n  };\n  const startTracking = () => {\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches\n    simulatedBatches.forEach((batch, index) => {\n      setTimeout(() => {\n        processBatch(batch).then(() => {\n          if (index === simulatedBatches.length - 1) {\n            processDailyData(); // Call processDailyData after last batch\n          }\n        });\n      }, index * 5000); // Process each batch after 5 seconds\n    });\n  };\n  const processBatch = async batch => {\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\n    if (isMoving) {\n      try {\n        const driver_id = localStorage.getItem('driver_id');\n        const response = await api.post('/record-telematics', {\n          driver_id,\n          gps_data: batch.gps_data\n        });\n        const features = response.data.features;\n        if (features) {\n          var _features$SpeedMS, _features$Acceleratio, _features$JerkMS, _features$Braking_Int;\n          const speed = (_features$SpeedMS = features['Speed(m/s)']) !== null && _features$SpeedMS !== void 0 ? _features$SpeedMS : 0;\n          const acceleration = (_features$Acceleratio = features['Acceleration(m/s^2)']) !== null && _features$Acceleratio !== void 0 ? _features$Acceleratio : 0;\n          const jerk = (_features$JerkMS = features['Jerk(m/s^3)']) !== null && _features$JerkMS !== void 0 ? _features$JerkMS : 0;\n          const brakingIntensity = (_features$Braking_Int = features['Braking_Intensity']) !== null && _features$Braking_Int !== void 0 ? _features$Braking_Int : 0;\n          setSpeedData(prevData => [...prevData, speed]);\n          setAccelerationData(prevData => [...prevData, acceleration]);\n          setJerkData(prevData => [...prevData, jerk]);\n          setBrakingData(prevData => [...prevData, brakingIntensity]);\n          setGpsData(prevData => [...prevData, ...batch.gps_data]);\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\n          setMarkers(prevMarkers => [...prevMarkers, {\n            lat: lastPoint.Latitude,\n            lng: lastPoint.Longitude\n          }]);\n          setRoute(prevRoute => [...prevRoute, ...batch.gps_data.map(point => [point.Latitude, point.Longitude])]);\n        } else {\n          console.error('Error: Features object is undefined or missing keys');\n        }\n      } catch (error) {\n        console.error('Error recording telematics data:', error);\n        setError('Error processing GPS data. Please try again.');\n      }\n    }\n  };\n  const processDailyData = async () => {\n    try {\n      const driver_id = localStorage.getItem('driver_id');\n      const response = await api.post('/process-daily-data', {\n        driver_id\n      });\n      console.log('Daily Data Response:', response.data);\n      setDailyData(response.data); // Store daily data in the state\n    } catch (error) {\n      console.error('Error processing daily data:', error);\n    }\n  };\n\n  // Render the distribution graph for daily features\n  const renderDistributionGraph = () => {\n    if (!dailyData || !dailyData.aggregated_data) return null;\n    const labels = ['Speed(m/s)', 'Acceleration(m/s^2)', 'Jerk(m/s^3)', 'Braking Intensity'];\n    const data = [cleanValue(dailyData.aggregated_data['Speed(m/s)']), cleanValue(dailyData.aggregated_data['Acceleration(m/s^2)']), cleanValue(dailyData.aggregated_data['Jerk(m/s^3)']), cleanValue(dailyData.aggregated_data['Braking_Intensity'])];\n    const chartData = {\n      labels,\n      datasets: [{\n        label: 'Daily Feature Distribution',\n        backgroundColor: '#3498db',\n        borderColor: '#2980b9',\n        borderWidth: 1,\n        hoverBackgroundColor: '#2980b9',\n        hoverBorderColor: '#1c6381',\n        data\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"distribution-chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  };\n  const renderChart = (label, data, borderColor) => {\n    const chartLabels = data.map((_, index) => `Batch ${index + 1}`);\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: label,\n          data: data,\n          borderColor: borderColor,\n          fill: false\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracking-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTracking,\n        children: isTracking ? 'Stop Tracking' : 'Start Tracking'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-process-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: processDailyData,\n        children: \"Process Daily Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [renderChart('Speed (m/s)', speedData, 'rgba(75, 192, 192, 1)'), renderChart('Acceleration (m/s²)', accelerationData, 'rgba(255, 99, 132, 1)'), renderChart('Jerk (m/s³)', jerkData, 'rgba(54, 162, 235, 1)'), renderChart('Braking Intensity', brakingData, 'rgba(153, 102, 255, 1)')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), renderDistributionGraph(), /*#__PURE__*/_jsxDEV(BatchProcessing, {\n      gpsData: gpsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"wuQEwA7U0balDwR8f8zad+niK8E=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","Bar","MapContainer","TileLayer","Marker","Popup","Polyline","L","api","smartGpsTracking","generateSimulatedRoute","BatchProcessing","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","speedData","setSpeedData","accelerationData","setAccelerationData","jerkData","setJerkData","brakingData","setBrakingData","route","setRoute","markers","setMarkers","isTracking","setIsTracking","error","setError","dailyData","setDailyData","cleanValue","value","isNaN","console","log","toggleTracking","startTracking","simulatedBatches","forEach","batch","index","setTimeout","processBatch","then","length","processDailyData","isMoving","gps_data","driver_id","localStorage","getItem","response","post","features","data","_features$SpeedMS","_features$Acceleratio","_features$JerkMS","_features$Braking_Int","speed","acceleration","jerk","brakingIntensity","prevData","lastPoint","prevMarkers","lat","Latitude","lng","Longitude","prevRoute","map","point","renderDistributionGraph","aggregated_data","labels","chartData","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","className","children","options","responsive","scales","y","beginAtZero","fileName","_jsxFileName","lineNumber","columnNumber","renderChart","chartLabels","_","fill","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';  // Import Bar for distribution chart\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport api from '../../utils/api';\r\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\r\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\r\nimport './Dashboard.scss';\r\n\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [speedData, setSpeedData] = useState([]);\r\n  const [accelerationData, setAccelerationData] = useState([]);\r\n  const [jerkData, setJerkData] = useState([]);\r\n  const [brakingData, setBrakingData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [dailyData, setDailyData] = useState(null); // New state for daily data\r\n\r\n  const cleanValue = (value) => (isNaN(value) ? 'N/A' : value);\r\n\r\n  useEffect(() => {\r\n    if (dailyData) {\r\n      console.log('Rendering Daily Data: ', dailyData);\r\n    }\r\n  }, [dailyData]);\r\n\r\n  const toggleTracking = () => {\r\n    if (isTracking) {\r\n      setIsTracking(false);\r\n    } else {\r\n      setIsTracking(true);\r\n      startTracking();\r\n    }\r\n  };\r\n\r\n  const startTracking = () => {\r\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches\r\n    simulatedBatches.forEach((batch, index) => {\r\n      setTimeout(() => {\r\n        processBatch(batch).then(() => {\r\n          if (index === simulatedBatches.length - 1) {\r\n            processDailyData();  // Call processDailyData after last batch\r\n          }\r\n        });\r\n      }, index * 5000); // Process each batch after 5 seconds\r\n    });\r\n  };\r\n\r\n  const processBatch = async (batch) => {\r\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\r\n    if (isMoving) {\r\n      try {\r\n        const driver_id = localStorage.getItem('driver_id');\r\n        const response = await api.post('/record-telematics', {\r\n          driver_id,\r\n          gps_data: batch.gps_data,\r\n        });\r\n\r\n        const features = response.data.features;\r\n        if (features) {\r\n          const speed = features['Speed(m/s)'] ?? 0;\r\n          const acceleration = features['Acceleration(m/s^2)'] ?? 0;\r\n          const jerk = features['Jerk(m/s^3)'] ?? 0;\r\n          const brakingIntensity = features['Braking_Intensity'] ?? 0;\r\n\r\n          setSpeedData((prevData) => [...prevData, speed]);\r\n          setAccelerationData((prevData) => [...prevData, acceleration]);\r\n          setJerkData((prevData) => [...prevData, jerk]);\r\n          setBrakingData((prevData) => [...prevData, brakingIntensity]);\r\n\r\n          setGpsData((prevData) => [...prevData, ...batch.gps_data]);\r\n\r\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\r\n          setMarkers((prevMarkers) => [\r\n            ...prevMarkers,\r\n            { lat: lastPoint.Latitude, lng: lastPoint.Longitude },\r\n          ]);\r\n\r\n          setRoute((prevRoute) => [\r\n            ...prevRoute,\r\n            ...batch.gps_data.map((point) => [point.Latitude, point.Longitude]),\r\n          ]);\r\n        } else {\r\n          console.error('Error: Features object is undefined or missing keys');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error recording telematics data:', error);\r\n        setError('Error processing GPS data. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const processDailyData = async () => {\r\n    try {\r\n      const driver_id = localStorage.getItem('driver_id');\r\n      const response = await api.post('/process-daily-data', { driver_id });\r\n\r\n      console.log('Daily Data Response:', response.data);\r\n      setDailyData(response.data);  // Store daily data in the state\r\n    } catch (error) {\r\n      console.error('Error processing daily data:', error);\r\n    }\r\n  };\r\n\r\n  // Render the distribution graph for daily features\r\n  const renderDistributionGraph = () => {\r\n    if (!dailyData || !dailyData.aggregated_data) return null;\r\n\r\n    const labels = ['Speed(m/s)', 'Acceleration(m/s^2)', 'Jerk(m/s^3)', 'Braking Intensity'];\r\n    const data = [\r\n      cleanValue(dailyData.aggregated_data['Speed(m/s)']),\r\n      cleanValue(dailyData.aggregated_data['Acceleration(m/s^2)']),\r\n      cleanValue(dailyData.aggregated_data['Jerk(m/s^3)']),\r\n      cleanValue(dailyData.aggregated_data['Braking_Intensity'])\r\n    ];\r\n\r\n    const chartData = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Daily Feature Distribution',\r\n          backgroundColor: '#3498db',\r\n          borderColor: '#2980b9',\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: '#2980b9',\r\n          hoverBorderColor: '#1c6381',\r\n          data\r\n        }\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <div className=\"distribution-chart-container\">\r\n        <Bar\r\n          data={chartData}\r\n          options={{\r\n            responsive: true,\r\n            scales: {\r\n              y: {\r\n                beginAtZero: true\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderChart = (label, data, borderColor) => {\r\n    const chartLabels = data.map((_, index) => `Batch ${index + 1}`);\r\n    return (\r\n      <Line\r\n        data={{\r\n          labels: chartLabels,\r\n          datasets: [\r\n            {\r\n              label: label,\r\n              data: data,\r\n              borderColor: borderColor,\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      <div className=\"tracking-controls\">\r\n        <button onClick={toggleTracking}>\r\n          {isTracking ? 'Stop Tracking' : 'Start Tracking'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"manual-process-controls\">\r\n        <button onClick={processDailyData}>Process Daily Data</button>\r\n      </div>\r\n\r\n      <div className=\"chart-container\">\r\n        {renderChart('Speed (m/s)', speedData, 'rgba(75, 192, 192, 1)')}\r\n        {renderChart('Acceleration (m/s²)', accelerationData, 'rgba(255, 99, 132, 1)')}\r\n        {renderChart('Jerk (m/s³)', jerkData, 'rgba(54, 162, 235, 1)')}\r\n        {renderChart('Braking Intensity', brakingData, 'rgba(153, 102, 255, 1)')}\r\n      </div>\r\n\r\n      {/* Distribution Graph for daily data */}\r\n      {renderDistributionGraph()}\r\n\r\n      <BatchProcessing gpsData={gpsData} />\r\n      \r\n      {error && <div className=\"error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB,CAAC,CAAE;AAC9C,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChF,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAOC,GAAG,MAAM,iBAAiB;AACjC,SAASC,gBAAgB,EAAEC,sBAAsB,QAAQ,yBAAyB;AAClF,OAAOC,eAAe,MAAM,oCAAoC;AAChE,OAAO,kBAAkB;AAEzB,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvIV,OAAO,CAACW,QAAQ,CAACV,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE3G,MAAMI,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC+B,SAAS,EAAEC,YAAY,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACmC,QAAQ,EAAEC,WAAW,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqC,WAAW,EAAEC,cAAc,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACyC,OAAO,EAAEC,UAAU,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6C,KAAK,EAAEC,QAAQ,CAAC,GAAG9C,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC+C,SAAS,EAAEC,YAAY,CAAC,GAAGhD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD,MAAMiD,UAAU,GAAIC,KAAK,IAAMC,KAAK,CAACD,KAAK,CAAC,GAAG,KAAK,GAAGA,KAAM;EAE5DjD,SAAS,CAAC,MAAM;IACd,IAAI8C,SAAS,EAAE;MACbK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEN,SAAS,CAAC;IAClD;EACF,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIX,UAAU,EAAE;MACdC,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,MAAM;MACLA,aAAa,CAAC,IAAI,CAAC;MACnBW,aAAa,CAAC,CAAC;IACjB;EACF,CAAC;EAED,MAAMA,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,gBAAgB,GAAG5C,sBAAsB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACvD4C,gBAAgB,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACzCC,UAAU,CAAC,MAAM;QACfC,YAAY,CAACH,KAAK,CAAC,CAACI,IAAI,CAAC,MAAM;UAC7B,IAAIH,KAAK,KAAKH,gBAAgB,CAACO,MAAM,GAAG,CAAC,EAAE;YACzCC,gBAAgB,CAAC,CAAC,CAAC,CAAE;UACvB;QACF,CAAC,CAAC;MACJ,CAAC,EAAEL,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,YAAY,GAAG,MAAOH,KAAK,IAAK;IACpC,MAAMO,QAAQ,GAAGtD,gBAAgB,CAAC+C,KAAK,CAACQ,QAAQ,EAAErC,OAAO,CAAC;IAC1D,IAAIoC,QAAQ,EAAE;MACZ,IAAI;QACF,MAAME,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QACnD,MAAMC,QAAQ,GAAG,MAAM5D,GAAG,CAAC6D,IAAI,CAAC,oBAAoB,EAAE;UACpDJ,SAAS;UACTD,QAAQ,EAAER,KAAK,CAACQ;QAClB,CAAC,CAAC;QAEF,MAAMM,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACD,QAAQ;QACvC,IAAIA,QAAQ,EAAE;UAAA,IAAAE,iBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;UACZ,MAAMC,KAAK,IAAAJ,iBAAA,GAAGF,QAAQ,CAAC,YAAY,CAAC,cAAAE,iBAAA,cAAAA,iBAAA,GAAI,CAAC;UACzC,MAAMK,YAAY,IAAAJ,qBAAA,GAAGH,QAAQ,CAAC,qBAAqB,CAAC,cAAAG,qBAAA,cAAAA,qBAAA,GAAI,CAAC;UACzD,MAAMK,IAAI,IAAAJ,gBAAA,GAAGJ,QAAQ,CAAC,aAAa,CAAC,cAAAI,gBAAA,cAAAA,gBAAA,GAAI,CAAC;UACzC,MAAMK,gBAAgB,IAAAJ,qBAAA,GAAGL,QAAQ,CAAC,mBAAmB,CAAC,cAAAK,qBAAA,cAAAA,qBAAA,GAAI,CAAC;UAE3D7C,YAAY,CAAEkD,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEJ,KAAK,CAAC,CAAC;UAChD5C,mBAAmB,CAAEgD,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEH,YAAY,CAAC,CAAC;UAC9D3C,WAAW,CAAE8C,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEF,IAAI,CAAC,CAAC;UAC9C1C,cAAc,CAAE4C,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAED,gBAAgB,CAAC,CAAC;UAE7DnD,UAAU,CAAEoD,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGxB,KAAK,CAACQ,QAAQ,CAAC,CAAC;UAE1D,MAAMiB,SAAS,GAAGzB,KAAK,CAACQ,QAAQ,CAACR,KAAK,CAACQ,QAAQ,CAACH,MAAM,GAAG,CAAC,CAAC;UAC3DrB,UAAU,CAAE0C,WAAW,IAAK,CAC1B,GAAGA,WAAW,EACd;YAAEC,GAAG,EAAEF,SAAS,CAACG,QAAQ;YAAEC,GAAG,EAAEJ,SAAS,CAACK;UAAU,CAAC,CACtD,CAAC;UAEFhD,QAAQ,CAAEiD,SAAS,IAAK,CACtB,GAAGA,SAAS,EACZ,GAAG/B,KAAK,CAACQ,QAAQ,CAACwB,GAAG,CAAEC,KAAK,IAAK,CAACA,KAAK,CAACL,QAAQ,EAAEK,KAAK,CAACH,SAAS,CAAC,CAAC,CACpE,CAAC;QACJ,CAAC,MAAM;UACLpC,OAAO,CAACP,KAAK,CAAC,qDAAqD,CAAC;QACtE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxDC,QAAQ,CAAC,8CAA8C,CAAC;MAC1D;IACF;EACF,CAAC;EAED,MAAMkB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMG,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,MAAMC,QAAQ,GAAG,MAAM5D,GAAG,CAAC6D,IAAI,CAAC,qBAAqB,EAAE;QAAEJ;MAAU,CAAC,CAAC;MAErEf,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEiB,QAAQ,CAACG,IAAI,CAAC;MAClDzB,YAAY,CAACsB,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAE;IAChC,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAM+C,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAI,CAAC7C,SAAS,IAAI,CAACA,SAAS,CAAC8C,eAAe,EAAE,OAAO,IAAI;IAEzD,MAAMC,MAAM,GAAG,CAAC,YAAY,EAAE,qBAAqB,EAAE,aAAa,EAAE,mBAAmB,CAAC;IACxF,MAAMrB,IAAI,GAAG,CACXxB,UAAU,CAACF,SAAS,CAAC8C,eAAe,CAAC,YAAY,CAAC,CAAC,EACnD5C,UAAU,CAACF,SAAS,CAAC8C,eAAe,CAAC,qBAAqB,CAAC,CAAC,EAC5D5C,UAAU,CAACF,SAAS,CAAC8C,eAAe,CAAC,aAAa,CAAC,CAAC,EACpD5C,UAAU,CAACF,SAAS,CAAC8C,eAAe,CAAC,mBAAmB,CAAC,CAAC,CAC3D;IAED,MAAME,SAAS,GAAG;MAChBD,MAAM;MACNE,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,4BAA4B;QACnCC,eAAe,EAAE,SAAS;QAC1BC,WAAW,EAAE,SAAS;QACtBC,WAAW,EAAE,CAAC;QACdC,oBAAoB,EAAE,SAAS;QAC/BC,gBAAgB,EAAE,SAAS;QAC3B7B;MACF,CAAC;IAEL,CAAC;IAED,oBACEhD,OAAA;MAAK8E,SAAS,EAAC,8BAA8B;MAAAC,QAAA,eAC3C/E,OAAA,CAACtB,GAAG;QACFsE,IAAI,EAAEsB,SAAU;QAChBU,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMC,WAAW,GAAGA,CAACjB,KAAK,EAAExB,IAAI,EAAE0B,WAAW,KAAK;IAChD,MAAMgB,WAAW,GAAG1C,IAAI,CAACiB,GAAG,CAAC,CAAC0B,CAAC,EAAEzD,KAAK,KAAK,SAASA,KAAK,GAAG,CAAC,EAAE,CAAC;IAChE,oBACElC,OAAA,CAACvB,IAAI;MACHuE,IAAI,EAAE;QACJqB,MAAM,EAAEqB,WAAW;QACnBnB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAEA,KAAK;UACZxB,IAAI,EAAEA,IAAI;UACV0B,WAAW,EAAEA,WAAW;UACxBkB,IAAI,EAAE;QACR,CAAC;MAEL;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEN,CAAC;EAED,oBACExF,OAAA;IAAK8E,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC/E,OAAA;MAAA+E,QAAA,EAAI;IAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBxF,OAAA;MAAK8E,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChC/E,OAAA;QAAQ6F,OAAO,EAAEhE,cAAe;QAAAkD,QAAA,EAC7B7D,UAAU,GAAG,eAAe,GAAG;MAAgB;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENxF,OAAA;MAAK8E,SAAS,EAAC,yBAAyB;MAAAC,QAAA,eACtC/E,OAAA;QAAQ6F,OAAO,EAAEtD,gBAAiB;QAAAwC,QAAA,EAAC;MAAkB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eAENxF,OAAA;MAAK8E,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAC7BU,WAAW,CAAC,aAAa,EAAEnF,SAAS,EAAE,uBAAuB,CAAC,EAC9DmF,WAAW,CAAC,qBAAqB,EAAEjF,gBAAgB,EAAE,uBAAuB,CAAC,EAC7EiF,WAAW,CAAC,aAAa,EAAE/E,QAAQ,EAAE,uBAAuB,CAAC,EAC7D+E,WAAW,CAAC,mBAAmB,EAAE7E,WAAW,EAAE,wBAAwB,CAAC;IAAA;MAAAyE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,EAGLrB,uBAAuB,CAAC,CAAC,eAE1BnE,OAAA,CAACZ,eAAe;MAACgB,OAAO,EAAEA;IAAQ;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEpCpE,KAAK,iBAAIpB,OAAA;MAAK8E,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAE3D;IAAK;MAAAiE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACrF,EAAA,CA9LID,SAAS;AAAA4F,EAAA,GAAT5F,SAAS;AAgMf,eAAeA,SAAS;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}