{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\BatchProcessing\\\\BatchProcessing.jsx\",\n  _s = $RefreshSig$();\n// src/components/BatchProcessing/BatchProcessing.jsx\nimport React, { useEffect, useState } from 'react';\nimport api from '../../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BatchProcessing = ({\n  gpsData\n}) => {\n  _s();\n  const [processedData, setProcessedData] = useState(null);\n  useEffect(() => {\n    if (gpsData.length > 0) {\n      processBatch(gpsData);\n    }\n  }, [gpsData]);\n  const processBatch = async batch => {\n    try {\n      const driver_id = localStorage.getItem('driver_id');\n      const response = await api.post('/record-telematics', {\n        driver_id,\n        gps_data: batch\n      });\n      setProcessedData(response.data);\n    } catch (error) {\n      console.error('Error processing batch:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"batch-processing-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Batch Processing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), processedData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Processed batch data successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(processedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No batch processed yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(BatchProcessing, \"XUpq7l4RDJK2+3AZ1/cM3qhgogg=\");\n_c = BatchProcessing;\nexport default BatchProcessing;\nvar _c;\n$RefreshReg$(_c, \"BatchProcessing\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","BatchProcessing","gpsData","_s","processedData","setProcessedData","length","processBatch","batch","driver_id","localStorage","getItem","response","post","gps_data","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/BatchProcessing/BatchProcessing.jsx"],"sourcesContent":["// src/components/BatchProcessing/BatchProcessing.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from '../../utils/api';\r\n\r\nconst BatchProcessing = ({ gpsData }) => {\r\n  const [processedData, setProcessedData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (gpsData.length > 0) {\r\n      processBatch(gpsData);\r\n    }\r\n  }, [gpsData]);\r\n\r\n  const processBatch = async (batch) => {\r\n    try {\r\n      const driver_id = localStorage.getItem('driver_id');\r\n      const response = await api.post('/record-telematics', { driver_id, gps_data: batch });\r\n      setProcessedData(response.data);\r\n    } catch (error) {\r\n      console.error('Error processing batch:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"batch-processing-container\">\r\n      <h3>Batch Processing</h3>\r\n      {processedData ? (\r\n        <div>\r\n          <p>Processed batch data successfully!</p>\r\n          <pre>{JSON.stringify(processedData, null, 2)}</pre>\r\n        </div>\r\n      ) : (\r\n        <p>No batch processed yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BatchProcessing;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,IAAIM,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;MACtBC,YAAY,CAACL,OAAO,CAAC;IACvB;EACF,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAMK,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC,IAAI;MACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,oBAAoB,EAAE;QAAEJ,SAAS;QAAEK,QAAQ,EAAEN;MAAM,CAAC,CAAC;MACrFH,gBAAgB,CAACO,QAAQ,CAACG,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKkB,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACzCnB,OAAA;MAAAmB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBnB,aAAa,gBACZJ,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAG;MAAkC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzCvB,OAAA;QAAAmB,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACrB,aAAa,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,gBAENvB,OAAA;MAAAmB,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAhCIF,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AAkCrB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}