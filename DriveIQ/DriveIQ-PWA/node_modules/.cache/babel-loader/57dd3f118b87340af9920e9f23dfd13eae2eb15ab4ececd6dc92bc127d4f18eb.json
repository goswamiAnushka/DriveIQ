{"ast":null,"code":"// src/utils/geolocation.js\n\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const timestamp = Math.floor(Date.now() / 1000);\n        resolve({\n          latitude,\n          longitude,\n          timestamp\n        });\n      }, error => reject(error), {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    } else {\n      reject(new Error('Geolocation not supported'));\n    }\n  });\n};\n\n// Simulates GPS data when testing on a laptop\nexport const simulateGpsData = () => [{\n  Latitude: 26.6337,\n  Longitude: 92.7926,\n  Time_Step: 1\n}, {\n  Latitude: 26.6347,\n  Longitude: 92.7936,\n  Time_Step: 60\n}, {\n  Latitude: 26.6357,\n  Longitude: 92.7946,\n  Time_Step: 120\n}, {\n  Latitude: 26.6367,\n  Longitude: 92.7956,\n  Time_Step: 180\n}];\n\n// Smart logic for detecting vehicle movement or idle time\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3; // Earth radius in meters\n    const toRad = deg => deg * Math.PI / 180;\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in meters\n  };\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\n  if (previousBatch.length > 0) {\n    const lastPoint = previousBatch[previousBatch.length - 1];\n    const firstPoint = currentBatch[0];\n    const distance = calculateDistance(lastPoint.Latitude, lastPoint.Longitude, firstPoint.Latitude, firstPoint.Longitude);\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\n      console.log('Vehicle idle detected');\n      return false;\n    }\n  }\n  return true;\n};\n\n// Generate simulated routes for testing","map":{"version":3,"names":["getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","timestamp","Math","floor","Date","now","error","enableHighAccuracy","timeout","maximumAge","Error","simulateGpsData","Latitude","Longitude","Time_Step","smartGpsTracking","currentBatch","previousBatch","SPEED_THRESHOLD","calculateDistance","lat1","lon1","lat2","lon2","R","toRad","deg","PI","dLat","dLon","a","sin","cos","c","atan2","sqrt","calculateSpeed","distance","timeDiff","length","lastPoint","firstPoint","console","log"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\n\r\nexport const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          const timestamp = Math.floor(Date.now() / 1000);\r\n          resolve({ latitude, longitude, timestamp });\r\n        },\r\n        (error) => reject(error),\r\n        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n      );\r\n    } else {\r\n      reject(new Error('Geolocation not supported'));\r\n    }\r\n  });\r\n};\r\n\r\n// Simulates GPS data when testing on a laptop\r\nexport const simulateGpsData = () => [\r\n  { Latitude: 26.6337, Longitude: 92.7926, Time_Step: 1 },\r\n  { Latitude: 26.6347, Longitude: 92.7936, Time_Step: 60 },\r\n  { Latitude: 26.6357, Longitude: 92.7946, Time_Step: 120 },\r\n  { Latitude: 26.6367, Longitude: 92.7956, Time_Step: 180 },\r\n];\r\n\r\n// Smart logic for detecting vehicle movement or idle time\r\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\r\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\r\n\r\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371e3; // Earth radius in meters\r\n    const toRad = (deg) => (deg * Math.PI) / 180;\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in meters\r\n  };\r\n\r\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\r\n\r\n  if (previousBatch.length > 0) {\r\n    const lastPoint = previousBatch[previousBatch.length - 1];\r\n    const firstPoint = currentBatch[0];\r\n    const distance = calculateDistance(\r\n      lastPoint.Latitude,\r\n      lastPoint.Longitude,\r\n      firstPoint.Latitude,\r\n      firstPoint.Longitude\r\n    );\r\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\r\n\r\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\r\n      console.log('Vehicle idle detected');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Generate simulated routes for testing\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}