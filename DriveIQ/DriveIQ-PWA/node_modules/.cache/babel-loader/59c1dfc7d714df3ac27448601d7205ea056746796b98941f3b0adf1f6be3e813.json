{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MapView from '../MapView/MapView';\nimport PerformanceGraph from '../PerformanceGraph/PerformanceGraph';\nimport { mockGPSData, getRealTimeGPSData, triggerDailyDataProcessing } from '../../utils/geolocation';\nimport './Dashboard.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  driverId\n}) => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n\n  // Simulate tracking GPS data (mock for development, real for production)\n  useEffect(() => {\n    const trackGPS = async () => {\n      try {\n        // For production: getRealTimeGPSData(setGpsData, driverId);\n        await mockGPSData(setGpsData, driverId);\n      } catch (err) {\n        console.error('Error tracking GPS:', err);\n      }\n    };\n    trackGPS();\n\n    // Set up daily data processing trigger at midnight\n    const interval = setInterval(() => {\n      const now = new Date();\n      if (now.getHours() === 0 && now.getMinutes() === 0) {\n        triggerDailyDataProcessing(driverId);\n      }\n    }, 60000); // Check every minute\n\n    return () => clearInterval(interval);\n  }, [driverId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(MapView, {\n        gpsData: gpsData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PerformanceGraph, {\n        gpsData: gpsData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Daily Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance Covered: \", calculateTotalDistance(gpsData), \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Driving Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Driving Category: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// Utility function to calculate total distance from GPS data\n_s(Dashboard, \"lBTjsEndfiDkF4/UGwPW2GcjR8Y=\");\n_c = Dashboard;\nconst calculateTotalDistance = gpsData => {\n  if (!gpsData.length) return 0;\n  let totalDistance = 0;\n  for (let i = 1; i < gpsData.length; i++) {\n    const {\n      Latitude: lat1,\n      Longitude: lon1\n    } = gpsData[i - 1];\n    const {\n      Latitude: lat2,\n      Longitude: lon2\n    } = gpsData[i];\n    totalDistance += haversine(lat1, lon1, lat2, lon2);\n  }\n  return (totalDistance / 1000).toFixed(2); // Convert meters to kilometers\n};\n\n// Haversine formula to calculate distance between two GPS points\nconst haversine = (lat1, lon1, lat2, lon2) => {\n  const R = 6371000; // Earth's radius in meters\n  const toRad = x => x * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapView","PerformanceGraph","mockGPSData","getRealTimeGPSData","triggerDailyDataProcessing","jsxDEV","_jsxDEV","Dashboard","driverId","_s","gpsData","setGpsData","trackGPS","err","console","error","interval","setInterval","now","Date","getHours","getMinutes","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","calculateTotalDistance","_c","length","totalDistance","i","Latitude","lat1","Longitude","lon1","lat2","lon2","haversine","toFixed","R","toRad","x","Math","PI","dLat","dLon","a","sin","cos","c","atan2","sqrt","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MapView from '../MapView/MapView';\r\nimport PerformanceGraph from '../PerformanceGraph/PerformanceGraph';\r\nimport { mockGPSData, getRealTimeGPSData, triggerDailyDataProcessing } from '../../utils/geolocation';\r\nimport './Dashboard.scss';\r\n\r\nconst Dashboard = ({ driverId }) => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n\r\n  // Simulate tracking GPS data (mock for development, real for production)\r\n  useEffect(() => {\r\n    const trackGPS = async () => {\r\n      try {\r\n        // For production: getRealTimeGPSData(setGpsData, driverId);\r\n        await mockGPSData(setGpsData, driverId);\r\n      } catch (err) {\r\n        console.error('Error tracking GPS:', err);\r\n      }\r\n    };\r\n    trackGPS();\r\n\r\n    // Set up daily data processing trigger at midnight\r\n    const interval = setInterval(() => {\r\n      const now = new Date();\r\n      if (now.getHours() === 0 && now.getMinutes() === 0) {\r\n        triggerDailyDataProcessing(driverId);\r\n      }\r\n    }, 60000);  // Check every minute\r\n\r\n    return () => clearInterval(interval);\r\n  }, [driverId]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      <div className=\"dashboard-content\">\r\n        {/* Map showing the route */}\r\n        <MapView gpsData={gpsData} />\r\n\r\n        {/* Graph displaying performance fluctuations */}\r\n        <PerformanceGraph gpsData={gpsData} />\r\n\r\n        {/* Daily driving metrics summary */}\r\n        <div className=\"metrics-summary\">\r\n          <h3>Daily Metrics</h3>\r\n          <p>Distance Covered: {calculateTotalDistance(gpsData)} km</p>\r\n          <p>Driving Score: {/* Display driving score from backend */}</p>\r\n          <p>Driving Category: {/* Display driving category from backend */}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Utility function to calculate total distance from GPS data\r\nconst calculateTotalDistance = (gpsData) => {\r\n  if (!gpsData.length) return 0;\r\n\r\n  let totalDistance = 0;\r\n  for (let i = 1; i < gpsData.length; i++) {\r\n    const { Latitude: lat1, Longitude: lon1 } = gpsData[i - 1];\r\n    const { Latitude: lat2, Longitude: lon2 } = gpsData[i];\r\n    totalDistance += haversine(lat1, lon1, lat2, lon2);\r\n  }\r\n\r\n  return (totalDistance / 1000).toFixed(2);  // Convert meters to kilometers\r\n};\r\n\r\n// Haversine formula to calculate distance between two GPS points\r\nconst haversine = (lat1, lon1, lat2, lon2) => {\r\n  const R = 6371000;  // Earth's radius in meters\r\n  const toRad = x => (x * Math.PI) / 180;\r\n  const dLat = toRad(lat2 - lat1);\r\n  const dLon = toRad(lon2 - lon1);\r\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\r\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,WAAW,EAAEC,kBAAkB,EAAEC,0BAA0B,QAAQ,yBAAyB;AACrG,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF;QACA,MAAMV,WAAW,CAACS,UAAU,EAAEH,QAAQ,CAAC;MACzC,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MAC3C;IACF,CAAC;IACDD,QAAQ,CAAC,CAAC;;IAEV;IACA,MAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,IAAID,GAAG,CAACE,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAIF,GAAG,CAACG,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;QAClDjB,0BAA0B,CAACI,QAAQ,CAAC;MACtC;IACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAE;;IAEZ,OAAO,MAAMc,aAAa,CAACN,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBlB,OAAA;MAAAkB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBtB,OAAA;MAAKiB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAEhClB,OAAA,CAACN,OAAO;QAACU,OAAO,EAAEA;MAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAG7BtB,OAAA,CAACL,gBAAgB;QAACS,OAAO,EAAEA;MAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAGtCtB,OAAA;QAAKiB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BlB,OAAA;UAAAkB,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBtB,OAAA;UAAAkB,QAAA,GAAG,oBAAkB,EAACK,sBAAsB,CAACnB,OAAO,CAAC,EAAC,KAAG;QAAA;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC7DtB,OAAA;UAAAkB,QAAA,EAAG;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA6C,CAAC,eAChEtB,OAAA;UAAAkB,QAAA,EAAG;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAnB,EAAA,CAjDMF,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAkDf,MAAMsB,sBAAsB,GAAInB,OAAO,IAAK;EAC1C,IAAI,CAACA,OAAO,CAACqB,MAAM,EAAE,OAAO,CAAC;EAE7B,IAAIC,aAAa,GAAG,CAAC;EACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,OAAO,CAACqB,MAAM,EAAEE,CAAC,EAAE,EAAE;IACvC,MAAM;MAAEC,QAAQ,EAAEC,IAAI;MAAEC,SAAS,EAAEC;IAAK,CAAC,GAAG3B,OAAO,CAACuB,CAAC,GAAG,CAAC,CAAC;IAC1D,MAAM;MAAEC,QAAQ,EAAEI,IAAI;MAAEF,SAAS,EAAEG;IAAK,CAAC,GAAG7B,OAAO,CAACuB,CAAC,CAAC;IACtDD,aAAa,IAAIQ,SAAS,CAACL,IAAI,EAAEE,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;EACpD;EAEA,OAAO,CAACP,aAAa,GAAG,IAAI,EAAES,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE;AAC7C,CAAC;;AAED;AACA,MAAMD,SAAS,GAAGA,CAACL,IAAI,EAAEE,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC5C,MAAMG,CAAC,GAAG,OAAO,CAAC,CAAE;EACpB,MAAMC,KAAK,GAAGC,CAAC,IAAKA,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAI,GAAG;EACtC,MAAMC,IAAI,GAAGJ,KAAK,CAACL,IAAI,GAAGH,IAAI,CAAC;EAC/B,MAAMa,IAAI,GAAGL,KAAK,CAACJ,IAAI,GAAGF,IAAI,CAAC;EAC/B,MAAMY,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACK,GAAG,CAACH,IAAI,GAAG,CAAC,CAAC,GAC/CF,IAAI,CAACM,GAAG,CAACR,KAAK,CAACR,IAAI,CAAC,CAAC,GAAGU,IAAI,CAACM,GAAG,CAACR,KAAK,CAACL,IAAI,CAAC,CAAC,GAC7CO,IAAI,CAACK,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC;EACzC,MAAMI,CAAC,GAAG,CAAC,GAAGP,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACS,IAAI,CAACL,CAAC,CAAC,EAAEJ,IAAI,CAACS,IAAI,CAAC,CAAC,GAAGL,CAAC,CAAC,CAAC;EACxD,OAAOP,CAAC,GAAGU,CAAC;AACd,CAAC;AAED,eAAe7C,SAAS;AAAC,IAAAuB,EAAA;AAAAyB,YAAA,CAAAzB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}