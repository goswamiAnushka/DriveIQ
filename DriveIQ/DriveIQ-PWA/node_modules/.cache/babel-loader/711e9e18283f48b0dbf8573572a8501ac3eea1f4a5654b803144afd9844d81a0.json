{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\n\n// Chart.js setup\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [isMoving, setIsMoving] = useState(false);\n  const [batch, setBatch] = useState([]);\n  const [lastPoint, setLastPoint] = useState(null);\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n\n  // Fetch driver data from backend\n  useEffect(() => {\n    const fetchDriverData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchDriverData();\n  }, []);\n\n  // Mock GPS data generator (last point of one batch becomes the first of the next)\n  const generateMockBatchData = () => {\n    const distanceIncrement = 0.0015;\n    let lastLat = (lastPoint === null || lastPoint === void 0 ? void 0 : lastPoint.Latitude) || 40.712776; // NYC as a default starting point\n    let lastLon = (lastPoint === null || lastPoint === void 0 ? void 0 : lastPoint.Longitude) || -74.005974;\n    const speedVariation = Math.random() * 0.02; // Small variation in speed\n\n    const mockBatch = [];\n    for (let i = 0; i < 10; i++) {\n      lastLat += distanceIncrement;\n      lastLon += distanceIncrement;\n      mockBatch.push({\n        Latitude: lastLat,\n        Longitude: lastLon,\n        Time_Step: Date.now() + i * 1000,\n        // Time in ms\n        Speed: 8.37 + speedVariation // Random speed\n      });\n    }\n    setLastPoint(mockBatch[mockBatch.length - 1]); // Update last point for the next batch\n    return mockBatch;\n  };\n\n  // Handle GPS data when a new point arrives\n  const handlePosition = (lat, lon, speed) => {\n    const newGpsPoint = {\n      Latitude: lat,\n      Longitude: lon,\n      Time_Step: Date.now(),\n      Speed: speed * 3.6 // Convert to km/h\n    };\n    if (newGpsPoint.Speed > 5) {\n      setIsMoving(true);\n      setBatch(prevBatch => [...prevBatch, newGpsPoint]);\n    } else if (isMoving) {\n      // Car stopped; send the batch\n      setIsMoving(false);\n      sendBatchToBackend(batch);\n      setLastPoint(newGpsPoint); // Mark this as the last point of the batch\n      setBatch([]); // Reset the batch\n    }\n  };\n\n  // Send batch of GPS data to backend\n  const sendBatchToBackend = async gpsDataBatch => {\n    if (gpsDataBatch.length === 0) return;\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const gps = response.data.gps_data || [];\n      const performance = response.data.performance || {\n        speed: [],\n        acceleration: [],\n        jerk: []\n      };\n      if (gpsDataBatch.length > 1) {\n        const batchStart = gpsDataBatch[0];\n        const batchEnd = gpsDataBatch[gpsDataBatch.length - 1];\n        setRoute(prevRoute => [...prevRoute, [batchStart.Latitude, batchStart.Longitude], [batchEnd.Latitude, batchEnd.Longitude]]);\n      }\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      console.error('Error sending GPS data:', err);\n      setError('Error sending GPS data');\n    }\n  };\n\n  // Simulate GPS updates periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const mockData = generateMockBatchData();\n      for (const point of mockData) {\n        handlePosition(point.Latitude, point.Longitude, point.Speed);\n      }\n    }, 10000); // Every 10 seconds for testing\n\n    return () => clearInterval(interval);\n  }, [lastPoint]);\n\n  // Chart data\n  const chartData = {\n    labels: gpsData.map((_, index) => `T${index}`),\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: performanceData.speed,\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: performanceData.acceleration,\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: performanceData.jerk,\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [40.712776, -74.005974],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), route.length > 0 && /*#__PURE__*/_jsxDEV(Marker, {\n            position: route[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 34\n          }, this), route.length > 1 && /*#__PURE__*/_jsxDEV(Marker, {\n            position: route[route.length - 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"8IpYQNAd6QWjSv4QUmpxPESpikU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Marker","Line","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","isMoving","setIsMoving","batch","setBatch","lastPoint","setLastPoint","driverId","setDriverId","error","setError","fetchDriverData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","generateMockBatchData","distanceIncrement","lastLat","Latitude","lastLon","Longitude","speedVariation","Math","random","mockBatch","i","push","Time_Step","Date","now","Speed","length","handlePosition","lat","lon","newGpsPoint","prevBatch","sendBatchToBackend","gpsDataBatch","post","gps_data","gps","performance","batchStart","batchEnd","prevRoute","console","interval","setInterval","mockData","point","clearInterval","chartData","labels","map","_","index","datasets","label","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","position","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\n// Chart.js setup\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [isMoving, setIsMoving] = useState(false);\r\n  const [batch, setBatch] = useState([]);\r\n  const [lastPoint, setLastPoint] = useState(null);\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  // Fetch driver data from backend\r\n  useEffect(() => {\r\n    const fetchDriverData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchDriverData();\r\n  }, []);\r\n\r\n  // Mock GPS data generator (last point of one batch becomes the first of the next)\r\n  const generateMockBatchData = () => {\r\n    const distanceIncrement = 0.0015;\r\n    let lastLat = lastPoint?.Latitude || 40.712776; // NYC as a default starting point\r\n    let lastLon = lastPoint?.Longitude || -74.005974;\r\n    const speedVariation = Math.random() * 0.02; // Small variation in speed\r\n\r\n    const mockBatch = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      lastLat += distanceIncrement;\r\n      lastLon += distanceIncrement;\r\n      mockBatch.push({\r\n        Latitude: lastLat,\r\n        Longitude: lastLon,\r\n        Time_Step: Date.now() + i * 1000, // Time in ms\r\n        Speed: 8.37 + speedVariation, // Random speed\r\n      });\r\n    }\r\n\r\n    setLastPoint(mockBatch[mockBatch.length - 1]); // Update last point for the next batch\r\n    return mockBatch;\r\n  };\r\n\r\n  // Handle GPS data when a new point arrives\r\n  const handlePosition = (lat, lon, speed) => {\r\n    const newGpsPoint = {\r\n      Latitude: lat,\r\n      Longitude: lon,\r\n      Time_Step: Date.now(),\r\n      Speed: speed * 3.6, // Convert to km/h\r\n    };\r\n\r\n    if (newGpsPoint.Speed > 5) {\r\n      setIsMoving(true);\r\n      setBatch((prevBatch) => [...prevBatch, newGpsPoint]);\r\n    } else if (isMoving) {\r\n      // Car stopped; send the batch\r\n      setIsMoving(false);\r\n      sendBatchToBackend(batch);\r\n      setLastPoint(newGpsPoint); // Mark this as the last point of the batch\r\n      setBatch([]); // Reset the batch\r\n    }\r\n  };\r\n\r\n  // Send batch of GPS data to backend\r\n  const sendBatchToBackend = async (gpsDataBatch) => {\r\n    if (gpsDataBatch.length === 0) return;\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/record-telematics',\r\n        { driver_id: driverId, gps_data: gpsDataBatch },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      const gps = response.data.gps_data || [];\r\n      const performance = response.data.performance || { speed: [], acceleration: [], jerk: [] };\r\n\r\n      if (gpsDataBatch.length > 1) {\r\n        const batchStart = gpsDataBatch[0];\r\n        const batchEnd = gpsDataBatch[gpsDataBatch.length - 1];\r\n        setRoute((prevRoute) => [\r\n          ...prevRoute,\r\n          [batchStart.Latitude, batchStart.Longitude],\r\n          [batchEnd.Latitude, batchEnd.Longitude],\r\n        ]);\r\n      }\r\n\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      console.error('Error sending GPS data:', err);\r\n      setError('Error sending GPS data');\r\n    }\r\n  };\r\n\r\n  // Simulate GPS updates periodically\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const mockData = generateMockBatchData();\r\n      for (const point of mockData) {\r\n        handlePosition(point.Latitude, point.Longitude, point.Speed);\r\n      }\r\n    }, 10000); // Every 10 seconds for testing\r\n\r\n    return () => clearInterval(interval);\r\n  }, [lastPoint]);\r\n\r\n  // Chart data\r\n  const chartData = {\r\n    labels: gpsData.map((_, index) => `T${index}`),\r\n    datasets: [\r\n      { label: 'Speed (m/s)', data: performanceData.speed, borderColor: 'rgba(75,192,192,1)' },\r\n      { label: 'Acceleration (m/s²)', data: performanceData.acceleration, borderColor: '#FF6384' },\r\n      { label: 'Jerk (m/s³)', data: performanceData.jerk, borderColor: '#36A2EB' },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[40.712776, -74.005974]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route} color=\"blue\" />\r\n            {route.length > 0 && <Marker position={route[0]} />}\r\n            {route.length > 1 && <Marker position={route[route.length - 1]} />}\r\n          </MapContainer>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}