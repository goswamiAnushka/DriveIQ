{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Dashboard Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMockMode, setIsMockMode] = useState(true); // Toggle between mock and real GPS data\n  const [batchData, setBatchData] = useState([]);\n\n  // Fetch driver ID on component mount\n  useEffect(() => {\n    const fetchDriverData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching driver data');\n      }\n    };\n    fetchDriverData();\n  }, []);\n\n  // Fetch GPS data every 5 seconds (mock or real based on mode)\n  useEffect(() => {\n    if (driverId) {\n      const interval = setInterval(() => {\n        if (isMockMode) {\n          sendMockGpsData();\n        } else {\n          getRealGpsData();\n        }\n      }, 5000); // Interval of 5 seconds\n      return () => clearInterval(interval); // Cleanup on unmount\n    }\n  }, [driverId, isMockMode]);\n\n  // Generate a batch of mock GPS data points (simulates a trip)\n  const generateMockGpsDataBatch = () => {\n    const now = Date.now();\n    return [{\n      Latitude: 28.7041,\n      Longitude: 77.1025,\n      Time_Step: now\n    },\n    // Point 1\n    {\n      Latitude: 28.7045,\n      Longitude: 77.1035,\n      Time_Step: now + 60000\n    },\n    // 10 m/s\n    {\n      Latitude: 28.7050,\n      Longitude: 77.1045,\n      Time_Step: now + 120000\n    },\n    // 15 m/s\n    {\n      Latitude: 28.7060,\n      Longitude: 77.1055,\n      Time_Step: now + 180000\n    },\n    // 20 m/s\n    {\n      Latitude: 28.7070,\n      Longitude: 77.1065,\n      Time_Step: now + 240000\n    },\n    // 25 m/s\n    {\n      Latitude: 28.7080,\n      Longitude: 77.1075,\n      Time_Step: now + 300000\n    },\n    // 30 m/s\n    {\n      Latitude: 28.7090,\n      Longitude: 77.1085,\n      Time_Step: now + 360000\n    } // 35 m/s\n    ];\n  };\n\n  // Simulate and send a batch of mock GPS data\n  const sendMockGpsData = async () => {\n    const mockGpsDataBatch = generateMockGpsDataBatch();\n    sendGpsDataToBackend(mockGpsDataBatch);\n  };\n\n  // Real-time GPS tracking for mobile\n  const getRealGpsData = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(async position => {\n        const realGpsData = {\n          Latitude: position.coords.latitude,\n          Longitude: position.coords.longitude,\n          Time_Step: Date.now() // Current timestamp\n        };\n        sendGpsDataToBackend([realGpsData]); // Send in array as one batch\n      }, err => setError('Error getting real GPS data: ' + err.message), {\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  // Send GPS data batch to the backend API\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Add batch to existing data for visual display\n      setBatchData(prevBatchData => [...prevBatchData, ...gpsDataBatch]);\n      setRoute(prevRoute => [...prevRoute, ...gpsDataBatch.map(point => [point.Latitude, point.Longitude])]);\n    } catch (err) {\n      setError('Error sending GPS data: ' + err.message);\n    }\n  };\n\n  // Schedule daily data processing at midnight (12:00 AM)\n  useEffect(() => {\n    const midnight = new Date();\n    midnight.setHours(24, 0, 0, 0); // 12 AM\n\n    const delay = midnight.getTime() - Date.now();\n    const timer = setTimeout(() => {\n      processDailyData();\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [driverId]);\n\n  // Call API to process daily data\n  const processDailyData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\n        driver_id: driverId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Daily data processed', response.data);\n    } catch (err) {\n      console.error('Error processing daily data', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [28.7041, 77.1025],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"XfftSuojdsAzFfzyGXDLwE7MP3A=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","axios","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","jsxDEV","_jsxDEV","Dashboard","_s","gpsData","setGpsData","route","setRoute","driverId","setDriverId","error","setError","isMockMode","setIsMockMode","batchData","setBatchData","fetchDriverData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","interval","setInterval","sendMockGpsData","getRealGpsData","clearInterval","generateMockGpsDataBatch","now","Date","Latitude","Longitude","Time_Step","mockGpsDataBatch","sendGpsDataToBackend","navigator","geolocation","watchPosition","position","realGpsData","coords","latitude","longitude","message","enableHighAccuracy","gpsDataBatch","post","gps_data","prevBatchData","prevRoute","map","point","midnight","setHours","delay","getTime","timer","setTimeout","processDailyData","clearTimeout","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Dashboard Component\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMockMode, setIsMockMode] = useState(true); // Toggle between mock and real GPS data\r\n  const [batchData, setBatchData] = useState([]);\r\n\r\n  // Fetch driver ID on component mount\r\n  useEffect(() => {\r\n    const fetchDriverData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching driver data');\r\n      }\r\n    };\r\n    fetchDriverData();\r\n  }, []);\r\n\r\n  // Fetch GPS data every 5 seconds (mock or real based on mode)\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const interval = setInterval(() => {\r\n        if (isMockMode) {\r\n          sendMockGpsData();\r\n        } else {\r\n          getRealGpsData();\r\n        }\r\n      }, 5000); // Interval of 5 seconds\r\n      return () => clearInterval(interval); // Cleanup on unmount\r\n    }\r\n  }, [driverId, isMockMode]);\r\n\r\n  // Generate a batch of mock GPS data points (simulates a trip)\r\n  const generateMockGpsDataBatch = () => {\r\n    const now = Date.now();\r\n    return [\r\n      { Latitude: 28.7041, Longitude: 77.1025, Time_Step: now },  // Point 1\r\n      { Latitude: 28.7045, Longitude: 77.1035, Time_Step: now + 60000 },  // 10 m/s\r\n      { Latitude: 28.7050, Longitude: 77.1045, Time_Step: now + 120000 }, // 15 m/s\r\n      { Latitude: 28.7060, Longitude: 77.1055, Time_Step: now + 180000 }, // 20 m/s\r\n      { Latitude: 28.7070, Longitude: 77.1065, Time_Step: now + 240000 }, // 25 m/s\r\n      { Latitude: 28.7080, Longitude: 77.1075, Time_Step: now + 300000 }, // 30 m/s\r\n      { Latitude: 28.7090, Longitude: 77.1085, Time_Step: now + 360000 }, // 35 m/s\r\n    ];\r\n  };\r\n\r\n  // Simulate and send a batch of mock GPS data\r\n  const sendMockGpsData = async () => {\r\n    const mockGpsDataBatch = generateMockGpsDataBatch();\r\n    sendGpsDataToBackend(mockGpsDataBatch);\r\n  };\r\n\r\n  // Real-time GPS tracking for mobile\r\n  const getRealGpsData = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(\r\n        async (position) => {\r\n          const realGpsData = {\r\n            Latitude: position.coords.latitude,\r\n            Longitude: position.coords.longitude,\r\n            Time_Step: Date.now(), // Current timestamp\r\n          };\r\n          sendGpsDataToBackend([realGpsData]);  // Send in array as one batch\r\n        },\r\n        (err) => setError('Error getting real GPS data: ' + err.message),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  // Send GPS data batch to the backend API\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post('http://localhost:5000/api/record-telematics', {\r\n        driver_id: driverId,\r\n        gps_data: gpsDataBatch\r\n      }, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      // Add batch to existing data for visual display\r\n      setBatchData((prevBatchData) => [...prevBatchData, ...gpsDataBatch]);\r\n      setRoute((prevRoute) => [...prevRoute, ...gpsDataBatch.map((point) => [point.Latitude, point.Longitude])]);\r\n    } catch (err) {\r\n      setError('Error sending GPS data: ' + err.message);\r\n    }\r\n  };\r\n\r\n  // Schedule daily data processing at midnight (12:00 AM)\r\n  useEffect(() => {\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0); // 12 AM\r\n\r\n    const delay = midnight.getTime() - Date.now();\r\n    const timer = setTimeout(() => {\r\n      processDailyData();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [driverId]);\r\n\r\n  // Call API to process daily data\r\n  const processDailyData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\r\n        driver_id: driverId\r\n      }, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      console.log('Daily data processed', response.data);\r\n    } catch (err) {\r\n      console.error('Error processing daily data', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[28.7041, 77.1025]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}