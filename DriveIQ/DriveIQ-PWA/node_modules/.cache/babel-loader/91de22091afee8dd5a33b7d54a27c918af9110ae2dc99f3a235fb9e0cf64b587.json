{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Importing necessary Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  var _performanceData$spee, _performanceData$acce, _performanceData$jerk;\n  const [gpsData, setGpsData] = useState([]); // Store full GPS data for the route\n  const [route, setRoute] = useState([]); // Coordinates for map polyline\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMockMode, setIsMockMode] = useState(true); // Mock GPS for testing\n\n  // Fetch driver data (driver_id) from the backend using JWT token\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Track GPS data in batches: mock for now\n  useEffect(() => {\n    if (driverId) {\n      const interval = setInterval(() => {\n        if (isMockMode) {\n          const mockDataBatch = generateMockBatchData();\n          sendGpsDataToBackend(mockDataBatch);\n        } else {\n          getRealGpsDataBatch(); // Use real GPS in actual scenarios\n        }\n      }, 30000); // Batch every 30 seconds\n\n      return () => clearInterval(interval); // Cleanup interval\n    }\n  }, [driverId, isMockMode]);\n\n  // Generate mock GPS data simulating multiple driving batches in a day\n  const generateMockBatchData = () => {\n    const baseLat = 40.712776; // Starting coordinates (NYC)\n    const baseLon = -74.005974;\n    const distanceIncrement = 0.002; // Increment for each GPS point\n    const timeStepIncrement = 60; // Time step increment per point\n\n    let lastLat = gpsData.length > 0 ? gpsData[gpsData.length - 1].Latitude : baseLat;\n    let lastLon = gpsData.length > 0 ? gpsData[gpsData.length - 1].Longitude : baseLon;\n    const mockBatch = [];\n    for (let i = 0; i < 10; i++) {\n      // Simulate 10 GPS points per batch\n      lastLat += distanceIncrement;\n      lastLon += distanceIncrement;\n      mockBatch.push({\n        Latitude: lastLat,\n        Longitude: lastLon,\n        Time_Step: Date.now() + i * timeStepIncrement * 1000 // Simulate time steps\n      });\n    }\n    return mockBatch;\n  };\n\n  // Fetch real GPS data in batches (only when used in a real mobile app)\n  const getRealGpsDataBatch = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(async position => {\n        const realGpsData = {\n          Latitude: position.coords.latitude,\n          Longitude: position.coords.longitude,\n          Time_Step: Date.now(),\n          // Numeric timestamp in milliseconds\n          speed: position.coords.speed ? position.coords.speed * 3.6 : 0 // Convert to km/h\n        };\n        // Assuming a batch system: send a batch of GPS data to the backend\n        if (realGpsData.speed > 5) {\n          sendGpsDataToBackend([realGpsData]);\n        }\n      }, err => setError('Error getting real GPS data: ' + err.message), {\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  // Send the batch of GPS data to the backend\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Process the GPS data and map it\n      const gps = response.data.gps_data || [];\n      const performance = response.data.performance || {\n        speed: [],\n        acceleration: [],\n        jerk: []\n      };\n\n      // Track the first and last GPS points of each batch for the map route\n      const batchStartLat = gpsDataBatch[0].Latitude;\n      const batchStartLon = gpsDataBatch[0].Longitude;\n      const batchEndLat = gpsDataBatch[gpsDataBatch.length - 1].Latitude;\n      const batchEndLon = gpsDataBatch[gpsDataBatch.length - 1].Longitude;\n      setGpsData([...gpsData, ...gps]); // Update full GPS data\n      setRoute([...route, [batchStartLat, batchStartLon], [batchEndLat, batchEndLon]]); // Add batch route\n\n      // Set performance data for graphs\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      setError('Error sending GPS data');\n    }\n  };\n\n  // Process daily data at midnight by calling the backend\n  const processDailyData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\n        driver_id: driverId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Daily data processed', response.data);\n    } catch (err) {\n      console.error('Error processing daily data', err);\n    }\n  };\n\n  // Schedule process-daily-data call at 12 AM every day\n  useEffect(() => {\n    const midnight = new Date();\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\n\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\n    const timer = setTimeout(() => {\n      processDailyData();\n    }, delay);\n    return () => clearTimeout(timer); // Clean up timer\n  }, [driverId]);\n\n  // Safely handle gpsData and performanceData before using map()\n  const chartData = {\n    labels: (gpsData === null || gpsData === void 0 ? void 0 : gpsData.map((_, index) => `T${index}`)) || [],\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.speed) || [],\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.acceleration) || [],\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: (performanceData === null || performanceData === void 0 ? void 0 : performanceData.jerk) || [],\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [40.712776, -74.005974],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route || [],\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$spee = performanceData.speed) === null || _performanceData$spee === void 0 ? void 0 : _performanceData$spee.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$acce = performanceData.acceleration) === null || _performanceData$acce === void 0 ? void 0 : _performanceData$acce.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData === null || performanceData === void 0 ? void 0 : (_performanceData$jerk = performanceData.jerk) === null || _performanceData$jerk === void 0 ? void 0 : _performanceData$jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", (route === null || route === void 0 ? void 0 : route.length) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"CXWA1VbK16JwkzqkEC+jsZZfzqk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","axios","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","_performanceData$spee","_performanceData$acce","_performanceData$jerk","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","isMockMode","setIsMockMode","fetchData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","interval","setInterval","mockDataBatch","generateMockBatchData","sendGpsDataToBackend","getRealGpsDataBatch","clearInterval","baseLat","baseLon","distanceIncrement","timeStepIncrement","lastLat","length","Latitude","lastLon","Longitude","mockBatch","i","push","Time_Step","Date","now","navigator","geolocation","watchPosition","position","realGpsData","coords","latitude","longitude","message","enableHighAccuracy","gpsDataBatch","post","gps_data","gps","performance","batchStartLat","batchStartLon","batchEndLat","batchEndLon","processDailyData","console","log","midnight","setHours","delay","getTime","timer","setTimeout","clearTimeout","chartData","labels","map","_","index","datasets","label","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","slice","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Importing necessary Chart.js components\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]); // Store full GPS data for the route\r\n  const [route, setRoute] = useState([]);     // Coordinates for map polyline\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMockMode, setIsMockMode] = useState(true);  // Mock GPS for testing\r\n\r\n  // Fetch driver data (driver_id) from the backend using JWT token\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Track GPS data in batches: mock for now\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const interval = setInterval(() => {\r\n        if (isMockMode) {\r\n          const mockDataBatch = generateMockBatchData();\r\n          sendGpsDataToBackend(mockDataBatch);\r\n        } else {\r\n          getRealGpsDataBatch(); // Use real GPS in actual scenarios\r\n        }\r\n      }, 30000); // Batch every 30 seconds\r\n\r\n      return () => clearInterval(interval);  // Cleanup interval\r\n    }\r\n  }, [driverId, isMockMode]);\r\n\r\n  // Generate mock GPS data simulating multiple driving batches in a day\r\n  const generateMockBatchData = () => {\r\n    const baseLat = 40.712776; // Starting coordinates (NYC)\r\n    const baseLon = -74.005974;\r\n    const distanceIncrement = 0.002; // Increment for each GPS point\r\n    const timeStepIncrement = 60; // Time step increment per point\r\n\r\n    let lastLat = gpsData.length > 0 ? gpsData[gpsData.length - 1].Latitude : baseLat;\r\n    let lastLon = gpsData.length > 0 ? gpsData[gpsData.length - 1].Longitude : baseLon;\r\n\r\n    const mockBatch = [];\r\n    for (let i = 0; i < 10; i++) { // Simulate 10 GPS points per batch\r\n      lastLat += distanceIncrement;\r\n      lastLon += distanceIncrement;\r\n      mockBatch.push({\r\n        Latitude: lastLat,\r\n        Longitude: lastLon,\r\n        Time_Step: Date.now() + i * timeStepIncrement * 1000, // Simulate time steps\r\n      });\r\n    }\r\n\r\n    return mockBatch;\r\n  };\r\n\r\n  // Fetch real GPS data in batches (only when used in a real mobile app)\r\n  const getRealGpsDataBatch = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(\r\n        async (position) => {\r\n          const realGpsData = {\r\n            Latitude: position.coords.latitude,\r\n            Longitude: position.coords.longitude,\r\n            Time_Step: Date.now(),  // Numeric timestamp in milliseconds\r\n            speed: position.coords.speed ? position.coords.speed * 3.6 : 0,  // Convert to km/h\r\n          };\r\n          // Assuming a batch system: send a batch of GPS data to the backend\r\n          if (realGpsData.speed > 5) {\r\n            sendGpsDataToBackend([realGpsData]);\r\n          }\r\n        },\r\n        (err) => setError('Error getting real GPS data: ' + err.message),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  // Send the batch of GPS data to the backend\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/record-telematics',\r\n        {\r\n          driver_id: driverId,\r\n          gps_data: gpsDataBatch,\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Process the GPS data and map it\r\n      const gps = response.data.gps_data || [];\r\n      const performance = response.data.performance || { speed: [], acceleration: [], jerk: [] };\r\n\r\n      // Track the first and last GPS points of each batch for the map route\r\n      const batchStartLat = gpsDataBatch[0].Latitude;\r\n      const batchStartLon = gpsDataBatch[0].Longitude;\r\n      const batchEndLat = gpsDataBatch[gpsDataBatch.length - 1].Latitude;\r\n      const batchEndLon = gpsDataBatch[gpsDataBatch.length - 1].Longitude;\r\n\r\n      setGpsData([...gpsData, ...gps]); // Update full GPS data\r\n      setRoute([...route, [batchStartLat, batchStartLon], [batchEndLat, batchEndLon]]); // Add batch route\r\n\r\n      // Set performance data for graphs\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      setError('Error sending GPS data');\r\n    }\r\n  };\r\n\r\n  // Process daily data at midnight by calling the backend\r\n  const processDailyData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/process-daily-data',\r\n        { driver_id: driverId },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      console.log('Daily data processed', response.data);\r\n    } catch (err) {\r\n      console.error('Error processing daily data', err);\r\n    }\r\n  };\r\n\r\n  // Schedule process-daily-data call at 12 AM every day\r\n  useEffect(() => {\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0);  // Set time to 12 AM midnight\r\n\r\n    const delay = midnight.getTime() - Date.now();  // Time until next midnight\r\n    const timer = setTimeout(() => {\r\n      processDailyData();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer);  // Clean up timer\r\n  }, [driverId]);\r\n\r\n  // Safely handle gpsData and performanceData before using map()\r\n  const chartData = {\r\n    labels: gpsData?.map((_, index) => `T${index}`) || [],\r\n    datasets: [\r\n      { label: 'Speed (m/s)', data: performanceData?.speed || [], borderColor: 'rgba(75,192,192,1)' },\r\n      { label: 'Acceleration (m/s²)', data: performanceData?.acceleration || [], borderColor: '#FF6384' },\r\n      { label: 'Jerk (m/s³)', data: performanceData?.jerk || [], borderColor: '#36A2EB' },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[40.712776, -74.005974]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route || []} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData?.speed?.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData?.acceleration?.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData?.jerk?.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route?.length || 0}\r\n        </div>\r\n      </div>\r\n      <DailyScorePopup driverId={driverId} />  {/* Display the Daily Score Popup */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}