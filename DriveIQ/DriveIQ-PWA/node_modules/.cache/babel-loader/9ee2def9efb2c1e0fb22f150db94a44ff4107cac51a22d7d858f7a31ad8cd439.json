{"ast":null,"code":"// src/utils/geolocation.js\nimport api from './api'; // Axios instance\n\n// Helper to send GPS batches to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Helper to calculate time step between two GPS points\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Returns the difference in seconds\n};\n\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\nexport const mockGPSData = async (setGpsData, setFeaturesData, driverId) => {\n  const journey = [\n  // Journey simulation with realistic lat/long\n  {\n    Latitude: 26.6338,\n    Longitude: 92.8006,\n    Time_Step: 1\n  }, {\n    Latitude: 26.6348,\n    Longitude: 92.8016,\n    Time_Step: 60\n  }, {\n    Latitude: 26.6370,\n    Longitude: 92.8050,\n    Time_Step: 120\n  }, {\n    Latitude: 26.6382,\n    Longitude: 92.8074,\n    Time_Step: 180\n  }\n  // More points...\n  ];\n  let batch = [];\n  let lastTimeStep = journey[0].Time_Step;\n  for (let i = 0; i < journey.length; i++) {\n    const point = journey[i];\n    const timeStep = calculateTimeStep(lastTimeStep, point.Time_Step);\n    lastTimeStep = point.Time_Step;\n    const gpsDataPoint = {\n      Latitude: point.Latitude,\n      Longitude: point.Longitude,\n      Time_Step: timeStep\n    };\n    batch.push(gpsDataPoint);\n    setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n\n    // Send batch if we reach 5 points or it's the end of the journey\n    if (batch.length === 5 || i === journey.length - 1) {\n      const batchResponse = await sendGPSBatchToBackend(batch, driverId);\n      setFeaturesData(prevFeatures => [...prevFeatures, batchResponse.features]);\n      batch = []; // Clear the batch after sending\n    }\n  }\n};\n\n// ** 2. Real GPS Tracking: Detect Movement and Batch Data **\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n\n    // Time step between current and last recorded GPS point\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep // Time step in seconds\n    };\n\n    // If there’s significant movement, record and batch the data\n    if (lastPosition) {\n      const distanceMoved = calculateDistance(lastPosition, {\n        latitude,\n        longitude\n      }); // in meters\n\n      if (distanceMoved > 10) {\n        // Only track if more than 10m movement\n        gpsBatch.push(gpsDataPoint);\n        setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n      }\n    } else {\n      // First point, just push to the batch\n      gpsBatch.push(gpsDataPoint);\n    }\n\n    // Send batch every 5 points or at significant stop\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      // Send on stop or batch size\n      sendGPSBatchToBackend(gpsBatch, driverId);\n      gpsBatch.length = 0; // Reset the batch\n    }\n    lastPosition = {\n      latitude,\n      longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Earth's radius in meters\n  const lat1 = point1.latitude * Math.PI / 180;\n  const lat2 = point2.latitude * Math.PI / 180;\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","calculateTimeStep","startTime","endTime","Math","floor","mockGPSData","setGpsData","setFeaturesData","journey","Latitude","Longitude","Time_Step","lastTimeStep","i","length","point","timeStep","gpsDataPoint","push","prevGpsData","batchResponse","prevFeatures","features","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","distanceMoved","calculateDistance","onError","message","options","enableHighAccuracy","timeout","maximumAge","watchPosition","point1","point2","R","lat1","PI","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\nimport api from './api';  // Axios instance\r\n\r\n// Helper to send GPS batches to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token'); // Get JWT token\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Helper to calculate time step between two GPS points\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000); // Returns the difference in seconds\r\n};\r\n\r\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\r\nexport const mockGPSData = async (setGpsData, setFeaturesData, driverId) => {\r\n  const journey = [\r\n    // Journey simulation with realistic lat/long\r\n    { Latitude: 26.6338, Longitude: 92.8006, Time_Step: 1 },\r\n    { Latitude: 26.6348, Longitude: 92.8016, Time_Step: 60 },\r\n    { Latitude: 26.6370, Longitude: 92.8050, Time_Step: 120 },\r\n    { Latitude: 26.6382, Longitude: 92.8074, Time_Step: 180 },\r\n    // More points...\r\n  ];\r\n\r\n  let batch = [];\r\n  let lastTimeStep = journey[0].Time_Step;\r\n\r\n  for (let i = 0; i < journey.length; i++) {\r\n    const point = journey[i];\r\n    const timeStep = calculateTimeStep(lastTimeStep, point.Time_Step);\r\n    lastTimeStep = point.Time_Step;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: point.Latitude,\r\n      Longitude: point.Longitude,\r\n      Time_Step: timeStep,\r\n    };\r\n\r\n    batch.push(gpsDataPoint);\r\n    setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n\r\n    // Send batch if we reach 5 points or it's the end of the journey\r\n    if (batch.length === 5 || i === journey.length - 1) {\r\n      const batchResponse = await sendGPSBatchToBackend(batch, driverId);\r\n      setFeaturesData(prevFeatures => [...prevFeatures, batchResponse.features]);\r\n      batch = []; // Clear the batch after sending\r\n    }\r\n  }\r\n};\r\n\r\n// ** 2. Real GPS Tracking: Detect Movement and Batch Data **\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n    \r\n    // Time step between current and last recorded GPS point\r\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep, // Time step in seconds\r\n    };\r\n\r\n    // If there’s significant movement, record and batch the data\r\n    if (lastPosition) {\r\n      const distanceMoved = calculateDistance(lastPosition, { latitude, longitude }); // in meters\r\n\r\n      if (distanceMoved > 10) { // Only track if more than 10m movement\r\n        gpsBatch.push(gpsDataPoint);\r\n        setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n      }\r\n    } else {\r\n      // First point, just push to the batch\r\n      gpsBatch.push(gpsDataPoint);\r\n    }\r\n\r\n    // Send batch every 5 points or at significant stop\r\n    if (gpsBatch.length >= 5 || timeStep > 300) { // Send on stop or batch size\r\n      sendGPSBatchToBackend(gpsBatch, driverId);\r\n      gpsBatch.length = 0; // Reset the batch\r\n    }\r\n\r\n    lastPosition = { latitude, longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3; // Earth's radius in meters\r\n  const lat1 = point1.latitude * Math.PI / 180;\r\n  const lat2 = point2.latitude * Math.PI / 180;\r\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c; // Returns the distance in meters\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO,CAAC,CAAE;;AAE1B;AACA,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACvD,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,oBAAoB,EAAE;MACpDC,SAAS,EAAEN,QAAQ;MACnBO,QAAQ,EAAER;IACZ,CAAC,EAAE;MACDS,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUR,KAAK;MAChC;IACF,CAAC,CAAC;IACFS,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEP,QAAQ,CAACQ,IAAI,CAAC;EACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAGA,CAACC,SAAS,EAAEC,OAAO,KAAK;EAChD,OAAOC,IAAI,CAACC,KAAK,CAAC,CAACF,OAAO,GAAGD,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;AACnD,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAG,MAAAA,CAAOC,UAAU,EAAEC,eAAe,EAAErB,QAAQ,KAAK;EAC1E,MAAMsB,OAAO,GAAG;EACd;EACA;IAAEC,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAE,CAAC,EACvD;IAAEF,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAG,CAAC,EACxD;IAAEF,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAI,CAAC,EACzD;IAAEF,QAAQ,EAAE,OAAO;IAAEC,SAAS,EAAE,OAAO;IAAEC,SAAS,EAAE;EAAI;EACxD;EAAA,CACD;EAED,IAAI1B,KAAK,GAAG,EAAE;EACd,IAAI2B,YAAY,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACG,SAAS;EAEvC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,MAAME,KAAK,GAAGP,OAAO,CAACK,CAAC,CAAC;IACxB,MAAMG,QAAQ,GAAGhB,iBAAiB,CAACY,YAAY,EAAEG,KAAK,CAACJ,SAAS,CAAC;IACjEC,YAAY,GAAGG,KAAK,CAACJ,SAAS;IAE9B,MAAMM,YAAY,GAAG;MACnBR,QAAQ,EAAEM,KAAK,CAACN,QAAQ;MACxBC,SAAS,EAAEK,KAAK,CAACL,SAAS;MAC1BC,SAAS,EAAEK;IACb,CAAC;IAED/B,KAAK,CAACiC,IAAI,CAACD,YAAY,CAAC;IACxBX,UAAU,CAAEa,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEF,YAAY,CAAC,CAAC;;IAE3D;IACA,IAAIhC,KAAK,CAAC6B,MAAM,KAAK,CAAC,IAAID,CAAC,KAAKL,OAAO,CAACM,MAAM,GAAG,CAAC,EAAE;MAClD,MAAMM,aAAa,GAAG,MAAMpC,qBAAqB,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAClEqB,eAAe,CAACc,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,aAAa,CAACE,QAAQ,CAAC,CAAC;MAC1ErC,KAAK,GAAG,EAAE,CAAC,CAAC;IACd;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMsC,gBAAgB,GAAGA,CAACjB,UAAU,EAAEpB,QAAQ,KAAK;EACxD,IAAI,CAACsC,SAAS,CAACC,WAAW,EAAE;IAC1B7B,OAAO,CAACG,KAAK,CAAC,8CAA8C,CAAC;IAC7D;EACF;EAEA,MAAM2B,QAAQ,GAAG,EAAE;EACnB,IAAIC,YAAY,GAAG,IAAI;EACvB,IAAI1B,SAAS,GAAG2B,IAAI,CAACC,GAAG,CAAC,CAAC;EAE1B,MAAMC,SAAS,GAAIC,QAAQ,IAAK;IAC9B,MAAM;MAAEC,QAAQ;MAAEC;IAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;IAC/C,MAAMC,SAAS,GAAGP,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE5B;IACA,MAAMb,QAAQ,GAAGW,YAAY,GAAG3B,iBAAiB,CAACC,SAAS,EAAEkC,SAAS,CAAC,GAAG,CAAC;IAC3ElC,SAAS,GAAGkC,SAAS;IAErB,MAAMlB,YAAY,GAAG;MACnBR,QAAQ,EAAEuB,QAAQ;MAClBtB,SAAS,EAAEuB,SAAS;MACpBtB,SAAS,EAAEK,QAAQ,CAAE;IACvB,CAAC;;IAED;IACA,IAAIW,YAAY,EAAE;MAChB,MAAMS,aAAa,GAAGC,iBAAiB,CAACV,YAAY,EAAE;QAAEK,QAAQ;QAAEC;MAAU,CAAC,CAAC,CAAC,CAAC;;MAEhF,IAAIG,aAAa,GAAG,EAAE,EAAE;QAAE;QACxBV,QAAQ,CAACR,IAAI,CAACD,YAAY,CAAC;QAC3BX,UAAU,CAAEa,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEF,YAAY,CAAC,CAAC;MAC7D;IACF,CAAC,MAAM;MACL;MACAS,QAAQ,CAACR,IAAI,CAACD,YAAY,CAAC;IAC7B;;IAEA;IACA,IAAIS,QAAQ,CAACZ,MAAM,IAAI,CAAC,IAAIE,QAAQ,GAAG,GAAG,EAAE;MAAE;MAC5ChC,qBAAqB,CAAC0C,QAAQ,EAAExC,QAAQ,CAAC;MACzCwC,QAAQ,CAACZ,MAAM,GAAG,CAAC,CAAC,CAAC;IACvB;IAEAa,YAAY,GAAG;MAAEK,QAAQ;MAAEC;IAAU,CAAC;EACxC,CAAC;EAED,MAAMK,OAAO,GAAIvC,KAAK,IAAK;IACzBH,OAAO,CAACG,KAAK,CAAC,+BAA+BA,KAAK,CAACwC,OAAO,EAAE,CAAC;EAC/D,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,kBAAkB,EAAE,IAAI;IACxBC,OAAO,EAAE,IAAI;IACbC,UAAU,EAAE;EACd,CAAC;EAEDnB,SAAS,CAACC,WAAW,CAACmB,aAAa,CAACd,SAAS,EAAEQ,OAAO,EAAEE,OAAO,CAAC;AAClE,CAAC;;AAED;AACA,MAAMH,iBAAiB,GAAGA,CAACQ,MAAM,EAAEC,MAAM,KAAK;EAC5C,MAAMC,CAAC,GAAG,MAAM,CAAC,CAAC;EAClB,MAAMC,IAAI,GAAGH,MAAM,CAACb,QAAQ,GAAG7B,IAAI,CAAC8C,EAAE,GAAG,GAAG;EAC5C,MAAMC,IAAI,GAAGJ,MAAM,CAACd,QAAQ,GAAG7B,IAAI,CAAC8C,EAAE,GAAG,GAAG;EAC5C,MAAME,QAAQ,GAAG,CAACL,MAAM,CAACd,QAAQ,GAAGa,MAAM,CAACb,QAAQ,IAAI7B,IAAI,CAAC8C,EAAE,GAAG,GAAG;EACpE,MAAMG,QAAQ,GAAG,CAACN,MAAM,CAACb,SAAS,GAAGY,MAAM,CAACZ,SAAS,IAAI9B,IAAI,CAAC8C,EAAE,GAAG,GAAG;EAEtE,MAAMI,CAAC,GAAGlD,IAAI,CAACmD,GAAG,CAACH,QAAQ,GAAG,CAAC,CAAC,GAAGhD,IAAI,CAACmD,GAAG,CAACH,QAAQ,GAAG,CAAC,CAAC,GAC/ChD,IAAI,CAACoD,GAAG,CAACP,IAAI,CAAC,GAAG7C,IAAI,CAACoD,GAAG,CAACL,IAAI,CAAC,GAC/B/C,IAAI,CAACmD,GAAG,CAACF,QAAQ,GAAG,CAAC,CAAC,GAAGjD,IAAI,CAACmD,GAAG,CAACF,QAAQ,GAAG,CAAC,CAAC;EACzD,MAAMI,CAAC,GAAG,CAAC,GAAGrD,IAAI,CAACsD,KAAK,CAACtD,IAAI,CAACuD,IAAI,CAACL,CAAC,CAAC,EAAElD,IAAI,CAACuD,IAAI,CAAC,CAAC,GAAGL,CAAC,CAAC,CAAC;EACxD,OAAON,CAAC,GAAGS,CAAC,CAAC,CAAC;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}