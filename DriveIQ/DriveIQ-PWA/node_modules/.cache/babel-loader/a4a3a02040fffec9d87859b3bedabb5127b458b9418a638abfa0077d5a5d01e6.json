{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet'; // Import Leaflet components\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport L from 'leaflet'; // Leaflet for custom marker icons\nimport api from '../../utils/api';\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\nimport './Dashboard.scss';\n\n// Register Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, Title, Tooltip, Legend);\n\n// Define custom marker icon\nconst customIcon = new L.Icon({\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34]\n});\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [speedData, setSpeedData] = useState([]); // Speed data for tracking\n  const [accelerationData, setAccelerationData] = useState([]); // Acceleration data for tracking\n  const [jerkData, setJerkData] = useState([]); // Jerk data for tracking\n  const [brakingData, setBrakingData] = useState([]); // Braking data for tracking\n  const [route, setRoute] = useState([]); // Route lines for the map\n  const [markers, setMarkers] = useState([]); // Markers for the map\n  const [isTracking, setIsTracking] = useState(false);\n  const [dailyData, setDailyData] = useState(null); // Daily data from process-daily-data API\n  const [error, setError] = useState(null);\n\n  // Automatically call processDailyData API at midnight\n  useEffect(() => {\n    const now = new Date();\n    const millisUntilMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0) - now;\n    setTimeout(() => {\n      processDailyData(); // Call API at midnight\n      setInterval(processDailyData, 24 * 60 * 60 * 1000); // Repeat every 24 hours\n    }, millisUntilMidnight);\n  }, []);\n\n  // Function to manually call processDailyData API\n  const processDailyData = async () => {\n    try {\n      const driver_id = localStorage.getItem('driver_id');\n      if (!driver_id) {\n        console.error('Driver ID is missing in localStorage');\n        setError('Driver ID is missing.');\n        return;\n      }\n      console.log(\"Calling process-daily-data API with driver_id:\", driver_id);\n      const response = await api.post('/process-daily-data', {\n        driver_id\n      });\n      if (response && response.data) {\n        console.log('Daily data fetched successfully:', response.data);\n        setDailyData(response.data); // Set the state with fetched data\n      } else {\n        console.error('No data received from the API');\n        setError('No data received from the API');\n      }\n    } catch (error) {\n      console.error('Error fetching daily data:', error.response || error.message);\n      if (error.response) {\n        setError(`Error: ${error.response.data.error || 'Failed to process daily data'}`);\n      } else {\n        setError('Network error. Please try again.');\n      }\n    }\n  };\n\n  // Function to start GPS tracking simulation\n  const toggleTracking = () => {\n    if (isTracking) {\n      setIsTracking(false);\n    } else {\n      setIsTracking(true);\n      startTracking();\n    }\n  };\n  const startTracking = () => {\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches\n    simulatedBatches.forEach((batch, index) => {\n      setTimeout(() => processBatch(batch), index * 5000); // Process each batch after 5 seconds\n    });\n  };\n  const processBatch = async batch => {\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\n    if (isMoving) {\n      try {\n        const driver_id = localStorage.getItem('driver_id');\n        const response = await api.post('/record-telematics', {\n          driver_id,\n          gps_data: batch.gps_data // Send GPS data for processing\n        });\n        console.log('Telematics Response:', response.data);\n        const features = response.data.features;\n        if (features) {\n          var _features$SpeedMS, _features$Acceleratio, _features$JerkMS, _features$Braking_Int;\n          const speed = (_features$SpeedMS = features['Speed(m/s)']) !== null && _features$SpeedMS !== void 0 ? _features$SpeedMS : 0;\n          const acceleration = (_features$Acceleratio = features['Acceleration(m/s^2)']) !== null && _features$Acceleratio !== void 0 ? _features$Acceleratio : 0;\n          const jerk = (_features$JerkMS = features['Jerk(m/s^3)']) !== null && _features$JerkMS !== void 0 ? _features$JerkMS : 0;\n          const brakingIntensity = (_features$Braking_Int = features['Braking_Intensity']) !== null && _features$Braking_Int !== void 0 ? _features$Braking_Int : 0;\n\n          // Update data for each chart\n          setSpeedData(prevData => [...prevData, speed]);\n          setAccelerationData(prevData => [...prevData, acceleration]);\n          setJerkData(prevData => [...prevData, jerk]);\n          setBrakingData(prevData => [...prevData, brakingIntensity]);\n\n          // Update GPS data and route points\n          setGpsData(prevData => [...prevData, ...batch.gps_data]);\n\n          // Add only the last point of each batch as a marker\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\n          setMarkers(prevMarkers => [...prevMarkers, {\n            lat: lastPoint.Latitude,\n            lng: lastPoint.Longitude\n          }]);\n          setRoute(prevRoute => [...prevRoute, ...batch.gps_data.map(point => [point.Latitude, point.Longitude])]);\n        } else {\n          console.error('Error: Features object is undefined or missing keys');\n        }\n      } catch (error) {\n        console.error('Error recording telematics data:', error);\n        setError('Error processing GPS data. Please try again.');\n      }\n    }\n  };\n\n  // Render combined distribution graph for daily data\n  const renderCombinedChart = () => {\n    if (!dailyData) return null;\n    const data = {\n      labels: ['Daily Metrics'],\n      datasets: [{\n        label: 'Speed (m/s)',\n        data: [dailyData.aggregated_data['Speed(m/s)']],\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Acceleration (m/s²)',\n        data: [dailyData.aggregated_data['Acceleration(m/s^2)']],\n        backgroundColor: 'rgba(255, 99, 132, 0.6)',\n        borderColor: 'rgba(255, 99, 132, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Braking Intensity',\n        data: [dailyData.aggregated_data['Braking_Intensity']],\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\n        borderColor: 'rgba(153, 102, 255, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Jerk (m/s³)',\n        data: [dailyData.aggregated_data['Jerk(m/s^3)']],\n        backgroundColor: 'rgba(54, 162, 235, 0.6)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1\n      }, {\n        label: 'Heading Change (°)',\n        data: [dailyData.aggregated_data['Heading_Change(degrees)']],\n        backgroundColor: 'rgba(255, 159, 64, 0.6)',\n        borderColor: 'rgba(255, 159, 64, 1)',\n        borderWidth: 1\n      }]\n    };\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Daily Driving Metrics Distribution'\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Render chart for telematics data (tracking charts)\n  const renderTrackingChart = (label, data, borderColor) => {\n    const chartLabels = data.map((_, index) => `Batch ${index + 1}`);\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: chartLabels,\n        datasets: [{\n          label: label,\n          data: data,\n          borderColor: borderColor,\n          fill: false\n        }]\n      },\n      options: {\n        elements: {\n          line: {\n            tension: 0.4 // Smoother lines for graph\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true // Start Y axis at zero for clearer data\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracking-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTracking,\n        children: isTracking ? 'Stop Tracking' : 'Start Tracking'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: processDailyData,\n        children: \"Process Daily Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }, this), dailyData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daily-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Daily Performance Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Distance Covered: \", dailyData !== null && dailyData !== void 0 && dailyData.total_distance_covered_km ? dailyData.total_distance_covered_km.toFixed(2) : 'N/A', \" km\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Trips: \", dailyData.total_trips]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Driving Score: \", dailyData.driving_score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Driving Category: \", dailyData.driving_category]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: renderCombinedChart()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Route Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [26.6337, 92.7926],\n        zoom: 13,\n        scrollWheelZoom: false,\n        className: \"map-container\",\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 OpenStreetMap contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: route,\n          color: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), markers.map((marker, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [marker.lat, marker.lng],\n          icon: customIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [\"Latitude: \", marker.lat, \", Longitude: \", marker.lng]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Driving Feature Fluctuations (Tracking)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [renderTrackingChart('Speed (m/s)', speedData, 'rgba(75, 192, 192, 1)'), renderTrackingChart('Acceleration (m/s²)', accelerationData, 'rgba(255, 99, 132, 1)'), renderTrackingChart('Jerk (m/s³)', jerkData, 'rgba(54, 162, 235, 1)'), renderTrackingChart('Braking Intensity', brakingData, 'rgba(153, 102, 255, 1)')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BatchProcessing, {\n      gpsData: gpsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"khASHI8B4Q1zQuc6iNyleHXGVMc=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","Bar","MapContainer","TileLayer","Marker","Popup","Polyline","L","api","smartGpsTracking","generateSimulatedRoute","BatchProcessing","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","jsxDEV","_jsxDEV","register","customIcon","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","Dashboard","_s","gpsData","setGpsData","speedData","setSpeedData","accelerationData","setAccelerationData","jerkData","setJerkData","brakingData","setBrakingData","route","setRoute","markers","setMarkers","isTracking","setIsTracking","dailyData","setDailyData","error","setError","now","Date","millisUntilMidnight","getFullYear","getMonth","getDate","setTimeout","processDailyData","setInterval","driver_id","localStorage","getItem","console","log","response","post","data","message","toggleTracking","startTracking","simulatedBatches","forEach","batch","index","processBatch","isMoving","gps_data","features","_features$SpeedMS","_features$Acceleratio","_features$JerkMS","_features$Braking_Int","speed","acceleration","jerk","brakingIntensity","prevData","lastPoint","length","prevMarkers","lat","Latitude","lng","Longitude","prevRoute","map","point","renderCombinedChart","labels","datasets","label","aggregated_data","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","fileName","_jsxFileName","lineNumber","columnNumber","renderTrackingChart","chartLabels","_","fill","elements","line","tension","className","children","onClick","style","color","total_distance_covered_km","toFixed","total_trips","driving_score","driving_category","center","zoom","scrollWheelZoom","url","attribution","positions","marker","idx","icon","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet'; // Import Leaflet components\r\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\r\nimport L from 'leaflet'; // Leaflet for custom marker icons\r\nimport api from '../../utils/api';\r\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\r\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\r\nimport './Dashboard.scss';\r\n\r\n// Register Chart.js components\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from 'chart.js';\r\nChartJS.register(CategoryScale, LinearScale, BarElement, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n// Define custom marker icon\r\nconst customIcon = new L.Icon({\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n});\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [speedData, setSpeedData] = useState([]); // Speed data for tracking\r\n  const [accelerationData, setAccelerationData] = useState([]); // Acceleration data for tracking\r\n  const [jerkData, setJerkData] = useState([]); // Jerk data for tracking\r\n  const [brakingData, setBrakingData] = useState([]); // Braking data for tracking\r\n  const [route, setRoute] = useState([]); // Route lines for the map\r\n  const [markers, setMarkers] = useState([]); // Markers for the map\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [dailyData, setDailyData] = useState(null); // Daily data from process-daily-data API\r\n  const [error, setError] = useState(null);\r\n\r\n  // Automatically call processDailyData API at midnight\r\n  useEffect(() => {\r\n    const now = new Date();\r\n    const millisUntilMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0) - now;\r\n    setTimeout(() => {\r\n      processDailyData(); // Call API at midnight\r\n      setInterval(processDailyData, 24 * 60 * 60 * 1000); // Repeat every 24 hours\r\n    }, millisUntilMidnight);\r\n  }, []);\r\n\r\n  // Function to manually call processDailyData API\r\n  const processDailyData = async () => {\r\n    try {\r\n      const driver_id = localStorage.getItem('driver_id');\r\n\r\n      if (!driver_id) {\r\n        console.error('Driver ID is missing in localStorage');\r\n        setError('Driver ID is missing.');\r\n        return;\r\n      }\r\n\r\n      console.log(\"Calling process-daily-data API with driver_id:\", driver_id);\r\n\r\n      const response = await api.post('/process-daily-data', { driver_id });\r\n\r\n      if (response && response.data) {\r\n        console.log('Daily data fetched successfully:', response.data);\r\n        setDailyData(response.data); // Set the state with fetched data\r\n      } else {\r\n        console.error('No data received from the API');\r\n        setError('No data received from the API');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching daily data:', error.response || error.message);\r\n\r\n      if (error.response) {\r\n        setError(`Error: ${error.response.data.error || 'Failed to process daily data'}`);\r\n      } else {\r\n        setError('Network error. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Function to start GPS tracking simulation\r\n  const toggleTracking = () => {\r\n    if (isTracking) {\r\n      setIsTracking(false);\r\n    } else {\r\n      setIsTracking(true);\r\n      startTracking();\r\n    }\r\n  };\r\n\r\n  const startTracking = () => {\r\n    const simulatedBatches = generateSimulatedRoute(1, 5); // Generate 5 GPS batches\r\n    simulatedBatches.forEach((batch, index) => {\r\n      setTimeout(() => processBatch(batch), index * 5000); // Process each batch after 5 seconds\r\n    });\r\n  };\r\n\r\n  const processBatch = async (batch) => {\r\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\r\n    if (isMoving) {\r\n      try {\r\n        const driver_id = localStorage.getItem('driver_id');\r\n        const response = await api.post('/record-telematics', {\r\n          driver_id,\r\n          gps_data: batch.gps_data, // Send GPS data for processing\r\n        });\r\n\r\n        console.log('Telematics Response:', response.data);\r\n\r\n        const features = response.data.features;\r\n\r\n        if (features) {\r\n          const speed = features['Speed(m/s)'] ?? 0;\r\n          const acceleration = features['Acceleration(m/s^2)'] ?? 0;\r\n          const jerk = features['Jerk(m/s^3)'] ?? 0;\r\n          const brakingIntensity = features['Braking_Intensity'] ?? 0;\r\n\r\n          // Update data for each chart\r\n          setSpeedData((prevData) => [...prevData, speed]);\r\n          setAccelerationData((prevData) => [...prevData, acceleration]);\r\n          setJerkData((prevData) => [...prevData, jerk]);\r\n          setBrakingData((prevData) => [...prevData, brakingIntensity]);\r\n\r\n          // Update GPS data and route points\r\n          setGpsData((prevData) => [...prevData, ...batch.gps_data]);\r\n\r\n          // Add only the last point of each batch as a marker\r\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\r\n          setMarkers((prevMarkers) => [\r\n            ...prevMarkers,\r\n            { lat: lastPoint.Latitude, lng: lastPoint.Longitude },\r\n          ]);\r\n\r\n          setRoute((prevRoute) => [\r\n            ...prevRoute,\r\n            ...batch.gps_data.map((point) => [point.Latitude, point.Longitude]),\r\n          ]);\r\n        } else {\r\n          console.error('Error: Features object is undefined or missing keys');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error recording telematics data:', error);\r\n        setError('Error processing GPS data. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Render combined distribution graph for daily data\r\n  const renderCombinedChart = () => {\r\n    if (!dailyData) return null;\r\n\r\n    const data = {\r\n      labels: ['Daily Metrics'],\r\n      datasets: [\r\n        {\r\n          label: 'Speed (m/s)',\r\n          data: [dailyData.aggregated_data['Speed(m/s)']],\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1,\r\n        },\r\n        {\r\n          label: 'Acceleration (m/s²)',\r\n          data: [dailyData.aggregated_data['Acceleration(m/s^2)']],\r\n          backgroundColor: 'rgba(255, 99, 132, 0.6)',\r\n          borderColor: 'rgba(255, 99, 132, 1)',\r\n          borderWidth: 1,\r\n        },\r\n        {\r\n          label: 'Braking Intensity',\r\n          data: [dailyData.aggregated_data['Braking_Intensity']],\r\n          backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n          borderColor: 'rgba(153, 102, 255, 1)',\r\n          borderWidth: 1,\r\n        },\r\n        {\r\n          label: 'Jerk (m/s³)',\r\n          data: [dailyData.aggregated_data['Jerk(m/s^3)']],\r\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\r\n          borderColor: 'rgba(54, 162, 235, 1)',\r\n          borderWidth: 1,\r\n        },\r\n        {\r\n          label: 'Heading Change (°)',\r\n          data: [dailyData.aggregated_data['Heading_Change(degrees)']],\r\n          backgroundColor: 'rgba(255, 159, 64, 0.6)',\r\n          borderColor: 'rgba(255, 159, 64, 1)',\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          position: 'top',\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: 'Daily Driving Metrics Distribution',\r\n        },\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    return <Bar data={data} options={options} />;\r\n  };\r\n\r\n  // Render chart for telematics data (tracking charts)\r\n  const renderTrackingChart = (label, data, borderColor) => {\r\n    const chartLabels = data.map((_, index) => `Batch ${index + 1}`);\r\n    return (\r\n      <Line\r\n        data={{\r\n          labels: chartLabels,\r\n          datasets: [\r\n            {\r\n              label: label,\r\n              data: data,\r\n              borderColor: borderColor,\r\n              fill: false,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          elements: {\r\n            line: {\r\n              tension: 0.4, // Smoother lines for graph\r\n            },\r\n          },\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true, // Start Y axis at zero for clearer data\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      <div className=\"tracking-controls\">\r\n        <button onClick={toggleTracking}>\r\n          {isTracking ? 'Stop Tracking' : 'Start Tracking'}\r\n        </button>\r\n        <button onClick={processDailyData}>Process Daily Data</button>\r\n      </div>\r\n\r\n      {/* Error Message Section */}\r\n      {error && <div className=\"error-message\" style={{ color: 'red' }}>{error}</div>}\r\n\r\n      {/* Daily Data Section */}\r\n      {dailyData && (\r\n        <div className=\"daily-summary\">\r\n          <h3>Daily Performance Summary</h3>\r\n          <p>Total Distance Covered: {dailyData?.total_distance_covered_km ? dailyData.total_distance_covered_km.toFixed(2) : 'N/A'} km</p>\r\n          <p>Total Trips: {dailyData.total_trips}</p>\r\n          <p>Driving Score: {dailyData.driving_score}</p>\r\n          <p>Driving Category: {dailyData.driving_category}</p>\r\n\r\n          <div className=\"chart-container\">\r\n            {/* Render combined chart */}\r\n            {renderCombinedChart()}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Map Section */}\r\n      <div className=\"map-section\">\r\n        <h3>Route Map</h3>\r\n        <MapContainer center={[26.6337, 92.7926]} zoom={13} scrollWheelZoom={false} className=\"map-container\">\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution=\"&copy; OpenStreetMap contributors\"\r\n          />\r\n          {/* Display the polyline for the route */}\r\n          <Polyline positions={route} color=\"blue\" />\r\n\r\n          {/* Add only the last marker of each batch */}\r\n          {markers.map((marker, idx) => (\r\n            <Marker key={idx} position={[marker.lat, marker.lng]} icon={customIcon}>\r\n              <Popup>\r\n                Latitude: {marker.lat}, Longitude: {marker.lng}\r\n              </Popup>\r\n            </Marker>\r\n          ))}\r\n        </MapContainer>\r\n      </div>\r\n\r\n      {/* Tracking Data Charts */}\r\n      <div className=\"chart-section\">\r\n        <h3>Driving Feature Fluctuations (Tracking)</h3>\r\n        <div className=\"chart-container\">\r\n          {/* Speed Chart */}\r\n          {renderTrackingChart('Speed (m/s)', speedData, 'rgba(75, 192, 192, 1)')}\r\n\r\n          {/* Acceleration Chart */}\r\n          {renderTrackingChart('Acceleration (m/s²)', accelerationData, 'rgba(255, 99, 132, 1)')}\r\n\r\n          {/* Jerk Chart */}\r\n          {renderTrackingChart('Jerk (m/s³)', jerkData, 'rgba(54, 162, 235, 1)')}\r\n\r\n          {/* Braking Intensity Chart */}\r\n          {renderTrackingChart('Braking Intensity', brakingData, 'rgba(153, 102, 255, 1)')}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Batch Processing Section */}\r\n      <BatchProcessing gpsData={gpsData} /> {/* Pass the GPS data to BatchProcessing */}\r\n\r\n      {/* Error Message */}\r\n      {error && <div className=\"error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}