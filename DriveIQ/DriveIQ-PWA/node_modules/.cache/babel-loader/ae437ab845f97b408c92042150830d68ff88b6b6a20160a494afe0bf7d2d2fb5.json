{"ast":null,"code":"// src/utils/geolocation.js\n\n// Simulates gradual acceleration for GPS data with better speed increase\nexport const generateSimulatedRoute = (driverId, batchSize) => {\n  const gpsBatches = [];\n  let lat = 26.6337;\n  let lon = 92.7926;\n  let timeStep = 0;\n  let speed = 0; // Initial speed (m/s)\n  const maxSpeed = 13.88; // 50 km/h in m/s\n  const minSpeed = 8.33; // Minimum speed 30 km/h in m/s to ensure the vehicle starts faster\n\n  for (let i = 0; i < batchSize; i++) {\n    const batch = [];\n    for (let j = 0; j < 10; j++) {\n      lat += Math.random() * 0.001; // Simulated random movement\n      lon += Math.random() * 0.001;\n      timeStep += 60;\n\n      // Simulate gradual acceleration with a minimum speed\n      if (speed < maxSpeed) {\n        speed += Math.random() * 2; // Accelerate more significantly each time (m/s^2)\n        speed = Math.max(speed, minSpeed); // Ensure minimum speed is maintained\n      } else {\n        speed = maxSpeed; // Cap speed to maximum\n      }\n      batch.push({\n        Latitude: lat,\n        Longitude: lon,\n        Time_Step: timeStep,\n        Speed: speed * 3.6 // Convert speed to km/h for backend compatibility\n      });\n    }\n    gpsBatches.push({\n      driver_id: driverId,\n      gps_data: batch\n    });\n  }\n  return gpsBatches;\n};\n\n// Smart logic for detecting vehicle movement or idle time\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3; // Earth radius in meters\n    const toRad = deg => deg * Math.PI / 180;\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in meters\n  };\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\n  if (previousBatch.length > 0) {\n    const lastPoint = previousBatch[previousBatch.length - 1];\n    const firstPoint = currentBatch[0];\n    const distance = calculateDistance(lastPoint.Latitude, lastPoint.Longitude, firstPoint.Latitude, firstPoint.Longitude);\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\n      console.log('Vehicle idle detected');\n      return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["generateSimulatedRoute","driverId","batchSize","gpsBatches","lat","lon","timeStep","speed","maxSpeed","minSpeed","i","batch","j","Math","random","max","push","Latitude","Longitude","Time_Step","Speed","driver_id","gps_data","smartGpsTracking","currentBatch","previousBatch","SPEED_THRESHOLD","calculateDistance","lat1","lon1","lat2","lon2","R","toRad","deg","PI","dLat","dLon","a","sin","cos","c","atan2","sqrt","calculateSpeed","distance","timeDiff","length","lastPoint","firstPoint","console","log"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\n\r\n// Simulates gradual acceleration for GPS data with better speed increase\r\nexport const generateSimulatedRoute = (driverId, batchSize) => {\r\n  const gpsBatches = [];\r\n  let lat = 26.6337;\r\n  let lon = 92.7926;\r\n  let timeStep = 0;\r\n  let speed = 0; // Initial speed (m/s)\r\n  const maxSpeed = 13.88; // 50 km/h in m/s\r\n  const minSpeed = 8.33; // Minimum speed 30 km/h in m/s to ensure the vehicle starts faster\r\n\r\n  for (let i = 0; i < batchSize; i++) {\r\n    const batch = [];\r\n    for (let j = 0; j < 10; j++) {\r\n      lat += Math.random() * 0.001; // Simulated random movement\r\n      lon += Math.random() * 0.001;\r\n      timeStep += 60;\r\n\r\n      // Simulate gradual acceleration with a minimum speed\r\n      if (speed < maxSpeed) {\r\n        speed += Math.random() * 2; // Accelerate more significantly each time (m/s^2)\r\n        speed = Math.max(speed, minSpeed); // Ensure minimum speed is maintained\r\n      } else {\r\n        speed = maxSpeed; // Cap speed to maximum\r\n      }\r\n\r\n      batch.push({\r\n        Latitude: lat,\r\n        Longitude: lon,\r\n        Time_Step: timeStep,\r\n        Speed: speed * 3.6 // Convert speed to km/h for backend compatibility\r\n      });\r\n    }\r\n    gpsBatches.push({ driver_id: driverId, gps_data: batch });\r\n  }\r\n\r\n  return gpsBatches;\r\n};\r\n\r\n// Smart logic for detecting vehicle movement or idle time\r\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\r\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\r\n\r\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371e3; // Earth radius in meters\r\n    const toRad = (deg) => (deg * Math.PI) / 180;\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in meters\r\n  };\r\n\r\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\r\n\r\n  if (previousBatch.length > 0) {\r\n    const lastPoint = previousBatch[previousBatch.length - 1];\r\n    const firstPoint = currentBatch[0];\r\n    const distance = calculateDistance(\r\n      lastPoint.Latitude,\r\n      lastPoint.Longitude,\r\n      firstPoint.Latitude,\r\n      firstPoint.Longitude\r\n    );\r\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\r\n\r\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\r\n      console.log('Vehicle idle detected');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}