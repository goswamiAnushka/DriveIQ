{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\MapView\\\\MapView.jsx\";\n// src/components/MapView/MapView.jsx\nimport React from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport './MapView.scss';\n\n// Custom icon for markers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customIcon = new L.Icon({\n  iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png',\n  // Example marker icon URL\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\nconst MapView = ({\n  gpsData\n}) => {\n  const initialCoords = [26.6338, 92.8006]; // Default coordinates (Tezpur)\n\n  // Create the route for polyline and ensure gpsData is valid\n  const route = gpsData.filter(point => point.Latitude && point.Longitude) // Ensure valid lat/lng\n  .map(point => [point.Latitude, point.Longitude]);\n  const startPoint = route[0]; // First point\n  const endPoint = route[route.length - 1]; // Last point\n\n  // Handle cases where there's no data or only one point\n  if (!startPoint || !endPoint || route.length < 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-view\",\n      children: \"No route data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-view\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: startPoint,\n      zoom: 14,\n      className: \"map\",\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 30\n      }, this), \"  \", startPoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: startPoint,\n        icon: customIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 24\n      }, this), \"  \", endPoint && /*#__PURE__*/_jsxDEV(Marker, {\n        position: endPoint,\n        icon: customIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 22\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Polyline","Marker","L","jsxDEV","_jsxDEV","customIcon","Icon","iconUrl","iconSize","iconAnchor","MapView","gpsData","initialCoords","route","filter","point","Latitude","Longitude","map","startPoint","endPoint","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","position","icon","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/MapView/MapView.jsx"],"sourcesContent":["// src/components/MapView/MapView.jsx\r\nimport React from 'react';\r\nimport { MapContainer, TileLayer, Polyline, Marker } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport './MapView.scss';\r\n\r\n// Custom icon for markers\r\nconst customIcon = new L.Icon({\r\n  iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png', // Example marker icon URL\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n});\r\n\r\nconst MapView = ({ gpsData }) => {\r\n  const initialCoords = [26.6338, 92.8006];  // Default coordinates (Tezpur)\r\n\r\n  // Create the route for polyline and ensure gpsData is valid\r\n  const route = gpsData\r\n    .filter(point => point.Latitude && point.Longitude) // Ensure valid lat/lng\r\n    .map(point => [point.Latitude, point.Longitude]);\r\n\r\n  const startPoint = route[0];  // First point\r\n  const endPoint = route[route.length - 1];  // Last point\r\n\r\n  // Handle cases where there's no data or only one point\r\n  if (!startPoint || !endPoint || route.length < 2) {\r\n    return <div className=\"map-view\">No route data available</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"map-view\">\r\n      <MapContainer center={startPoint} zoom={14} className=\"map\">\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        {route.length > 0 && <Polyline positions={route} color=\"blue\" />}  {/* Draw route */}\r\n        {startPoint && <Marker position={startPoint} icon={customIcon} />}  {/* Start point */}\r\n        {endPoint && <Marker position={endPoint} icon={customIcon} />}  {/* End point */}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,eAAe;AACzE,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,gBAAgB;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,IAAIH,CAAC,CAACI,IAAI,CAAC;EAC5BC,OAAO,EAAE,4DAA4D;EAAE;EACvEC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;AACrB,CAAC,CAAC;AAEF,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAC/B,MAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAE;;EAE3C;EACA,MAAMC,KAAK,GAAGF,OAAO,CAClBG,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACE,SAAS,CAAC,CAAC;EAAA,CACnDC,GAAG,CAACH,KAAK,IAAI,CAACA,KAAK,CAACC,QAAQ,EAAED,KAAK,CAACE,SAAS,CAAC,CAAC;EAElD,MAAME,UAAU,GAAGN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;EAC9B,MAAMO,QAAQ,GAAGP,KAAK,CAACA,KAAK,CAACQ,MAAM,GAAG,CAAC,CAAC,CAAC,CAAE;;EAE3C;EACA,IAAI,CAACF,UAAU,IAAI,CAACC,QAAQ,IAAIP,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;IAChD,oBAAOjB,OAAA;MAAKkB,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChE;EAEA,oBACEvB,OAAA;IAAKkB,SAAS,EAAC,UAAU;IAAAC,QAAA,eACvBnB,OAAA,CAACN,YAAY;MAAC8B,MAAM,EAAET,UAAW;MAACU,IAAI,EAAE,EAAG;MAACP,SAAS,EAAC,KAAK;MAAAC,QAAA,gBACzDnB,OAAA,CAACL,SAAS;QAAC+B,GAAG,EAAC;MAAoD;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrEd,KAAK,CAACQ,MAAM,GAAG,CAAC,iBAAIjB,OAAA,CAACJ,QAAQ;QAAC+B,SAAS,EAAElB,KAAM;QAACmB,KAAK,EAAC;MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,IAAE,EAClER,UAAU,iBAAIf,OAAA,CAACH,MAAM;QAACgC,QAAQ,EAAEd,UAAW;QAACe,IAAI,EAAE7B;MAAW;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,IAAE,EACnEP,QAAQ,iBAAIhB,OAAA,CAACH,MAAM;QAACgC,QAAQ,EAAEb,QAAS;QAACc,IAAI,EAAE7B;MAAW;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,IAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACQ,EAAA,GA1BIzB,OAAO;AA4Bb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}