{"ast":null,"code":"// src/utils/geolocation.js\n\n// Get the current location of the user (if using real GPS)\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const timestamp = Math.floor(Date.now() / 1000);\n        resolve({\n          latitude,\n          longitude,\n          timestamp\n        });\n      }, error => reject(error), {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      });\n    } else {\n      reject(new Error('Geolocation not supported'));\n    }\n  });\n};\n\n// Simulate realistic GPS data with different speed profiles (busy road, highway, etc.)\nexport const generateSimulatedRoute = (driverId, batchSize) => {\n  const gpsBatches = [];\n  let lat = 26.6337; // Starting latitude (home)\n  let lon = 92.7926; // Starting longitude (home)\n  const homeLat = lat; // Store home location to return later\n  const homeLon = lon;\n  let timeStep = 0;\n  let speed = 0; // Initial speed (m/s)\n\n  const citySpeedRange = {\n    min: 8.33,\n    max: 11.11\n  }; // 30-40 km/h in m/s (city driving)\n  const highwaySpeedRange = {\n    min: 13.88,\n    max: 16.67\n  }; // 50-60 km/h in m/s (highway driving)\n\n  // Determine the batch segments for city vs highway\n  const cityBatches = Math.floor(batchSize * 0.6); // 60% city driving\n  const highwayBatches = batchSize - cityBatches; // 40% highway driving\n\n  for (let i = 0; i < batchSize; i++) {\n    const batch = [];\n    for (let j = 0; j < 10; j++) {\n      timeStep += 60;\n\n      // Simulate different speed profiles for city and highway\n      if (i < cityBatches) {\n        // Simulate city driving with lower speeds\n        speed = citySpeedRange.min + Math.random() * (citySpeedRange.max - citySpeedRange.min);\n      } else {\n        // Simulate highway driving with higher speeds\n        speed = highwaySpeedRange.min + Math.random() * (highwaySpeedRange.max - highwaySpeedRange.min);\n      }\n\n      // Simulate gradual movement\n      if (i < batchSize / 2) {\n        // Moving away from home\n        lat += Math.random() * 0.001;\n        lon += Math.random() * 0.001;\n      } else {\n        // Returning toward home\n        lat -= (lat - homeLat) / (batchSize - i);\n        lon -= (lon - homeLon) / (batchSize - i);\n      }\n\n      // Push the GPS data point for this batch\n      batch.push({\n        Latitude: lat,\n        Longitude: lon,\n        Time_Step: timeStep,\n        Speed: speed * 3.6,\n        // Convert speed to km/h for backend compatibility\n        Acceleration: Math.random() * 2 - 1,\n        // Simulate acceleration between -1 and 1 m/s²\n        Jerk: Math.random() * 0.2 - 0.1 // Simulate jerk between -0.1 and 0.1 m/s³\n      });\n    }\n\n    // Add batch to the list of batches\n    gpsBatches.push({\n      driver_id: driverId,\n      gps_data: batch\n    });\n  }\n  return gpsBatches;\n};\n\n// Smart logic for detecting vehicle movement or idle time\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3; // Earth radius in meters\n    const toRad = deg => deg * Math.PI / 180;\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in meters\n  };\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\n  if (previousBatch.length > 0) {\n    const lastPoint = previousBatch[previousBatch.length - 1];\n    const firstPoint = currentBatch[0];\n    const distance = calculateDistance(lastPoint.Latitude, lastPoint.Longitude, firstPoint.Latitude, firstPoint.Longitude);\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\n\n    // Check if the calculated speed is below the idle threshold\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\n      console.log('Vehicle idle detected');\n      return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","timestamp","Math","floor","Date","now","error","enableHighAccuracy","timeout","maximumAge","Error","generateSimulatedRoute","driverId","batchSize","gpsBatches","lat","lon","homeLat","homeLon","timeStep","speed","citySpeedRange","min","max","highwaySpeedRange","cityBatches","highwayBatches","i","batch","j","random","push","Latitude","Longitude","Time_Step","Speed","Acceleration","Jerk","driver_id","gps_data","smartGpsTracking","currentBatch","previousBatch","SPEED_THRESHOLD","calculateDistance","lat1","lon1","lat2","lon2","R","toRad","deg","PI","dLat","dLon","a","sin","cos","c","atan2","sqrt","calculateSpeed","distance","timeDiff","length","lastPoint","firstPoint","console","log"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\n\r\n// Get the current location of the user (if using real GPS)\r\nexport const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          const timestamp = Math.floor(Date.now() / 1000);\r\n          resolve({ latitude, longitude, timestamp });\r\n        },\r\n        (error) => reject(error),\r\n        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n      );\r\n    } else {\r\n      reject(new Error('Geolocation not supported'));\r\n    }\r\n  });\r\n};\r\n\r\n// Simulate realistic GPS data with different speed profiles (busy road, highway, etc.)\r\nexport const generateSimulatedRoute = (driverId, batchSize) => {\r\n  const gpsBatches = [];\r\n  let lat = 26.6337; // Starting latitude (home)\r\n  let lon = 92.7926; // Starting longitude (home)\r\n  const homeLat = lat; // Store home location to return later\r\n  const homeLon = lon;\r\n  let timeStep = 0;\r\n  let speed = 0; // Initial speed (m/s)\r\n  \r\n  const citySpeedRange = { min: 8.33, max: 11.11 }; // 30-40 km/h in m/s (city driving)\r\n  const highwaySpeedRange = { min: 13.88, max: 16.67 }; // 50-60 km/h in m/s (highway driving)\r\n  \r\n  // Determine the batch segments for city vs highway\r\n  const cityBatches = Math.floor(batchSize * 0.6); // 60% city driving\r\n  const highwayBatches = batchSize - cityBatches; // 40% highway driving\r\n\r\n  for (let i = 0; i < batchSize; i++) {\r\n    const batch = [];\r\n    for (let j = 0; j < 10; j++) {\r\n      timeStep += 60;\r\n\r\n      // Simulate different speed profiles for city and highway\r\n      if (i < cityBatches) {\r\n        // Simulate city driving with lower speeds\r\n        speed = citySpeedRange.min + Math.random() * (citySpeedRange.max - citySpeedRange.min);\r\n      } else {\r\n        // Simulate highway driving with higher speeds\r\n        speed = highwaySpeedRange.min + Math.random() * (highwaySpeedRange.max - highwaySpeedRange.min);\r\n      }\r\n\r\n      // Simulate gradual movement\r\n      if (i < batchSize / 2) {\r\n        // Moving away from home\r\n        lat += Math.random() * 0.001;\r\n        lon += Math.random() * 0.001;\r\n      } else {\r\n        // Returning toward home\r\n        lat -= (lat - homeLat) / (batchSize - i);\r\n        lon -= (lon - homeLon) / (batchSize - i);\r\n      }\r\n\r\n      // Push the GPS data point for this batch\r\n      batch.push({\r\n        Latitude: lat,\r\n        Longitude: lon,\r\n        Time_Step: timeStep,\r\n        Speed: speed * 3.6, // Convert speed to km/h for backend compatibility\r\n        Acceleration: Math.random() * 2 - 1, // Simulate acceleration between -1 and 1 m/s²\r\n        Jerk: Math.random() * 0.2 - 0.1 // Simulate jerk between -0.1 and 0.1 m/s³\r\n      });\r\n    }\r\n\r\n    // Add batch to the list of batches\r\n    gpsBatches.push({ driver_id: driverId, gps_data: batch });\r\n  }\r\n\r\n  return gpsBatches;\r\n};\r\n\r\n// Smart logic for detecting vehicle movement or idle time\r\nexport const smartGpsTracking = (currentBatch, previousBatch) => {\r\n  const SPEED_THRESHOLD = 2; // m/s (~7.2 km/h)\r\n\r\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const R = 6371e3; // Earth radius in meters\r\n    const toRad = (deg) => (deg * Math.PI) / 180;\r\n    const dLat = toRad(lat2 - lat1);\r\n    const dLon = toRad(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distance in meters\r\n  };\r\n\r\n  const calculateSpeed = (distance, timeDiff) => distance / timeDiff;\r\n\r\n  if (previousBatch.length > 0) {\r\n    const lastPoint = previousBatch[previousBatch.length - 1];\r\n    const firstPoint = currentBatch[0];\r\n    const distance = calculateDistance(\r\n      lastPoint.Latitude,\r\n      lastPoint.Longitude,\r\n      firstPoint.Latitude,\r\n      firstPoint.Longitude\r\n    );\r\n    const timeDiff = firstPoint.Time_Step - lastPoint.Time_Step;\r\n\r\n    // Check if the calculated speed is below the idle threshold\r\n    if (calculateSpeed(distance, timeDiff) < SPEED_THRESHOLD) {\r\n      console.log('Vehicle idle detected');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}