{"ast":null,"code":"import api from './api'; // Axios instance\nimport L from 'leaflet'; // For custom markers\n\n// Helper to send a batch of GPS data to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    if (!token) {\n      console.error('No token found');\n      return;\n    }\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch // Send the batch data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 200) {\n      console.log('Batch successfully sent:', response.data);\n    } else {\n      console.error('Error sending GPS data. Response:', response);\n    }\n  } catch (error) {\n    console.error('Error sending GPS data:', error.response || error.message || error);\n  }\n};\n\n// Function to generate random time steps between 60 and 300 seconds\nconst generateRandomTimeStep = () => {\n  return Math.floor(Math.random() * (300 - 60 + 1)) + 60; // Random time step between 60 and 300 seconds\n};\n\n// Function to generate random lat/long points near a base point\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\n  const randomOffset = () => (Math.random() - 0.5) * distance; // Generate small random offset for lat/lng\n  return {\n    Latitude: baseLat + randomOffset(),\n    Longitude: baseLng + randomOffset()\n  };\n};\n\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const basePoints = [{\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  },\n  // Point A (Home)\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Point B (Office)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Point C (Market)\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220\n  } // Point D (Pharmacy)\n  ];\n  const journey = [];\n\n  // Generate random points between A -> B -> C -> D -> A with time steps\n  for (let i = 0; i < basePoints.length; i++) {\n    const nextPoint = basePoints[(i + 1) % basePoints.length]; // Loop back to A after D\n    const currentPoint = basePoints[i];\n    let timeStep = generateRandomTimeStep();\n\n    // Create 3-4 random points between each major stop\n    for (let j = 0; j < 3; j++) {\n      // Create 3 random points between each major stop\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\n      journey.push({\n        ...randomLatLng,\n        Time_Step: timeStep\n      });\n      setGpsData(prev => [...prev, {\n        ...randomLatLng,\n        Time_Step: timeStep\n      }]); // Update state\n\n      timeStep += generateRandomTimeStep(); // Increment the time step for the next point\n    }\n\n    // Add the final point at the destination (B, C, D, A)\n    journey.push({\n      ...nextPoint,\n      Time_Step: timeStep\n    });\n    setGpsData(prev => [...prev, {\n      ...nextPoint,\n      Time_Step: timeStep\n    }]);\n  }\n\n  // Send GPS data in larger batches (fewer batches, more realistic)\n  let batch = [];\n  for (let i = 0; i < journey.length; i++) {\n    batch.push(journey[i]);\n\n    // Send a batch after reaching each major stop (A → B → C → D)\n    if (i % 4 === 3 || i === journey.length - 1) {\n      // After every 4 points or at the end\n      await sendGPSBatchToBackend(batch, driverId); // Send the batch to the backend\n      batch = []; // Clear the batch\n    }\n  }\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Radius of the earth in meters\n  const lat1 = point1.Latitude * Math.PI / 180;\n  const lat2 = point2.Latitude * Math.PI / 180;\n  const deltaLat = (point2.Latitude - point1.Latitude) * Math.PI / 180;\n  const deltaLon = (point2.Longitude - point1.Longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};\n\n// Helper function to calculate time step between two timestamps (in seconds)\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Return difference in seconds\n};","map":{"version":3,"names":["api","L","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","console","error","response","post","driver_id","gps_data","headers","Authorization","status","log","data","message","generateRandomTimeStep","Math","floor","random","generateRandomLatLng","baseLat","baseLng","distance","randomOffset","Latitude","Longitude","mockGPSData","setGpsData","basePoints","journey","i","length","nextPoint","currentPoint","timeStep","j","randomLatLng","push","Time_Step","prev","calculateDistance","point1","point2","R","lat1","PI","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","calculateTimeStep","startTime","endTime"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["import api from './api';  // Axios instance\r\nimport L from 'leaflet'; // For custom markers\r\n\r\n// Helper to send a batch of GPS data to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');  // Get JWT token\r\n    if (!token) {\r\n      console.error('No token found');\r\n      return;\r\n    }\r\n\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,  // Send the batch data\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      console.log('Batch successfully sent:', response.data);\r\n    } else {\r\n      console.error('Error sending GPS data. Response:', response);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error.response || error.message || error);\r\n  }\r\n};\r\n\r\n// Function to generate random time steps between 60 and 300 seconds\r\nconst generateRandomTimeStep = () => {\r\n  return Math.floor(Math.random() * (300 - 60 + 1)) + 60; // Random time step between 60 and 300 seconds\r\n};\r\n\r\n// Function to generate random lat/long points near a base point\r\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\r\n  const randomOffset = () => (Math.random() - 0.5) * distance;  // Generate small random offset for lat/lng\r\n  return {\r\n    Latitude: baseLat + randomOffset(),\r\n    Longitude: baseLng + randomOffset(),\r\n  };\r\n};\r\n\r\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const basePoints = [\r\n    { Latitude: 26.6338, Longitude: 92.8006 },  // Point A (Home)\r\n    { Latitude: 26.6382, Longitude: 92.8074 },  // Point B (Office)\r\n    { Latitude: 26.6451, Longitude: 92.8185 },  // Point C (Market)\r\n    { Latitude: 26.6492, Longitude: 92.8220 }   // Point D (Pharmacy)\r\n  ];\r\n\r\n  const journey = [];\r\n\r\n  // Generate random points between A -> B -> C -> D -> A with time steps\r\n  for (let i = 0; i < basePoints.length; i++) {\r\n    const nextPoint = basePoints[(i + 1) % basePoints.length];  // Loop back to A after D\r\n    const currentPoint = basePoints[i];\r\n    let timeStep = generateRandomTimeStep();\r\n\r\n    // Create 3-4 random points between each major stop\r\n    for (let j = 0; j < 3; j++) {  // Create 3 random points between each major stop\r\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\r\n      journey.push({ ...randomLatLng, Time_Step: timeStep });\r\n      setGpsData(prev => [...prev, { ...randomLatLng, Time_Step: timeStep }]);  // Update state\r\n\r\n      timeStep += generateRandomTimeStep();  // Increment the time step for the next point\r\n    }\r\n\r\n    // Add the final point at the destination (B, C, D, A)\r\n    journey.push({ ...nextPoint, Time_Step: timeStep });\r\n    setGpsData(prev => [...prev, { ...nextPoint, Time_Step: timeStep }]);\r\n  }\r\n\r\n  // Send GPS data in larger batches (fewer batches, more realistic)\r\n  let batch = [];\r\n  for (let i = 0; i < journey.length; i++) {\r\n    batch.push(journey[i]);\r\n\r\n    // Send a batch after reaching each major stop (A → B → C → D)\r\n    if (i % 4 === 3 || i === journey.length - 1) {  // After every 4 points or at the end\r\n      await sendGPSBatchToBackend(batch, driverId);  // Send the batch to the backend\r\n      batch = [];  // Clear the batch\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3;  // Radius of the earth in meters\r\n  const lat1 = point1.Latitude * Math.PI / 180;\r\n  const lat2 = point2.Latitude * Math.PI / 180;\r\n  const deltaLat = (point2.Latitude - point1.Latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.Longitude - point1.Longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;  // Returns the distance in meters\r\n};\r\n\r\n// Helper function to calculate time step between two timestamps (in seconds)\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000);  // Return difference in seconds\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}