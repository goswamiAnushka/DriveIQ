{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../../utils/api';\nimport './Dashboard.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [dailyData, setDailyData] = useState(null); // State for daily data\n  const [error, setError] = useState(null); // State for errors\n  const [isLoading, setIsLoading] = useState(true); // State for loading\n\n  // Function to fetch daily data from the API\n  const processDailyData = async () => {\n    const driver_id = localStorage.getItem('driver_id'); // Get driver_id from localStorage\n\n    try {\n      // Make the API request\n      const response = await api.post('/process-daily-data', {\n        driver_id\n      });\n\n      // Log the full response for clarity\n      console.log('Daily Data API Response:', response.data);\n\n      // Set the response data directly to the state\n      setDailyData(response.data);\n    } catch (error) {\n      console.error('Error fetching daily data:', error);\n      setError('Error fetching daily data');\n    } finally {\n      setIsLoading(false); // Stop loading state after fetch\n    }\n  };\n\n  // Fetch daily data when the component mounts\n  useEffect(() => {\n    processDailyData(); // Trigger API call on component mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading daily data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : dailyData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"daily-data-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"API Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(dailyData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"gfXR+Tcqp1Lrn655QWcdYPNEyZk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","Dashboard","_s","dailyData","setDailyData","error","setError","isLoading","setIsLoading","processDailyData","driver_id","localStorage","getItem","response","post","console","log","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../../utils/api';\r\nimport './Dashboard.scss';\r\n\r\nconst Dashboard = () => {\r\n  const [dailyData, setDailyData] = useState(null); // State for daily data\r\n  const [error, setError] = useState(null); // State for errors\r\n  const [isLoading, setIsLoading] = useState(true); // State for loading\r\n\r\n  // Function to fetch daily data from the API\r\n  const processDailyData = async () => {\r\n    const driver_id = localStorage.getItem('driver_id'); // Get driver_id from localStorage\r\n\r\n    try {\r\n      // Make the API request\r\n      const response = await api.post('/process-daily-data', { driver_id });\r\n\r\n      // Log the full response for clarity\r\n      console.log('Daily Data API Response:', response.data);\r\n\r\n      // Set the response data directly to the state\r\n      setDailyData(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching daily data:', error);\r\n      setError('Error fetching daily data');\r\n    } finally {\r\n      setIsLoading(false); // Stop loading state after fetch\r\n    }\r\n  };\r\n\r\n  // Fetch daily data when the component mounts\r\n  useEffect(() => {\r\n    processDailyData(); // Trigger API call on component mount\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      {/* Loading state */}\r\n      {isLoading ? (\r\n        <p>Loading daily data...</p>\r\n      ) : error ? (\r\n        <div className=\"error-message\">{error}</div>\r\n      ) : (\r\n        dailyData && (\r\n          <div className=\"daily-data-section\">\r\n            <h3>API Response</h3>\r\n            <pre>{JSON.stringify(dailyData, null, 2)}</pre> {/* Print the entire response as JSON */}\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMa,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;IAErD,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,qBAAqB,EAAE;QAAEJ;MAAU,CAAC,CAAC;;MAErE;MACAK,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;;MAEtD;MACAb,YAAY,CAACS,QAAQ,CAACI,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDC,QAAQ,CAAC,2BAA2B,CAAC;IACvC,CAAC,SAAS;MACRE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdY,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKkB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCnB,OAAA;MAAAmB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGxBhB,SAAS,gBACRP,OAAA;MAAAmB,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC1BlB,KAAK,gBACPL,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEd;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,GAE5CpB,SAAS,iBACPH,OAAA;MAAKkB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCnB,OAAA;QAAAmB,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBvB,OAAA;QAAAmB,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACtB,SAAS,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAER;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CAlDID,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAoDf,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}