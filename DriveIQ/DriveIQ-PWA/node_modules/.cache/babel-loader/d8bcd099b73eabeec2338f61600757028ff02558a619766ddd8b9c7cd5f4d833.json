{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMockMode, setIsMockMode] = useState(true); // Toggle between mock and real GPS data\n\n  useEffect(() => {\n    // Fetch driver data and set driverId\n    const fetchDriverData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching driver data');\n      }\n    };\n    fetchDriverData();\n  }, []);\n\n  // Function to generate mock GPS data\n  const generateMockGpsDataBatch = () => {\n    const now = Date.now();\n    // Increase distances between points to generate higher speeds\n    return [{\n      Latitude: 28.7041,\n      Longitude: 77.1025,\n      Time_Step: now\n    },\n    // Starting point\n    {\n      Latitude: 28.7061,\n      Longitude: 77.1045,\n      Time_Step: now + 60000\n    },\n    // Move ~ 300 meters (speed ~18 km/h)\n    {\n      Latitude: 28.7081,\n      Longitude: 77.1065,\n      Time_Step: now + 120000\n    },\n    // Move ~ 300 meters (speed ~18 km/h)\n    {\n      Latitude: 28.7101,\n      Longitude: 77.1085,\n      Time_Step: now + 180000\n    },\n    // Move ~ 300 meters (speed ~18 km/h)\n    {\n      Latitude: 28.7121,\n      Longitude: 77.1105,\n      Time_Step: now + 240000\n    },\n    // Move ~ 300 meters (speed ~18 km/h)\n    {\n      Latitude: 28.7141,\n      Longitude: 77.1125,\n      Time_Step: now + 300000\n    },\n    // Move ~ 300 meters (speed ~18 km/h)\n    {\n      Latitude: 28.7161,\n      Longitude: 77.1145,\n      Time_Step: now + 360000\n    } // Move ~ 300 meters (speed ~18 km/h)\n    ];\n  };\n\n  // Send mock GPS data to the backend\n  const sendMockGpsData = async () => {\n    const mockGpsDataBatch = generateMockGpsDataBatch();\n    sendGpsDataToBackend(mockGpsDataBatch);\n  };\n\n  // Get real GPS data and send to backend\n  const getRealGpsData = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(async position => {\n        const realGpsData = {\n          Latitude: position.coords.latitude,\n          Longitude: position.coords.longitude,\n          Time_Step: Date.now()\n        };\n        sendGpsDataToBackend([realGpsData]);\n      }, err => setError('Error getting real GPS data: ' + err.message), {\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  // Send GPS data batch to the backend API\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Add batch to existing data for visual display\n      setRoute(prevRoute => [...prevRoute, ...gpsDataBatch.map(point => [point.Latitude, point.Longitude])]);\n    } catch (err) {\n      setError('Error sending GPS data: ' + err.message);\n    }\n  };\n\n  // Fetch GPS data every 5 seconds\n  useEffect(() => {\n    if (driverId) {\n      const interval = setInterval(() => {\n        if (isMockMode) {\n          sendMockGpsData();\n        } else {\n          getRealGpsData();\n        }\n      }, 5000); // Interval of 5 seconds\n      return () => clearInterval(interval); // Cleanup on unmount\n    }\n  }, [driverId, isMockMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [28.7041, 77.1025],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Jt7nmIRB2lsFksj5FGC8gwJEKbw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","axios","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","jsxDEV","_jsxDEV","Dashboard","_s","gpsData","setGpsData","route","setRoute","driverId","setDriverId","error","setError","isMockMode","setIsMockMode","fetchDriverData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","generateMockGpsDataBatch","now","Date","Latitude","Longitude","Time_Step","sendMockGpsData","mockGpsDataBatch","sendGpsDataToBackend","getRealGpsData","navigator","geolocation","watchPosition","position","realGpsData","coords","latitude","longitude","message","enableHighAccuracy","gpsDataBatch","post","gps_data","prevRoute","map","point","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport axios from 'axios';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMockMode, setIsMockMode] = useState(true); // Toggle between mock and real GPS data\r\n\r\n  useEffect(() => {\r\n    // Fetch driver data and set driverId\r\n    const fetchDriverData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching driver data');\r\n      }\r\n    };\r\n    fetchDriverData();\r\n  }, []);\r\n\r\n  // Function to generate mock GPS data\r\n  const generateMockGpsDataBatch = () => {\r\n    const now = Date.now();\r\n    // Increase distances between points to generate higher speeds\r\n    return [\r\n      { Latitude: 28.7041, Longitude: 77.1025, Time_Step: now },        // Starting point\r\n      { Latitude: 28.7061, Longitude: 77.1045, Time_Step: now + 60000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n      { Latitude: 28.7081, Longitude: 77.1065, Time_Step: now + 120000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n      { Latitude: 28.7101, Longitude: 77.1085, Time_Step: now + 180000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n      { Latitude: 28.7121, Longitude: 77.1105, Time_Step: now + 240000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n      { Latitude: 28.7141, Longitude: 77.1125, Time_Step: now + 300000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n      { Latitude: 28.7161, Longitude: 77.1145, Time_Step: now + 360000 }, // Move ~ 300 meters (speed ~18 km/h)\r\n    ];\r\n  };\r\n\r\n  // Send mock GPS data to the backend\r\n  const sendMockGpsData = async () => {\r\n    const mockGpsDataBatch = generateMockGpsDataBatch();\r\n    sendGpsDataToBackend(mockGpsDataBatch);\r\n  };\r\n\r\n  // Get real GPS data and send to backend\r\n  const getRealGpsData = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(\r\n        async (position) => {\r\n          const realGpsData = {\r\n            Latitude: position.coords.latitude,\r\n            Longitude: position.coords.longitude,\r\n            Time_Step: Date.now(),\r\n          };\r\n          sendGpsDataToBackend([realGpsData]);\r\n        },\r\n        (err) => setError('Error getting real GPS data: ' + err.message),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  // Send GPS data batch to the backend API\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      await axios.post('http://localhost:5000/api/record-telematics', {\r\n        driver_id: driverId,\r\n        gps_data: gpsDataBatch\r\n      }, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n\r\n      // Add batch to existing data for visual display\r\n      setRoute((prevRoute) => [...prevRoute, ...gpsDataBatch.map((point) => [point.Latitude, point.Longitude])]);\r\n    } catch (err) {\r\n      setError('Error sending GPS data: ' + err.message);\r\n    }\r\n  };\r\n\r\n  // Fetch GPS data every 5 seconds\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const interval = setInterval(() => {\r\n        if (isMockMode) {\r\n          sendMockGpsData();\r\n        } else {\r\n          getRealGpsData();\r\n        }\r\n      }, 5000); // Interval of 5 seconds\r\n      return () => clearInterval(interval); // Cleanup on unmount\r\n    }\r\n  }, [driverId, isMockMode]);\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[28.7041, 77.1025]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}