{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport api from '../../utils/api';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Mock GPS data generator for laptop testing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateMockGpsData = () => {\n  const lat = 51.505 + Math.random() * 0.01;\n  const lng = -0.09 + Math.random() * 0.01;\n  const timestamp = new Date().toISOString();\n  return {\n    lat,\n    lng,\n    timestamp\n  };\n};\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [mockMode, setMockMode] = useState(true); // For toggling between real and mock GPS\n\n  // Fetch driver ID upon component mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await api.get('/user-data');\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle GPS tracking (Real or Mock)\n  useEffect(() => {\n    if (driverId) {\n      const trackGpsData = async () => {\n        try {\n          if (mockMode) {\n            // Mock GPS Data Simulation for Testing\n            const intervalId = setInterval(async () => {\n              const mockGps = generateMockGpsData();\n              const response = await api.post('/record-telematics', {\n                driver_id: driverId,\n                gps_data: [mockGps] // Sending mock GPS data\n              });\n\n              // Update state with new mock GPS data and performance data\n              const newRoute = [...route, [mockGps.lat, mockGps.lng]];\n              setRoute(newRoute);\n              const {\n                speed,\n                acceleration,\n                jerk\n              } = response.data.performance;\n              setPerformanceData(prev => ({\n                speed: [...prev.speed, speed],\n                acceleration: [...prev.acceleration, acceleration],\n                jerk: [...prev.jerk, jerk]\n              }));\n            }, 5000); // Send mock data every 5 seconds\n\n            return () => clearInterval(intervalId);\n          } else {\n            // Real GPS Data (For mobile use cases)\n            if (navigator.geolocation) {\n              navigator.geolocation.watchPosition(async position => {\n                const {\n                  latitude,\n                  longitude\n                } = position.coords;\n                const gpsPoint = {\n                  lat: latitude,\n                  lng: longitude,\n                  timestamp: new Date().toISOString()\n                };\n                const response = await api.post('/record-telematics', {\n                  driver_id: driverId,\n                  gps_data: [gpsPoint]\n                });\n\n                // Update state with real GPS data and performance\n                setRoute(prev => [...prev, [latitude, longitude]]);\n                const {\n                  speed,\n                  acceleration,\n                  jerk\n                } = response.data.performance;\n                setPerformanceData(prev => ({\n                  speed: [...prev.speed, speed],\n                  acceleration: [...prev.acceleration, acceleration],\n                  jerk: [...prev.jerk, jerk]\n                }));\n              });\n            }\n          }\n        } catch (err) {\n          setError('Error tracking GPS data');\n        }\n      };\n      trackGpsData();\n    }\n  }, [driverId, mockMode, route]);\n\n  // ChartJS data for performance metrics\n  const chartData = {\n    labels: gpsData.map((_, index) => `T${index}`),\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: performanceData.speed,\n      fill: false,\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: performanceData.acceleration,\n      fill: false,\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: performanceData.jerk,\n      fill: false,\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [51.505, -0.09],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 OpenStreetMap contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData.speed.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData.acceleration.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData.jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", route.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"9Kzj2SO7zUGSjwq2Xx2s6Lqhuus=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","api","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","jsxDEV","_jsxDEV","generateMockGpsData","lat","Math","random","lng","timestamp","Date","toISOString","Dashboard","_s","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","mockMode","setMockMode","fetchData","response","get","data","driver_id","err","trackGpsData","intervalId","setInterval","mockGps","post","gps_data","newRoute","performance","prev","clearInterval","navigator","geolocation","watchPosition","position","latitude","longitude","coords","gpsPoint","chartData","labels","map","_","index","datasets","label","fill","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","attribution","positions","color","slice","length","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport api from '../../utils/api';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Mock GPS data generator for laptop testing\r\nconst generateMockGpsData = () => {\r\n  const lat = 51.505 + Math.random() * 0.01;\r\n  const lng = -0.09 + Math.random() * 0.01;\r\n  const timestamp = new Date().toISOString();\r\n  return { lat, lng, timestamp };\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [mockMode, setMockMode] = useState(true); // For toggling between real and mock GPS\r\n\r\n  // Fetch driver ID upon component mount\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await api.get('/user-data');\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Handle GPS tracking (Real or Mock)\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const trackGpsData = async () => {\r\n        try {\r\n          if (mockMode) {\r\n            // Mock GPS Data Simulation for Testing\r\n            const intervalId = setInterval(async () => {\r\n              const mockGps = generateMockGpsData();\r\n              const response = await api.post('/record-telematics', {\r\n                driver_id: driverId,\r\n                gps_data: [mockGps], // Sending mock GPS data\r\n              });\r\n\r\n              // Update state with new mock GPS data and performance data\r\n              const newRoute = [...route, [mockGps.lat, mockGps.lng]];\r\n              setRoute(newRoute);\r\n\r\n              const { speed, acceleration, jerk } = response.data.performance;\r\n              setPerformanceData((prev) => ({\r\n                speed: [...prev.speed, speed],\r\n                acceleration: [...prev.acceleration, acceleration],\r\n                jerk: [...prev.jerk, jerk],\r\n              }));\r\n            }, 5000); // Send mock data every 5 seconds\r\n\r\n            return () => clearInterval(intervalId);\r\n          } else {\r\n            // Real GPS Data (For mobile use cases)\r\n            if (navigator.geolocation) {\r\n              navigator.geolocation.watchPosition(async (position) => {\r\n                const { latitude, longitude } = position.coords;\r\n                const gpsPoint = { lat: latitude, lng: longitude, timestamp: new Date().toISOString() };\r\n                \r\n                const response = await api.post('/record-telematics', {\r\n                  driver_id: driverId,\r\n                  gps_data: [gpsPoint],\r\n                });\r\n\r\n                // Update state with real GPS data and performance\r\n                setRoute((prev) => [...prev, [latitude, longitude]]);\r\n                const { speed, acceleration, jerk } = response.data.performance;\r\n                setPerformanceData((prev) => ({\r\n                  speed: [...prev.speed, speed],\r\n                  acceleration: [...prev.acceleration, acceleration],\r\n                  jerk: [...prev.jerk, jerk],\r\n                }));\r\n              });\r\n            }\r\n          }\r\n        } catch (err) {\r\n          setError('Error tracking GPS data');\r\n        }\r\n      };\r\n\r\n      trackGpsData();\r\n    }\r\n  }, [driverId, mockMode, route]);\r\n\r\n  // ChartJS data for performance metrics\r\n  const chartData = {\r\n    labels: gpsData.map((_, index) => `T${index}`),\r\n    datasets: [\r\n      {\r\n        label: 'Speed (m/s)',\r\n        data: performanceData.speed,\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n      },\r\n      {\r\n        label: 'Acceleration (m/s²)',\r\n        data: performanceData.acceleration,\r\n        fill: false,\r\n        borderColor: '#FF6384',\r\n      },\r\n      {\r\n        label: 'Jerk (m/s³)',\r\n        data: performanceData.jerk,\r\n        fill: false,\r\n        borderColor: '#36A2EB',\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n\r\n      <div className=\"dashboard-content\">\r\n        {/* Map Section */}\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[51.505, -0.09]} zoom={13} className=\"map\">\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"© OpenStreetMap contributors\"\r\n            />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n\r\n        {/* Performance Graph Section */}\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Driving Performance Icons */}\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData.speed.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData.acceleration.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData.jerk.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route.length}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Daily Performance Popup */}\r\n      <DailyScorePopup driverId={driverId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}