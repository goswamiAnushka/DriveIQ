{"ast":null,"code":"// src/utils/geolocation.js\nimport api from './api'; // Axios instance\n\n// Helper to send GPS batches to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Helper to calculate time step between two GPS points\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Returns the difference in seconds\n};\n\n// Generate Mock GPS Data (Simulating Realistic Movement)\nexport const mockGPSData = async (setGpsData, driverId) => {\n  // Define a realistic route with multiple points and time steps\n  const journey = [\n  // A to B\n  {\n    Latitude: 26.6338,\n    Longitude: 92.8006,\n    Time_Step: 1\n  },\n  // Start\n  {\n    Latitude: 26.6348,\n    Longitude: 92.8016,\n    Time_Step: 60\n  },\n  // Moving\n  {\n    Latitude: 26.6370,\n    Longitude: 92.8050,\n    Time_Step: 120\n  },\n  // Midway\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074,\n    Time_Step: 180\n  },\n  // Destination B\n\n  // B to C\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074,\n    Time_Step: 300\n  },\n  // Start from B\n  {\n    Latitude: 26.6402,\n    Longitude: 92.8102,\n    Time_Step: 360\n  },\n  // Moving\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185,\n    Time_Step: 600\n  },\n  // Destination C\n\n  // C to D\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185,\n    Time_Step: 900\n  },\n  // Start from C\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220,\n    Time_Step: 960\n  },\n  // Destination D\n\n  // D to A\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220,\n    Time_Step: 1200\n  },\n  // Start from D\n  {\n    Latitude: 26.6338,\n    Longitude: 92.8006,\n    Time_Step: 1800\n  } // Back to A (Home)\n  ];\n  let batch = [];\n  let lastTimeStep = journey[0].Time_Step;\n  for (let i = 0; i < journey.length; i++) {\n    const point = journey[i];\n    const timeStep = calculateTimeStep(lastTimeStep, point.Time_Step); // Adjust time step between points\n    lastTimeStep = point.Time_Step;\n    const gpsDataPoint = {\n      Latitude: point.Latitude,\n      Longitude: point.Longitude,\n      Time_Step: timeStep\n    };\n    batch.push(gpsDataPoint);\n    setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n\n    // Send batch if we reach 5 points or it's the end of the journey\n    if (batch.length === 5 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId);\n      batch = [];\n    }\n  }\n};\n\n// Real GPS Tracking\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep\n    };\n    gpsBatch.push(gpsDataPoint);\n    setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      sendGPSBatchToBackend(gpsBatch, driverId);\n      gpsBatch.length = 0;\n    }\n    lastPosition = {\n      latitude,\n      longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","calculateTimeStep","startTime","endTime","Math","floor","mockGPSData","setGpsData","journey","Latitude","Longitude","Time_Step","lastTimeStep","i","length","point","timeStep","gpsDataPoint","push","prevGpsData","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","onError","message","options","enableHighAccuracy","timeout","maximumAge","watchPosition"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\nimport api from './api';  // Axios instance\r\n\r\n// Helper to send GPS batches to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,\r\n    }, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Helper to calculate time step between two GPS points\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000);  // Returns the difference in seconds\r\n};\r\n\r\n// Generate Mock GPS Data (Simulating Realistic Movement)\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  // Define a realistic route with multiple points and time steps\r\n  const journey = [\r\n    // A to B\r\n    { Latitude: 26.6338, Longitude: 92.8006, Time_Step: 1 },  // Start\r\n    { Latitude: 26.6348, Longitude: 92.8016, Time_Step: 60 }, // Moving\r\n    { Latitude: 26.6370, Longitude: 92.8050, Time_Step: 120 }, // Midway\r\n    { Latitude: 26.6382, Longitude: 92.8074, Time_Step: 180 }, // Destination B\r\n\r\n    // B to C\r\n    { Latitude: 26.6382, Longitude: 92.8074, Time_Step: 300 }, // Start from B\r\n    { Latitude: 26.6402, Longitude: 92.8102, Time_Step: 360 }, // Moving\r\n    { Latitude: 26.6451, Longitude: 92.8185, Time_Step: 600 }, // Destination C\r\n\r\n    // C to D\r\n    { Latitude: 26.6451, Longitude: 92.8185, Time_Step: 900 }, // Start from C\r\n    { Latitude: 26.6492, Longitude: 92.8220, Time_Step: 960 }, // Destination D\r\n\r\n    // D to A\r\n    { Latitude: 26.6492, Longitude: 92.8220, Time_Step: 1200 }, // Start from D\r\n    { Latitude: 26.6338, Longitude: 92.8006, Time_Step: 1800 }, // Back to A (Home)\r\n  ];\r\n\r\n  let batch = [];\r\n  let lastTimeStep = journey[0].Time_Step;\r\n\r\n  for (let i = 0; i < journey.length; i++) {\r\n    const point = journey[i];\r\n    const timeStep = calculateTimeStep(lastTimeStep, point.Time_Step); // Adjust time step between points\r\n    lastTimeStep = point.Time_Step;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: point.Latitude,\r\n      Longitude: point.Longitude,\r\n      Time_Step: timeStep,\r\n    };\r\n\r\n    batch.push(gpsDataPoint);\r\n    setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n\r\n    // Send batch if we reach 5 points or it's the end of the journey\r\n    if (batch.length === 5 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);\r\n      batch = [];\r\n    }\r\n  }\r\n};\r\n\r\n// Real GPS Tracking\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n    \r\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep,\r\n    };\r\n\r\n    gpsBatch.push(gpsDataPoint);\r\n    setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n\r\n    if (gpsBatch.length >= 5 || timeStep > 300) {\r\n      sendGPSBatchToBackend(gpsBatch, driverId);\r\n      gpsBatch.length = 0;\r\n    }\r\n\r\n    lastPosition = { latitude, longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}