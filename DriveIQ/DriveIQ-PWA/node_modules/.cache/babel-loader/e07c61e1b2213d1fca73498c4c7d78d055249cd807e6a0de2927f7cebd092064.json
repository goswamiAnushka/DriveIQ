{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport api from '../../utils/api';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Importing necessary Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]); // For Polyline in the map\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [mockMode, setMockMode] = useState(true); // Toggle between mock and real GPS data\n\n  useEffect(() => {\n    // Fetch user data on component mount\n    const fetchData = async () => {\n      try {\n        const response = await api.get('/user-data');\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (driverId) {\n      if (mockMode) {\n        // If in mock mode, simulate GPS data\n        const generateMockGpsData = () => {\n          let lat = 37.7749;\n          let lng = -122.4194;\n          const gpsPoints = [];\n          const currentTime = new Date().getTime();\n\n          // Generate 10 mock GPS points, spaced by 10 seconds each\n          for (let i = 0; i < 10; i++) {\n            const timeStep = currentTime + i * 10000; // 10 seconds apart\n            gpsPoints.push({\n              lat: lat + i * 0.001,\n              lng: lng + i * 0.001,\n              time_step: timeStep\n            });\n          }\n          return gpsPoints;\n        };\n        const gpsPoints = generateMockGpsData();\n        sendGpsData(gpsPoints);\n      } else {\n        // Real GPS tracking using navigator.geolocation\n        const fetchRealGpsData = () => {\n          if (navigator.geolocation) {\n            navigator.geolocation.watchPosition(position => {\n              const gpsPoint = {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude,\n                time_step: new Date().getTime() // Capture timestamp\n              };\n              sendGpsData([gpsPoint]); // Send data to backend\n            }, error => {\n              console.error('Error fetching GPS data:', error);\n            }, {\n              enableHighAccuracy: true,\n              timeout: 5000,\n              maximumAge: 0\n            });\n          }\n        };\n        fetchRealGpsData();\n      }\n    }\n  }, [driverId, mockMode]);\n\n  // Function to send GPS data to the backend\n  const sendGpsData = async gpsPoints => {\n    try {\n      const response = await api.post('/record-telematics', {\n        gps_data: gpsPoints,\n        driver_id: driverId\n      });\n      const gps = gpsPoints;\n      const performance = response.data.performance;\n      setGpsData(gps);\n      setRoute(gps.map(point => [point.lat, point.lng]));\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      setError('Error sending GPS data');\n    }\n  };\n  const chartData = {\n    labels: gpsData.map((_, index) => `T${index}`),\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: performanceData.speed,\n      fill: false,\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: performanceData.acceleration,\n      fill: false,\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: performanceData.jerk,\n      fill: false,\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [51.505, -0.09],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 OpenStreetMap contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData.speed.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData.acceleration.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData.jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", route.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"9Kzj2SO7zUGSjwq2Xx2s6Lqhuus=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","api","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","mockMode","setMockMode","fetchData","response","get","data","driver_id","err","generateMockGpsData","lat","lng","gpsPoints","currentTime","Date","getTime","i","timeStep","push","time_step","sendGpsData","fetchRealGpsData","navigator","geolocation","watchPosition","position","gpsPoint","coords","latitude","longitude","console","enableHighAccuracy","timeout","maximumAge","post","gps_data","gps","performance","map","point","chartData","labels","_","index","datasets","label","fill","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","attribution","positions","color","slice","length","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport api from '../../utils/api';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Importing necessary Chart.js components\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]); // For Polyline in the map\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [mockMode, setMockMode] = useState(true); // Toggle between mock and real GPS data\r\n\r\n  useEffect(() => {\r\n    // Fetch user data on component mount\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await api.get('/user-data');\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      if (mockMode) {\r\n        // If in mock mode, simulate GPS data\r\n        const generateMockGpsData = () => {\r\n          let lat = 37.7749;\r\n          let lng = -122.4194;\r\n          const gpsPoints = [];\r\n          const currentTime = new Date().getTime();\r\n\r\n          // Generate 10 mock GPS points, spaced by 10 seconds each\r\n          for (let i = 0; i < 10; i++) {\r\n            const timeStep = currentTime + i * 10000; // 10 seconds apart\r\n            gpsPoints.push({\r\n              lat: lat + i * 0.001,\r\n              lng: lng + i * 0.001,\r\n              time_step: timeStep,\r\n            });\r\n          }\r\n          return gpsPoints;\r\n        };\r\n\r\n        const gpsPoints = generateMockGpsData();\r\n        sendGpsData(gpsPoints);\r\n      } else {\r\n        // Real GPS tracking using navigator.geolocation\r\n        const fetchRealGpsData = () => {\r\n          if (navigator.geolocation) {\r\n            navigator.geolocation.watchPosition(\r\n              (position) => {\r\n                const gpsPoint = {\r\n                  lat: position.coords.latitude,\r\n                  lng: position.coords.longitude,\r\n                  time_step: new Date().getTime(), // Capture timestamp\r\n                };\r\n                sendGpsData([gpsPoint]); // Send data to backend\r\n              },\r\n              (error) => {\r\n                console.error('Error fetching GPS data:', error);\r\n              },\r\n              { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n            );\r\n          }\r\n        };\r\n\r\n        fetchRealGpsData();\r\n      }\r\n    }\r\n  }, [driverId, mockMode]);\r\n\r\n  // Function to send GPS data to the backend\r\n  const sendGpsData = async (gpsPoints) => {\r\n    try {\r\n      const response = await api.post('/record-telematics', {\r\n        gps_data: gpsPoints,\r\n        driver_id: driverId,\r\n      });\r\n\r\n      const gps = gpsPoints;\r\n      const performance = response.data.performance;\r\n\r\n      setGpsData(gps);\r\n      setRoute(gps.map((point) => [point.lat, point.lng]));\r\n\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      setError('Error sending GPS data');\r\n    }\r\n  };\r\n\r\n  const chartData = {\r\n    labels: gpsData.map((_, index) => `T${index}`),\r\n    datasets: [\r\n      {\r\n        label: 'Speed (m/s)',\r\n        data: performanceData.speed,\r\n        fill: false,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n      },\r\n      {\r\n        label: 'Acceleration (m/s²)',\r\n        data: performanceData.acceleration,\r\n        fill: false,\r\n        borderColor: '#FF6384',\r\n      },\r\n      {\r\n        label: 'Jerk (m/s³)',\r\n        data: performanceData.jerk,\r\n        fill: false,\r\n        borderColor: '#36A2EB',\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n\r\n      <div className=\"dashboard-content\">\r\n        {/* Map Section */}\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[51.505, -0.09]} zoom={13} className=\"map\">\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"© OpenStreetMap contributors\"\r\n            />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n\r\n        {/* Performance Graph Section */}\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData.speed.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData.acceleration.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData.jerk.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route.length}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Daily Performance Popup */}\r\n      <DailyScorePopup driverId={driverId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}