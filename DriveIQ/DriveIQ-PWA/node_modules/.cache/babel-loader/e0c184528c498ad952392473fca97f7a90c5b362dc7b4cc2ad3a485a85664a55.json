{"ast":null,"code":"// src/utils/geolocation.js\nimport api from './api'; // Axios instance\n\n// Helper to send a batch of GPS data to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch // Send the batch data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Function to generate random time steps between 60 and 300 seconds\nconst generateRandomTimeStep = () => {\n  return Math.floor(Math.random() * (300 - 60 + 1)) + 60; // Random time step between 60 and 300 seconds\n};\n\n// Function to generate random lat/long points near a base point\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\n  const randomOffset = () => (Math.random() - 0.5) * distance; // Generate small random offset for lat/lng\n  return {\n    Latitude: baseLat + randomOffset(),\n    Longitude: baseLng + randomOffset()\n  };\n};\n\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const basePoints = [{\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  },\n  // Point A (Home)\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Point B (Office)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Point C (Market)\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220\n  } // Point D (Pharmacy)\n  ];\n  const journey = [];\n\n  // Generate random points between A -> B -> C -> D -> A with time steps\n  for (let i = 0; i < basePoints.length; i++) {\n    const nextPoint = basePoints[(i + 1) % basePoints.length]; // Loop back to A after D\n    const currentPoint = basePoints[i];\n    let timeStep = generateRandomTimeStep();\n    for (let j = 0; j < 5; j++) {\n      // Create 5 random points between each major stop\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\n      journey.push({\n        ...randomLatLng,\n        Time_Step: timeStep\n      });\n      setGpsData(prev => [...prev, {\n        ...randomLatLng,\n        Time_Step: timeStep\n      }]); // Update state\n\n      timeStep += generateRandomTimeStep(); // Increment the time step for the next point\n    }\n\n    // Add the final point at the destination (B, C, D, A)\n    journey.push({\n      ...nextPoint,\n      Time_Step: timeStep\n    });\n    setGpsData(prev => [...prev, {\n      ...nextPoint,\n      Time_Step: timeStep\n    }]);\n  }\n\n  // Send GPS data in batches of 5 points\n  let batch = [];\n  for (let i = 0; i < journey.length; i++) {\n    batch.push(journey[i]);\n\n    // Send a batch when there are 5 points or at the end\n    if (batch.length === 5 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId); // Send the batch to the backend\n      batch = []; // Clear the batch\n    }\n  }\n};\n\n// ** 2. Real GPS Tracking: Detect Movement and Batch Data **\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n\n    // Time step between current and last recorded GPS point\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep // Time step in seconds\n    };\n\n    // If thereâ€™s significant movement, record and batch the data\n    if (lastPosition) {\n      const distanceMoved = calculateDistance(lastPosition, {\n        latitude,\n        longitude\n      }); // in meters\n\n      if (distanceMoved > 10) {\n        // Only track if more than 10m movement\n        gpsBatch.push(gpsDataPoint);\n        setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n      }\n    } else {\n      // First point, just push to the batch\n      gpsBatch.push(gpsDataPoint);\n    }\n\n    // Send batch every 5 points or at significant stop\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      // Send on stop or batch size\n      sendGPSBatchToBackend(gpsBatch, driverId);\n      gpsBatch.length = 0; // Reset the batch\n    }\n    lastPosition = {\n      latitude,\n      longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Radius of the earth in meters\n  const lat1 = point1.latitude * Math.PI / 180;\n  const lat2 = point2.latitude * Math.PI / 180;\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};\n\n// Helper function to calculate time step between two timestamps (in seconds)\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Return difference in seconds\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","generateRandomTimeStep","Math","floor","random","generateRandomLatLng","baseLat","baseLng","distance","randomOffset","Latitude","Longitude","mockGPSData","setGpsData","basePoints","journey","i","length","nextPoint","currentPoint","timeStep","j","randomLatLng","push","Time_Step","prev","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","startTime","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","calculateTimeStep","gpsDataPoint","distanceMoved","calculateDistance","prevGpsData","onError","message","options","enableHighAccuracy","timeout","maximumAge","watchPosition","point1","point2","R","lat1","PI","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","endTime"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\nimport api from './api';  // Axios instance\r\n\r\n// Helper to send a batch of GPS data to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');  // Get JWT token\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,  // Send the batch data\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Function to generate random time steps between 60 and 300 seconds\r\nconst generateRandomTimeStep = () => {\r\n  return Math.floor(Math.random() * (300 - 60 + 1)) + 60; // Random time step between 60 and 300 seconds\r\n};\r\n\r\n// Function to generate random lat/long points near a base point\r\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\r\n  const randomOffset = () => (Math.random() - 0.5) * distance;  // Generate small random offset for lat/lng\r\n  return {\r\n    Latitude: baseLat + randomOffset(),\r\n    Longitude: baseLng + randomOffset(),\r\n  };\r\n};\r\n\r\n// ** 1. Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const basePoints = [\r\n    { Latitude: 26.6338, Longitude: 92.8006 },  // Point A (Home)\r\n    { Latitude: 26.6382, Longitude: 92.8074 },  // Point B (Office)\r\n    { Latitude: 26.6451, Longitude: 92.8185 },  // Point C (Market)\r\n    { Latitude: 26.6492, Longitude: 92.8220 }   // Point D (Pharmacy)\r\n  ];\r\n\r\n  const journey = [];\r\n\r\n  // Generate random points between A -> B -> C -> D -> A with time steps\r\n  for (let i = 0; i < basePoints.length; i++) {\r\n    const nextPoint = basePoints[(i + 1) % basePoints.length];  // Loop back to A after D\r\n    const currentPoint = basePoints[i];\r\n    let timeStep = generateRandomTimeStep();\r\n\r\n    for (let j = 0; j < 5; j++) {  // Create 5 random points between each major stop\r\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\r\n      journey.push({ ...randomLatLng, Time_Step: timeStep });\r\n      setGpsData(prev => [...prev, { ...randomLatLng, Time_Step: timeStep }]);  // Update state\r\n\r\n      timeStep += generateRandomTimeStep();  // Increment the time step for the next point\r\n    }\r\n\r\n    // Add the final point at the destination (B, C, D, A)\r\n    journey.push({ ...nextPoint, Time_Step: timeStep });\r\n    setGpsData(prev => [...prev, { ...nextPoint, Time_Step: timeStep }]);\r\n  }\r\n\r\n  // Send GPS data in batches of 5 points\r\n  let batch = [];\r\n  for (let i = 0; i < journey.length; i++) {\r\n    batch.push(journey[i]);\r\n\r\n    // Send a batch when there are 5 points or at the end\r\n    if (batch.length === 5 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);  // Send the batch to the backend\r\n      batch = [];  // Clear the batch\r\n    }\r\n  }\r\n};\r\n\r\n// ** 2. Real GPS Tracking: Detect Movement and Batch Data **\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n\r\n    // Time step between current and last recorded GPS point\r\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep,  // Time step in seconds\r\n    };\r\n\r\n    // If thereâ€™s significant movement, record and batch the data\r\n    if (lastPosition) {\r\n      const distanceMoved = calculateDistance(lastPosition, { latitude, longitude }); // in meters\r\n\r\n      if (distanceMoved > 10) { // Only track if more than 10m movement\r\n        gpsBatch.push(gpsDataPoint);\r\n        setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n      }\r\n    } else {\r\n      // First point, just push to the batch\r\n      gpsBatch.push(gpsDataPoint);\r\n    }\r\n\r\n    // Send batch every 5 points or at significant stop\r\n    if (gpsBatch.length >= 5 || timeStep > 300) {  // Send on stop or batch size\r\n      sendGPSBatchToBackend(gpsBatch, driverId);\r\n      gpsBatch.length = 0;  // Reset the batch\r\n    }\r\n\r\n    lastPosition = { latitude, longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3;  // Radius of the earth in meters\r\n  const lat1 = point1.latitude * Math.PI / 180;\r\n  const lat2 = point2.latitude * Math.PI / 180;\r\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;  // Returns the distance in meters\r\n};\r\n\r\n// Helper function to calculate time step between two timestamps (in seconds)\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000);  // Return difference in seconds\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}