{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport api from '../../utils/api';\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\nimport './Dashboard.scss';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst customIcon = new L.Icon({\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34]\n});\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [speedData, setSpeedData] = useState([]);\n  const [accelerationData, setAccelerationData] = useState([]);\n  const [jerkData, setJerkData] = useState([]);\n  const [brakingData, setBrakingData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState(null);\n  const [dailyData, setDailyData] = useState(null); // Daily data from the API\n  const [loading, setLoading] = useState(false); // Loading state\n\n  const toggleTracking = () => {\n    setIsTracking(prev => !prev);\n    if (!isTracking) {\n      startTracking();\n    }\n  };\n  const startTracking = () => {\n    const simulatedBatches = generateSimulatedRoute(1, 5);\n    simulatedBatches.forEach((batch, index) => {\n      setTimeout(() => processBatch(batch), index * 5000);\n    });\n  };\n  const processBatch = async batch => {\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\n    if (isMoving) {\n      try {\n        const driver_id = localStorage.getItem('driver_id');\n        const response = await api.post('/record-telematics', {\n          driver_id,\n          gps_data: batch.gps_data\n        });\n        const features = response.data.features;\n        if (features) {\n          var _features$SpeedMS, _features$Acceleratio, _features$JerkMS, _features$Braking_Int;\n          const speed = (_features$SpeedMS = features['Speed(m/s)']) !== null && _features$SpeedMS !== void 0 ? _features$SpeedMS : 0;\n          const acceleration = (_features$Acceleratio = features['Acceleration(m/s^2)']) !== null && _features$Acceleratio !== void 0 ? _features$Acceleratio : 0;\n          const jerk = (_features$JerkMS = features['Jerk(m/s^3)']) !== null && _features$JerkMS !== void 0 ? _features$JerkMS : 0;\n          const brakingIntensity = (_features$Braking_Int = features['Braking_Intensity']) !== null && _features$Braking_Int !== void 0 ? _features$Braking_Int : 0;\n          setSpeedData(prevData => [...prevData, speed]);\n          setAccelerationData(prevData => [...prevData, acceleration]);\n          setJerkData(prevData => [...prevData, jerk]);\n          setBrakingData(prevData => [...prevData, brakingIntensity]);\n          setGpsData(prevData => [...prevData, ...batch.gps_data]);\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\n          setMarkers(prevMarkers => [...prevMarkers, {\n            lat: lastPoint.Latitude,\n            lng: lastPoint.Longitude\n          }]);\n          setRoute(prevRoute => [...prevRoute, ...batch.gps_data.map(point => [point.Latitude, point.Longitude])]);\n        }\n      } catch (error) {\n        console.error('Error recording telematics data:', error);\n        setError('Error processing GPS data. Please try again.');\n      }\n    }\n  };\n  const processDailyData = async () => {\n    const driver_id = localStorage.getItem('driver_id'); // Ensure driver_id is available\n    if (!driver_id) {\n      setError('Driver ID not found. Please log in again.');\n      return;\n    }\n    setLoading(true); // Set loading state when starting to fetch data\n    try {\n      const response = await api.post('/process-daily-data', {\n        driver_id\n      });\n\n      // Print the response to console and set it to state\n      console.log('API Response:', response.data);\n      setDailyData(response.data); // Store daily data in state\n      setError(null); // Clear previous errors\n    } catch (error) {\n      console.error('Error fetching daily data:', error);\n      setError('Failed to fetch daily data. Please try again.');\n    } finally {\n      setLoading(false); // Stop loading state\n    }\n  };\n  useEffect(() => {\n    if (!dailyData) {\n      processDailyData(); // Fetch daily data when the component mounts\n    }\n  }, []);\n  useEffect(() => {\n    if (dailyData) {\n      console.log('Fetched dailyData:', dailyData);\n    }\n  }, [dailyData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracking-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTracking,\n        children: isTracking ? 'Stop Tracking' : 'Start Tracking'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: processDailyData,\n        children: \"Process Daily Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading daily data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }, this), dailyData && /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      dailyData: dailyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(BatchProcessing, {\n      gpsData: gpsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"fnoNe/+y/HoMbqulK1WJ16lZRQQ=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Line","MapContainer","TileLayer","Marker","Popup","Polyline","L","api","smartGpsTracking","generateSimulatedRoute","BatchProcessing","DailyScorePopup","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","customIcon","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","Dashboard","_s","gpsData","setGpsData","speedData","setSpeedData","accelerationData","setAccelerationData","jerkData","setJerkData","brakingData","setBrakingData","route","setRoute","markers","setMarkers","isTracking","setIsTracking","error","setError","dailyData","setDailyData","loading","setLoading","toggleTracking","prev","startTracking","simulatedBatches","forEach","batch","index","setTimeout","processBatch","isMoving","gps_data","driver_id","localStorage","getItem","response","post","features","data","_features$SpeedMS","_features$Acceleratio","_features$JerkMS","_features$Braking_Int","speed","acceleration","jerk","brakingIntensity","prevData","lastPoint","length","prevMarkers","lat","Latitude","lng","Longitude","prevRoute","map","point","console","processDailyData","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport api from '../../utils/api';\r\nimport { smartGpsTracking, generateSimulatedRoute } from '../../utils/geolocation';\r\nimport BatchProcessing from '../BatchProcessing/BatchProcessing';\r\nimport './Dashboard.scss';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\n\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst customIcon = new L.Icon({\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n});\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [speedData, setSpeedData] = useState([]);\r\n  const [accelerationData, setAccelerationData] = useState([]);\r\n  const [jerkData, setJerkData] = useState([]);\r\n  const [brakingData, setBrakingData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [isTracking, setIsTracking] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [dailyData, setDailyData] = useState(null); // Daily data from the API\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n\r\n  const toggleTracking = () => {\r\n    setIsTracking((prev) => !prev);\r\n    if (!isTracking) {\r\n      startTracking();\r\n    }\r\n  };\r\n\r\n  const startTracking = () => {\r\n    const simulatedBatches = generateSimulatedRoute(1, 5);\r\n    simulatedBatches.forEach((batch, index) => {\r\n      setTimeout(() => processBatch(batch), index * 5000);\r\n    });\r\n  };\r\n\r\n  const processBatch = async (batch) => {\r\n    const isMoving = smartGpsTracking(batch.gps_data, gpsData);\r\n    if (isMoving) {\r\n      try {\r\n        const driver_id = localStorage.getItem('driver_id');\r\n        const response = await api.post('/record-telematics', {\r\n          driver_id,\r\n          gps_data: batch.gps_data,\r\n        });\r\n\r\n        const features = response.data.features;\r\n\r\n        if (features) {\r\n          const speed = features['Speed(m/s)'] ?? 0;\r\n          const acceleration = features['Acceleration(m/s^2)'] ?? 0;\r\n          const jerk = features['Jerk(m/s^3)'] ?? 0;\r\n          const brakingIntensity = features['Braking_Intensity'] ?? 0;\r\n\r\n          setSpeedData((prevData) => [...prevData, speed]);\r\n          setAccelerationData((prevData) => [...prevData, acceleration]);\r\n          setJerkData((prevData) => [...prevData, jerk]);\r\n          setBrakingData((prevData) => [...prevData, brakingIntensity]);\r\n\r\n          setGpsData((prevData) => [...prevData, ...batch.gps_data]);\r\n\r\n          const lastPoint = batch.gps_data[batch.gps_data.length - 1];\r\n          setMarkers((prevMarkers) => [\r\n            ...prevMarkers,\r\n            { lat: lastPoint.Latitude, lng: lastPoint.Longitude },\r\n          ]);\r\n\r\n          setRoute((prevRoute) => [\r\n            ...prevRoute,\r\n            ...batch.gps_data.map((point) => [point.Latitude, point.Longitude]),\r\n          ]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error recording telematics data:', error);\r\n        setError('Error processing GPS data. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const processDailyData = async () => {\r\n    const driver_id = localStorage.getItem('driver_id'); // Ensure driver_id is available\r\n    if (!driver_id) {\r\n      setError('Driver ID not found. Please log in again.');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);  // Set loading state when starting to fetch data\r\n    try {\r\n      const response = await api.post('/process-daily-data', { driver_id });\r\n      \r\n      // Print the response to console and set it to state\r\n      console.log('API Response:', response.data);\r\n      setDailyData(response.data);  // Store daily data in state\r\n      setError(null);  // Clear previous errors\r\n    } catch (error) {\r\n      console.error('Error fetching daily data:', error);\r\n      setError('Failed to fetch daily data. Please try again.');\r\n    } finally {\r\n      setLoading(false);  // Stop loading state\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!dailyData) {\r\n      processDailyData();  // Fetch daily data when the component mounts\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (dailyData) {\r\n      console.log('Fetched dailyData:', dailyData);\r\n    }\r\n  }, [dailyData]);\r\n  \r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n  \r\n      <div className=\"tracking-controls\">\r\n        <button onClick={toggleTracking}>\r\n          {isTracking ? 'Stop Tracking' : 'Start Tracking'}\r\n        </button>\r\n        <button onClick={processDailyData}>Process Daily Data</button>\r\n      </div>\r\n  \r\n      {/* Display loading state */}\r\n      {loading && <p>Loading daily data...</p>}\r\n  \r\n      {dailyData && <DailyScorePopup dailyData={dailyData} />}\r\n  \r\n      <BatchProcessing gpsData={gpsData} />\r\n  \r\n      {/* Display error message if there's an error */}\r\n      {error && <div className=\"error\">{error}</div>}\r\n    </div>\r\n  );\r\n}  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}