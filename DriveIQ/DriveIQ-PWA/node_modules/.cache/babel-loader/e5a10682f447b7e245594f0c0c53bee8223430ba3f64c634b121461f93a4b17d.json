{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Importing necessary Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMockMode, setIsMockMode] = useState(true); // Mock GPS for testing\n\n  // Fetch driver data (driver_id) from the backend using JWT token\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Use effect to handle real-time GPS tracking (mock or real) every 5 seconds\n  useEffect(() => {\n    if (driverId) {\n      const interval = setInterval(() => {\n        if (isMockMode) {\n          sendMockGpsData(); // Mock GPS data for testing\n        } else {\n          getRealGpsData(); // Real GPS for mobile devices\n        }\n      }, 5000); // Every 5 seconds\n\n      return () => clearInterval(interval); // Cleanup interval\n    }\n  }, [driverId, isMockMode]);\n\n  // Send mock GPS data to the backend if speed > 5 km/h\n  const sendMockGpsData = async () => {\n    const mockGpsData = generateMockGpsData();\n    if (mockGpsData.speed > 5) {\n      sendGpsDataToBackend([mockGpsData]);\n    }\n  };\n\n  // Get real GPS data and send to backend when speed > 5 km/h\n  const getRealGpsData = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(async position => {\n        const realGpsData = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          timestamp: Date.now(),\n          speed: position.coords.speed ? position.coords.speed * 3.6 : 0 // Convert to km/h\n        };\n        if (realGpsData.speed > 5) {\n          sendGpsDataToBackend([realGpsData]);\n        }\n      }, err => setError('Error getting real GPS data: ' + err.message), {\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  // Send the batched GPS data to the backend\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch.map(dataPoint => ({\n          Latitude: dataPoint.lat,\n          // Ensure the correct column names\n          Longitude: dataPoint.lng,\n          // Ensure the correct column names\n          Timestamp: dataPoint.timestamp,\n          Speed: dataPoint.speed\n        }))\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Update GPS data and performance data on successful response\n      const gps = response.data.gps_data;\n      const performance = response.data.performance;\n      setGpsData(gps);\n      setRoute(gps.map(point => [point.lat, point.lng]));\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      setError('Error sending GPS data');\n    }\n  };\n\n  // Generate mock GPS data for testing purposes\n  const generateMockGpsData = () => {\n    const mockRoute = [{\n      lat: 51.505,\n      lng: -0.09,\n      timestamp: Date.now(),\n      speed: 10\n    },\n    // 10 km/h\n    {\n      lat: 51.506,\n      lng: -0.08,\n      timestamp: Date.now() + 5000,\n      speed: 15\n    },\n    // 15 km/h\n    {\n      lat: 51.507,\n      lng: -0.07,\n      timestamp: Date.now() + 10000,\n      speed: 0\n    } // Stopped\n    ];\n    return mockRoute[Math.floor(Math.random() * mockRoute.length)];\n  };\n\n  // Schedule process-daily-data call at 12 AM every day\n  useEffect(() => {\n    const midnight = new Date();\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\n\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\n    const timer = setTimeout(() => {\n      processDailyData();\n    }, delay);\n    return () => clearTimeout(timer); // Clean up timer\n  }, [driverId]);\n\n  // Process daily data at midnight by calling the backend\n  const processDailyData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\n        driver_id: driverId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Daily data processed', response.data);\n    } catch (err) {\n      console.error('Error processing daily data', err);\n    }\n  };\n  const chartData = {\n    labels: gpsData.map((_, index) => `T${index}`),\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: performanceData.speed,\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: performanceData.acceleration,\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: performanceData.jerk,\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [51.505, -0.09],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData.speed.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData.acceleration.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData.jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", route.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"CXWA1VbK16JwkzqkEC+jsZZfzqk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","axios","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","isMockMode","setIsMockMode","fetchData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","interval","setInterval","sendMockGpsData","getRealGpsData","clearInterval","mockGpsData","generateMockGpsData","sendGpsDataToBackend","navigator","geolocation","watchPosition","position","realGpsData","lat","coords","latitude","lng","longitude","timestamp","Date","now","message","enableHighAccuracy","gpsDataBatch","post","gps_data","map","dataPoint","Latitude","Longitude","Timestamp","Speed","gps","performance","point","mockRoute","Math","floor","random","length","midnight","setHours","delay","getTime","timer","setTimeout","processDailyData","clearTimeout","console","log","chartData","labels","_","index","datasets","label","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","slice","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Importing necessary Chart.js components\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMockMode, setIsMockMode] = useState(true); // Mock GPS for testing\r\n\r\n  // Fetch driver data (driver_id) from the backend using JWT token\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Use effect to handle real-time GPS tracking (mock or real) every 5 seconds\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const interval = setInterval(() => {\r\n        if (isMockMode) {\r\n          sendMockGpsData(); // Mock GPS data for testing\r\n        } else {\r\n          getRealGpsData(); // Real GPS for mobile devices\r\n        }\r\n      }, 5000); // Every 5 seconds\r\n\r\n      return () => clearInterval(interval); // Cleanup interval\r\n    }\r\n  }, [driverId, isMockMode]);\r\n\r\n  // Send mock GPS data to the backend if speed > 5 km/h\r\n  const sendMockGpsData = async () => {\r\n    const mockGpsData = generateMockGpsData();\r\n    if (mockGpsData.speed > 5) {\r\n      sendGpsDataToBackend([mockGpsData]);\r\n    }\r\n  };\r\n\r\n  // Get real GPS data and send to backend when speed > 5 km/h\r\n  const getRealGpsData = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(\r\n        async (position) => {\r\n          const realGpsData = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n            timestamp: Date.now(),\r\n            speed: position.coords.speed ? position.coords.speed * 3.6 : 0, // Convert to km/h\r\n          };\r\n          if (realGpsData.speed > 5) {\r\n            sendGpsDataToBackend([realGpsData]);\r\n          }\r\n        },\r\n        (err) => setError('Error getting real GPS data: ' + err.message),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  // Send the batched GPS data to the backend\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/record-telematics',\r\n        {\r\n          driver_id: driverId,\r\n          gps_data: gpsDataBatch.map((dataPoint) => ({\r\n            Latitude: dataPoint.lat,  // Ensure the correct column names\r\n            Longitude: dataPoint.lng, // Ensure the correct column names\r\n            Timestamp: dataPoint.timestamp,\r\n            Speed: dataPoint.speed,\r\n          })),\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Update GPS data and performance data on successful response\r\n      const gps = response.data.gps_data;\r\n      const performance = response.data.performance;\r\n\r\n      setGpsData(gps);\r\n      setRoute(gps.map((point) => [point.lat, point.lng]));\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      setError('Error sending GPS data');\r\n    }\r\n  };\r\n\r\n  // Generate mock GPS data for testing purposes\r\n  const generateMockGpsData = () => {\r\n    const mockRoute = [\r\n      { lat: 51.505, lng: -0.09, timestamp: Date.now(), speed: 10 }, // 10 km/h\r\n      { lat: 51.506, lng: -0.08, timestamp: Date.now() + 5000, speed: 15 }, // 15 km/h\r\n      { lat: 51.507, lng: -0.07, timestamp: Date.now() + 10000, speed: 0 }, // Stopped\r\n    ];\r\n    return mockRoute[Math.floor(Math.random() * mockRoute.length)];\r\n  };\r\n\r\n  // Schedule process-daily-data call at 12 AM every day\r\n  useEffect(() => {\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\r\n\r\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\r\n    const timer = setTimeout(() => {\r\n      processDailyData();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer); // Clean up timer\r\n  }, [driverId]);\r\n\r\n  // Process daily data at midnight by calling the backend\r\n  const processDailyData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/process-daily-data',\r\n        {\r\n          driver_id: driverId,\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n      console.log('Daily data processed', response.data);\r\n    } catch (err) {\r\n      console.error('Error processing daily data', err);\r\n    }\r\n  };\r\n\r\n  const chartData = {\r\n    labels: gpsData.map((_, index) => `T${index}`),\r\n    datasets: [\r\n      { label: 'Speed (m/s)', data: performanceData.speed, borderColor: 'rgba(75,192,192,1)' },\r\n      { label: 'Acceleration (m/s²)', data: performanceData.acceleration, borderColor: '#FF6384' },\r\n      { label: 'Jerk (m/s³)', data: performanceData.jerk, borderColor: '#36A2EB' },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[51.505, -0.09]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData.speed.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData.acceleration.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData.jerk.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route.length}\r\n        </div>\r\n      </div>\r\n      <DailyScorePopup driverId={driverId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}