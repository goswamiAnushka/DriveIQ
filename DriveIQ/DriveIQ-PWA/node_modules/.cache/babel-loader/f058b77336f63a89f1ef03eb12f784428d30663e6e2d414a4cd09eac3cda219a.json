{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anush\\\\OneDrive\\\\Desktop\\\\minor project\\\\DriveIQ\\\\DriveIQ\\\\DriveIQ-PWA\\\\src\\\\components\\\\Dashboard\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\nimport './Dashboard.scss';\n\n// Importing necessary Chart.js components\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [gpsData, setGpsData] = useState([]);\n  const [route, setRoute] = useState([]);\n  const [performanceData, setPerformanceData] = useState({\n    speed: [],\n    acceleration: [],\n    jerk: []\n  });\n  const [driverId, setDriverId] = useState(null);\n  const [error, setError] = useState('');\n  const [isMockMode, setIsMockMode] = useState(true); // Mock GPS for testing\n\n  // Fetch driver data (driver_id) from the backend using JWT token\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/api/user-data', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setDriverId(response.data.driver_id);\n      } catch (err) {\n        setError('Error fetching user data');\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Use effect to handle real-time GPS tracking (mock or real) every 5 seconds\n  useEffect(() => {\n    if (driverId) {\n      const interval = setInterval(() => {\n        if (isMockMode) {\n          sendMockGpsData(); // Mock GPS data for testing\n        } else {\n          getRealGpsData(); // Real GPS for mobile devices\n        }\n      }, 5000); // Every 5 seconds\n\n      return () => clearInterval(interval); // Cleanup interval\n    }\n  }, [driverId, isMockMode]);\n\n  // Send mock GPS data to the backend (no speed is sent)\n  const sendMockGpsData = async () => {\n    const mockGpsData = generateMockGpsData();\n    sendGpsDataToBackend([mockGpsData]);\n  };\n\n  // Get real GPS data and send to backend (only lat, lng, and timestamp)\n  const getRealGpsData = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition(async position => {\n        const realGpsData = {\n          Latitude: position.coords.latitude,\n          Longitude: position.coords.longitude,\n          Time_Step: Date.now() // Numeric timestamp in milliseconds\n        };\n        sendGpsDataToBackend([realGpsData]);\n      }, err => setError('Error getting real GPS data: ' + err.message), {\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  };\n\n  // Send the GPS data (without speed) to the backend\n  const sendGpsDataToBackend = async gpsDataBatch => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/record-telematics', {\n        driver_id: driverId,\n        gps_data: gpsDataBatch.map(dataPoint => ({\n          Latitude: dataPoint.Latitude,\n          // Correct the field names\n          Longitude: dataPoint.Longitude,\n          // Correct the field names\n          Time_Step: dataPoint.Time_Step // Ensure timestamp is provided\n        }))\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Process the response from the backend (handle success)\n      const gps = response.data.gps_data;\n      const performance = response.data.performance;\n      setGpsData(gps);\n      setRoute(gps.map(point => [point.Latitude, point.Longitude])); // Ensure map uses correct column names\n      setPerformanceData({\n        speed: performance.speed,\n        acceleration: performance.acceleration,\n        jerk: performance.jerk\n      });\n    } catch (err) {\n      setError('Error sending GPS data: ' + err.message);\n    }\n  };\n\n  // Generate mock GPS data for testing purposes (exclude speed)\n  const generateMockGpsData = () => {\n    const mockRoute = [{\n      Latitude: 51.505,\n      Longitude: -0.09,\n      Time_Step: Date.now()\n    }, {\n      Latitude: 51.506,\n      Longitude: -0.08,\n      Time_Step: Date.now() + 5000\n    }, {\n      Latitude: 51.507,\n      Longitude: -0.07,\n      Time_Step: Date.now() + 10000\n    }];\n    return mockRoute[Math.floor(Math.random() * mockRoute.length)];\n  };\n\n  // Schedule process-daily-data call at 12 AM every day\n  useEffect(() => {\n    const midnight = new Date();\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\n\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\n    const timer = setTimeout(() => {\n      processDailyData();\n    }, delay);\n    return () => clearTimeout(timer); // Clean up timer\n  }, [driverId]);\n\n  // Process daily data at midnight by calling the backend\n  const processDailyData = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('http://localhost:5000/api/process-daily-data', {\n        driver_id: driverId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Daily data processed', response.data);\n    } catch (err) {\n      console.error('Error processing daily data', err);\n    }\n  };\n  const chartData = {\n    labels: gpsData.map((_, index) => `T${index}`),\n    datasets: [{\n      label: 'Speed (m/s)',\n      data: performanceData.speed,\n      borderColor: 'rgba(75,192,192,1)'\n    }, {\n      label: 'Acceleration (m/s²)',\n      data: performanceData.acceleration,\n      borderColor: '#FF6384'\n    }, {\n      label: 'Jerk (m/s³)',\n      data: performanceData.jerk,\n      borderColor: '#36A2EB'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Driver Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-section\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [51.505, -0.09],\n          zoom: 13,\n          className: \"map\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: route,\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaTachometerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), \" Speed: \", performanceData.speed.slice(-1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaBolt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), \" Acceleration: \", performanceData.acceleration.slice(-1), \" m/s\\xB2\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaCarCrash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), \" Jerk: \", performanceData.jerk.slice(-1), \" m/s\\xB3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-item\",\n        children: [/*#__PURE__*/_jsxDEV(FaMapMarkerAlt, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), \" Total Route Points: \", route.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DailyScorePopup, {\n      driverId: driverId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"CXWA1VbK16JwkzqkEC+jsZZfzqk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Line","axios","DailyScorePopup","FaTachometerAlt","FaBolt","FaCarCrash","FaMapMarkerAlt","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","gpsData","setGpsData","route","setRoute","performanceData","setPerformanceData","speed","acceleration","jerk","driverId","setDriverId","error","setError","isMockMode","setIsMockMode","fetchData","token","localStorage","getItem","response","get","headers","Authorization","data","driver_id","err","interval","setInterval","sendMockGpsData","getRealGpsData","clearInterval","mockGpsData","generateMockGpsData","sendGpsDataToBackend","navigator","geolocation","watchPosition","position","realGpsData","Latitude","coords","latitude","Longitude","longitude","Time_Step","Date","now","message","enableHighAccuracy","gpsDataBatch","post","gps_data","map","dataPoint","gps","performance","point","mockRoute","Math","floor","random","length","midnight","setHours","delay","getTime","timer","setTimeout","processDailyData","clearTimeout","console","log","chartData","labels","_","index","datasets","label","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","url","positions","color","slice","_c","$RefreshReg$"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/components/Dashboard/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Polyline } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport DailyScorePopup from '../DailyScorePopup/DailyScorePopup';\r\nimport { FaTachometerAlt, FaBolt, FaCarCrash, FaMapMarkerAlt } from 'react-icons/fa';\r\nimport './Dashboard.scss';\r\n\r\n// Importing necessary Chart.js components\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [gpsData, setGpsData] = useState([]);\r\n  const [route, setRoute] = useState([]);\r\n  const [performanceData, setPerformanceData] = useState({\r\n    speed: [],\r\n    acceleration: [],\r\n    jerk: [],\r\n  });\r\n  const [driverId, setDriverId] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [isMockMode, setIsMockMode] = useState(true); // Mock GPS for testing\r\n\r\n  // Fetch driver data (driver_id) from the backend using JWT token\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5000/api/user-data', {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setDriverId(response.data.driver_id);\r\n      } catch (err) {\r\n        setError('Error fetching user data');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Use effect to handle real-time GPS tracking (mock or real) every 5 seconds\r\n  useEffect(() => {\r\n    if (driverId) {\r\n      const interval = setInterval(() => {\r\n        if (isMockMode) {\r\n          sendMockGpsData(); // Mock GPS data for testing\r\n        } else {\r\n          getRealGpsData(); // Real GPS for mobile devices\r\n        }\r\n      }, 5000); // Every 5 seconds\r\n\r\n      return () => clearInterval(interval); // Cleanup interval\r\n    }\r\n  }, [driverId, isMockMode]);\r\n\r\n  // Send mock GPS data to the backend (no speed is sent)\r\n  const sendMockGpsData = async () => {\r\n    const mockGpsData = generateMockGpsData();\r\n    sendGpsDataToBackend([mockGpsData]);\r\n  };\r\n\r\n  // Get real GPS data and send to backend (only lat, lng, and timestamp)\r\n  const getRealGpsData = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(\r\n        async (position) => {\r\n          const realGpsData = {\r\n            Latitude: position.coords.latitude,\r\n            Longitude: position.coords.longitude,\r\n            Time_Step: Date.now(),  // Numeric timestamp in milliseconds\r\n          };\r\n          sendGpsDataToBackend([realGpsData]);\r\n        },\r\n        (err) => setError('Error getting real GPS data: ' + err.message),\r\n        { enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by this browser.');\r\n    }\r\n  };\r\n\r\n  // Send the GPS data (without speed) to the backend\r\n  const sendGpsDataToBackend = async (gpsDataBatch) => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/record-telematics',\r\n        {\r\n          driver_id: driverId,\r\n          gps_data: gpsDataBatch.map((dataPoint) => ({\r\n            Latitude: dataPoint.Latitude,  // Correct the field names\r\n            Longitude: dataPoint.Longitude, // Correct the field names\r\n            Time_Step: dataPoint.Time_Step,  // Ensure timestamp is provided\r\n          })),\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      // Process the response from the backend (handle success)\r\n      const gps = response.data.gps_data;\r\n      const performance = response.data.performance;\r\n\r\n      setGpsData(gps);\r\n      setRoute(gps.map((point) => [point.Latitude, point.Longitude]));  // Ensure map uses correct column names\r\n      setPerformanceData({\r\n        speed: performance.speed,\r\n        acceleration: performance.acceleration,\r\n        jerk: performance.jerk,\r\n      });\r\n    } catch (err) {\r\n      setError('Error sending GPS data: ' + err.message);\r\n    }\r\n  };\r\n\r\n  // Generate mock GPS data for testing purposes (exclude speed)\r\n  const generateMockGpsData = () => {\r\n    const mockRoute = [\r\n      { Latitude: 51.505, Longitude: -0.09, Time_Step: Date.now() }, \r\n      { Latitude: 51.506, Longitude: -0.08, Time_Step: Date.now() + 5000 }, \r\n      { Latitude: 51.507, Longitude: -0.07, Time_Step: Date.now() + 10000 }, \r\n    ];\r\n    return mockRoute[Math.floor(Math.random() * mockRoute.length)];\r\n  };\r\n\r\n  // Schedule process-daily-data call at 12 AM every day\r\n  useEffect(() => {\r\n    const midnight = new Date();\r\n    midnight.setHours(24, 0, 0, 0); // Set time to 12 AM midnight\r\n\r\n    const delay = midnight.getTime() - Date.now(); // Time until next midnight\r\n    const timer = setTimeout(() => {\r\n      processDailyData();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer); // Clean up timer\r\n  }, [driverId]);\r\n\r\n  // Process daily data at midnight by calling the backend\r\n  const processDailyData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/process-daily-data',\r\n        {\r\n          driver_id: driverId,\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n      console.log('Daily data processed', response.data);\r\n    } catch (err) {\r\n      console.error('Error processing daily data', err);\r\n    }\r\n  };\r\n\r\n  const chartData = {\r\n    labels: gpsData.map((_, index) => `T${index}`),\r\n    datasets: [\r\n      { label: 'Speed (m/s)', data: performanceData.speed, borderColor: 'rgba(75,192,192,1)' },\r\n      { label: 'Acceleration (m/s²)', data: performanceData.acceleration, borderColor: '#FF6384' },\r\n      { label: 'Jerk (m/s³)', data: performanceData.jerk, borderColor: '#36A2EB' },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <h2>Driver Dashboard</h2>\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div className=\"dashboard-content\">\r\n        <div className=\"map-section\">\r\n          <MapContainer center={[51.505, -0.09]} zoom={13} className=\"map\">\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n            <Polyline positions={route} color=\"blue\" />\r\n          </MapContainer>\r\n        </div>\r\n        <div className=\"graph-section\">\r\n          <Line data={chartData} />\r\n        </div>\r\n      </div>\r\n      <div className=\"icon-section\">\r\n        <div className=\"icon-item\">\r\n          <FaTachometerAlt /> Speed: {performanceData.speed.slice(-1)} m/s\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaBolt /> Acceleration: {performanceData.acceleration.slice(-1)} m/s²\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaCarCrash /> Jerk: {performanceData.jerk.slice(-1)} m/s³\r\n        </div>\r\n        <div className=\"icon-item\">\r\n          <FaMapMarkerAlt /> Total Route Points: {route.length}\r\n        </div>\r\n      </div>\r\n      <DailyScorePopup driverId={driverId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}