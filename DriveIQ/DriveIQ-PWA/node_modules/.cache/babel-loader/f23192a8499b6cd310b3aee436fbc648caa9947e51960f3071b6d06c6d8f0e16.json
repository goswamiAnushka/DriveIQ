{"ast":null,"code":"// src/utils/geolocation.js\nimport api from './api';\n\n// Helper to send GPS batches to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Helper to calculate realistic time steps based on distance and speed\nconst calculateTimeStep = (distanceInMeters, speedInMps) => {\n  // Time (in seconds) = Distance / Speed\n  return Math.floor(distanceInMeters / speedInMps);\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Earth's radius in meters\n  const lat1 = point1.latitude * Math.PI / 180;\n  const lat2 = point2.latitude * Math.PI / 180;\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};\n\n// ** Updated Mock GPS Generation: Simulate a journey from A to B, B to C, back to A **\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const speedInMps = 10; // Approximate average speed (10 meters per second, ~36 km/h)\n\n  const journey = [\n  // Home (A) to Office (B)\n  {\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  },\n  // Home (Start)\n  {\n    Latitude: 26.6348,\n    Longitude: 92.8016\n  },\n  // On the way to office\n  {\n    Latitude: 26.6370,\n    Longitude: 92.8050\n  },\n  // Near office\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Office (Stop)\n\n  // Office (B) to Market (C)\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Office start again\n  {\n    Latitude: 26.6402,\n    Longitude: 92.8102\n  },\n  // On the way to market\n  {\n    Latitude: 26.6415,\n    Longitude: 92.8120\n  },\n  // Traffic light (Stop)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Market (Stop)\n\n  // Market (C) back to Home (A)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Start from market\n  {\n    Latitude: 26.6422,\n    Longitude: 92.8108\n  },\n  // On the way home\n  {\n    Latitude: 26.6405,\n    Longitude: 92.8052\n  },\n  // Traffic stop again\n  {\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  } // Home (End)\n  ];\n  let batch = [];\n  let lastPoint = journey[0];\n  let currentTimeStep = 0;\n  for (let i = 1; i < journey.length; i++) {\n    const currentPoint = journey[i];\n\n    // Calculate distance between the current point and the last point\n    const distance = calculateDistance(lastPoint, currentPoint);\n\n    // Calculate time step based on distance and speed\n    const timeStep = calculateTimeStep(distance, speedInMps);\n    currentTimeStep += timeStep;\n\n    // Construct GPS data point\n    const gpsDataPoint = {\n      Latitude: currentPoint.Latitude,\n      Longitude: currentPoint.Longitude,\n      Time_Step: currentTimeStep\n    };\n\n    // Add the point to the batch\n    batch.push(gpsDataPoint);\n    setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n\n    // Send batch of data every 4 points or at the end of the journey\n    if (batch.length === 4 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId);\n      batch = []; // Reset batch after sending\n    }\n\n    // Update last point for the next iteration\n    lastPoint = currentPoint;\n  }\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","calculateTimeStep","distanceInMeters","speedInMps","Math","floor","calculateDistance","point1","point2","R","lat1","latitude","PI","lat2","deltaLat","deltaLon","longitude","a","sin","cos","c","atan2","sqrt","mockGPSData","setGpsData","journey","Latitude","Longitude","lastPoint","currentTimeStep","i","length","currentPoint","distance","timeStep","gpsDataPoint","Time_Step","push","prevGpsData"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\nimport api from './api';\r\n\r\n// Helper to send GPS batches to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token'); // Get JWT token\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Helper to calculate realistic time steps based on distance and speed\r\nconst calculateTimeStep = (distanceInMeters, speedInMps) => {\r\n  // Time (in seconds) = Distance / Speed\r\n  return Math.floor(distanceInMeters / speedInMps);\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3; // Earth's radius in meters\r\n  const lat1 = point1.latitude * Math.PI / 180;\r\n  const lat2 = point2.latitude * Math.PI / 180;\r\n  const deltaLat = (point2.latitude - point1.latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.longitude - point1.longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c; // Returns the distance in meters\r\n};\r\n\r\n// ** Updated Mock GPS Generation: Simulate a journey from A to B, B to C, back to A **\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const speedInMps = 10; // Approximate average speed (10 meters per second, ~36 km/h)\r\n\r\n  const journey = [\r\n    // Home (A) to Office (B)\r\n    { Latitude: 26.6338, Longitude: 92.8006 }, // Home (Start)\r\n    { Latitude: 26.6348, Longitude: 92.8016 }, // On the way to office\r\n    { Latitude: 26.6370, Longitude: 92.8050 }, // Near office\r\n    { Latitude: 26.6382, Longitude: 92.8074 }, // Office (Stop)\r\n\r\n    // Office (B) to Market (C)\r\n    { Latitude: 26.6382, Longitude: 92.8074 }, // Office start again\r\n    { Latitude: 26.6402, Longitude: 92.8102 }, // On the way to market\r\n    { Latitude: 26.6415, Longitude: 92.8120 }, // Traffic light (Stop)\r\n    { Latitude: 26.6451, Longitude: 92.8185 }, // Market (Stop)\r\n\r\n    // Market (C) back to Home (A)\r\n    { Latitude: 26.6451, Longitude: 92.8185 }, // Start from market\r\n    { Latitude: 26.6422, Longitude: 92.8108 }, // On the way home\r\n    { Latitude: 26.6405, Longitude: 92.8052 }, // Traffic stop again\r\n    { Latitude: 26.6338, Longitude: 92.8006 }, // Home (End)\r\n  ];\r\n\r\n  let batch = [];\r\n  let lastPoint = journey[0];\r\n  let currentTimeStep = 0;\r\n\r\n  for (let i = 1; i < journey.length; i++) {\r\n    const currentPoint = journey[i];\r\n\r\n    // Calculate distance between the current point and the last point\r\n    const distance = calculateDistance(lastPoint, currentPoint);\r\n\r\n    // Calculate time step based on distance and speed\r\n    const timeStep = calculateTimeStep(distance, speedInMps);\r\n    currentTimeStep += timeStep;\r\n\r\n    // Construct GPS data point\r\n    const gpsDataPoint = {\r\n      Latitude: currentPoint.Latitude,\r\n      Longitude: currentPoint.Longitude,\r\n      Time_Step: currentTimeStep,\r\n    };\r\n\r\n    // Add the point to the batch\r\n    batch.push(gpsDataPoint);\r\n    setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n\r\n    // Send batch of data every 4 points or at the end of the journey\r\n    if (batch.length === 4 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);\r\n      batch = []; // Reset batch after sending\r\n    }\r\n\r\n    // Update last point for the next iteration\r\n    lastPoint = currentPoint;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}