{"ast":null,"code":"import api from './api'; // Axios instance\n\n// Helper to send a batch of GPS data to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    if (!token) {\n      console.error('No token found');\n      return;\n    }\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch // Send the batch data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status === 200) {\n      console.log('Batch successfully sent:', response.data);\n    } else {\n      console.error('Error sending GPS data. Response:', response);\n    }\n  } catch (error) {\n    console.error('Error sending GPS data:', error.response || error.message || error);\n  }\n};\n\n// Function to generate random time steps between 300 and 900 seconds (5 to 15 minutes)\nconst generateRandomTimeStep = () => {\n  return Math.floor(Math.random() * (900 - 300 + 1)) + 300;\n};\n\n// Function to generate random lat/long points near a base point\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\n  const randomOffset = () => (Math.random() - 0.5) * distance; // Generate small random offset for lat/lng\n  return {\n    Latitude: baseLat + randomOffset(),\n    Longitude: baseLng + randomOffset()\n  };\n};\n\n// Function to calculate speed in km/h between two GPS points based on distance and time step\nconst calculateSpeed = (point1, point2, timeStep) => {\n  const distance = calculateDistance(point1, point2); // Distance in meters\n  return distance / timeStep * 3.6; // Convert m/s to km/h\n};\n\n// ** Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const basePoints = [{\n    Latitude: 26.6338,\n    Longitude: 92.8006\n  },\n  // Point A (Home)\n  {\n    Latitude: 26.6382,\n    Longitude: 92.8074\n  },\n  // Point B (Office)\n  {\n    Latitude: 26.6451,\n    Longitude: 92.8185\n  },\n  // Point C (Market)\n  {\n    Latitude: 26.6492,\n    Longitude: 92.8220\n  } // Point D (Pharmacy)\n  ];\n  const journey = [];\n\n  // Generate random points between A -> B -> C -> D -> A with time steps\n  for (let i = 0; i < basePoints.length; i++) {\n    const nextPoint = basePoints[(i + 1) % basePoints.length]; // Loop back to A after D\n    const currentPoint = basePoints[i];\n    let timeStep = generateRandomTimeStep();\n\n    // Create 2-3 random points between each major stop\n    for (let j = 0; j < 2; j++) {\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\n      const speed = calculateSpeed(currentPoint, randomLatLng, timeStep);\n      journey.push({\n        ...randomLatLng,\n        Time_Step: timeStep,\n        Speed: speed\n      });\n      setGpsData(prev => [...prev, {\n        ...randomLatLng,\n        Time_Step: timeStep,\n        Speed: speed\n      }]);\n      timeStep += generateRandomTimeStep();\n    }\n\n    // Add the final point at the destination (B, C, D, A)\n    const finalSpeed = calculateSpeed(currentPoint, nextPoint, timeStep);\n    journey.push({\n      ...nextPoint,\n      Time_Step: timeStep,\n      Speed: finalSpeed\n    });\n    setGpsData(prev => [...prev, {\n      ...nextPoint,\n      Time_Step: timeStep,\n      Speed: finalSpeed\n    }]);\n  }\n\n  // Send GPS data in 5-6 batches for the entire day\n  let batch = [];\n  for (let i = 0; i < journey.length; i++) {\n    batch.push(journey[i]);\n\n    // Send a batch after every 4 points or at the end\n    if (batch.length === 4 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId);\n      batch = [];\n    }\n  }\n};\n\n// Helper function to calculate distance between two GPS points (in meters)\nconst calculateDistance = (point1, point2) => {\n  const R = 6371e3; // Radius of the earth in meters\n  const lat1 = point1.Latitude * Math.PI / 180;\n  const lat2 = point2.Latitude * Math.PI / 180;\n  const deltaLat = (point2.Latitude - point1.Latitude) * Math.PI / 180;\n  const deltaLon = (point2.Longitude - point1.Longitude) * Math.PI / 180;\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Returns the distance in meters\n};\n\n// Helper function to calculate time step between two timestamps (in seconds)\nconst calculateTimeStep = (startTime, endTime) => {\n  return Math.floor((endTime - startTime) / 1000); // Return difference in seconds\n};\n\n// ** Real GPS Tracking: Detect Movement and Batch Data **\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n\n    // Time step between current and last recorded GPS point\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep\n    };\n\n    // If there's significant movement, record and batch the data\n    if (lastPosition) {\n      const distanceMoved = calculateDistance(lastPosition, {\n        Latitude: latitude,\n        Longitude: longitude\n      });\n      if (distanceMoved > 10) {\n        // Only track if more than 10m movement\n        gpsBatch.push(gpsDataPoint);\n        setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n      }\n    } else {\n      // First point, just push to the batch\n      gpsBatch.push(gpsDataPoint);\n    }\n\n    // Send batch every 5 points or at significant stop\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      // Send on stop or batch size\n      sendGPSBatchToBackend(gpsBatch, driverId);\n      gpsBatch.length = 0;\n    }\n    lastPosition = {\n      Latitude: latitude,\n      Longitude: longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  const options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","console","error","response","post","driver_id","gps_data","headers","Authorization","status","log","data","message","generateRandomTimeStep","Math","floor","random","generateRandomLatLng","baseLat","baseLng","distance","randomOffset","Latitude","Longitude","calculateSpeed","point1","point2","timeStep","calculateDistance","mockGPSData","setGpsData","basePoints","journey","i","length","nextPoint","currentPoint","j","randomLatLng","speed","push","Time_Step","Speed","prev","finalSpeed","R","lat1","PI","lat2","deltaLat","deltaLon","a","sin","cos","c","atan2","sqrt","calculateTimeStep","startTime","endTime","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","gpsDataPoint","distanceMoved","prevGpsData","onError","options","enableHighAccuracy","timeout","maximumAge","watchPosition"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["import api from './api';  // Axios instance\r\n\r\n// Helper to send a batch of GPS data to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');  // Get JWT token\r\n    if (!token) {\r\n      console.error('No token found');\r\n      return;\r\n    }\r\n\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,  // Send the batch data\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      console.log('Batch successfully sent:', response.data);\r\n    } else {\r\n      console.error('Error sending GPS data. Response:', response);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error.response || error.message || error);\r\n  }\r\n};\r\n\r\n// Function to generate random time steps between 300 and 900 seconds (5 to 15 minutes)\r\nconst generateRandomTimeStep = () => {\r\n  return Math.floor(Math.random() * (900 - 300 + 1)) + 300;\r\n};\r\n\r\n// Function to generate random lat/long points near a base point\r\nconst generateRandomLatLng = (baseLat, baseLng, distance = 0.01) => {\r\n  const randomOffset = () => (Math.random() - 0.5) * distance;  // Generate small random offset for lat/lng\r\n  return {\r\n    Latitude: baseLat + randomOffset(),\r\n    Longitude: baseLng + randomOffset(),\r\n  };\r\n};\r\n\r\n// Function to calculate speed in km/h between two GPS points based on distance and time step\r\nconst calculateSpeed = (point1, point2, timeStep) => {\r\n  const distance = calculateDistance(point1, point2);  // Distance in meters\r\n  return (distance / timeStep) * 3.6;  // Convert m/s to km/h\r\n};\r\n\r\n// ** Mock GPS Generation: Create Realistic Routes and Break into Smart Batches **\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const basePoints = [\r\n    { Latitude: 26.6338, Longitude: 92.8006 },  // Point A (Home)\r\n    { Latitude: 26.6382, Longitude: 92.8074 },  // Point B (Office)\r\n    { Latitude: 26.6451, Longitude: 92.8185 },  // Point C (Market)\r\n    { Latitude: 26.6492, Longitude: 92.8220 }   // Point D (Pharmacy)\r\n  ];\r\n\r\n  const journey = [];\r\n\r\n  // Generate random points between A -> B -> C -> D -> A with time steps\r\n  for (let i = 0; i < basePoints.length; i++) {\r\n    const nextPoint = basePoints[(i + 1) % basePoints.length];  // Loop back to A after D\r\n    const currentPoint = basePoints[i];\r\n    let timeStep = generateRandomTimeStep();\r\n\r\n    // Create 2-3 random points between each major stop\r\n    for (let j = 0; j < 2; j++) {\r\n      const randomLatLng = generateRandomLatLng(currentPoint.Latitude, currentPoint.Longitude);\r\n      const speed = calculateSpeed(currentPoint, randomLatLng, timeStep);\r\n      journey.push({ ...randomLatLng, Time_Step: timeStep, Speed: speed });\r\n      setGpsData(prev => [...prev, { ...randomLatLng, Time_Step: timeStep, Speed: speed }]);\r\n\r\n      timeStep += generateRandomTimeStep();\r\n    }\r\n\r\n    // Add the final point at the destination (B, C, D, A)\r\n    const finalSpeed = calculateSpeed(currentPoint, nextPoint, timeStep);\r\n    journey.push({ ...nextPoint, Time_Step: timeStep, Speed: finalSpeed });\r\n    setGpsData(prev => [...prev, { ...nextPoint, Time_Step: timeStep, Speed: finalSpeed }]);\r\n  }\r\n\r\n  // Send GPS data in 5-6 batches for the entire day\r\n  let batch = [];\r\n  for (let i = 0; i < journey.length; i++) {\r\n    batch.push(journey[i]);\r\n\r\n    // Send a batch after every 4 points or at the end\r\n    if (batch.length === 4 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);\r\n      batch = [];\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to calculate distance between two GPS points (in meters)\r\nconst calculateDistance = (point1, point2) => {\r\n  const R = 6371e3;  // Radius of the earth in meters\r\n  const lat1 = point1.Latitude * Math.PI / 180;\r\n  const lat2 = point2.Latitude * Math.PI / 180;\r\n  const deltaLat = (point2.Latitude - point1.Latitude) * Math.PI / 180;\r\n  const deltaLon = (point2.Longitude - point1.Longitude) * Math.PI / 180;\r\n\r\n  const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\r\n            Math.cos(lat1) * Math.cos(lat2) *\r\n            Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  return R * c;  // Returns the distance in meters\r\n};\r\n\r\n// Helper function to calculate time step between two timestamps (in seconds)\r\nconst calculateTimeStep = (startTime, endTime) => {\r\n  return Math.floor((endTime - startTime) / 1000);  // Return difference in seconds\r\n};\r\n\r\n// ** Real GPS Tracking: Detect Movement and Batch Data **\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n\r\n    // Time step between current and last recorded GPS point\r\n    const timeStep = lastPosition ? calculateTimeStep(startTime, timestamp) : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep,\r\n    };\r\n\r\n    // If there's significant movement, record and batch the data\r\n    if (lastPosition) {\r\n      const distanceMoved = calculateDistance(lastPosition, { Latitude: latitude, Longitude: longitude });\r\n\r\n      if (distanceMoved > 10) {  // Only track if more than 10m movement\r\n        gpsBatch.push(gpsDataPoint);\r\n        setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\r\n      }\r\n    } else {\r\n      // First point, just push to the batch\r\n      gpsBatch.push(gpsDataPoint);\r\n    }\r\n\r\n    // Send batch every 5 points or at significant stop\r\n    if (gpsBatch.length >= 5 || timeStep > 300) {  // Send on stop or batch size\r\n      sendGPSBatchToBackend(gpsBatch, driverId);\r\n      gpsBatch.length = 0;\r\n    }\r\n\r\n    lastPosition = { Latitude: latitude, Longitude: longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, options);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}