{"ast":null,"code":"// src/utils/geolocation.js\n\n// Generate simulated routes with realistic speed profiles (busy road, highway, etc.)\nexport const generateSimulatedRoute = (driverId, batchSize) => {\n  const gpsBatches = [];\n  let lat = 26.6337; // Starting latitude (home)\n  let lon = 92.7926; // Starting longitude (home)\n  const homeLat = lat; // Store home location to return later\n  const homeLon = lon;\n  let timeStep = 0;\n  let speed = 0; // Initial speed (m/s)\n\n  const citySpeedRange = {\n    min: 8.33,\n    max: 11.11\n  }; // 30-40 km/h in m/s (city driving)\n  const highwaySpeedRange = {\n    min: 13.88,\n    max: 16.67\n  }; // 50-60 km/h in m/s (highway driving)\n\n  // Determine the batch segments for city vs highway\n  const cityBatches = Math.floor(batchSize * 0.6); // 60% city driving\n  const highwayBatches = batchSize - cityBatches; // 40% highway driving\n\n  for (let i = 0; i < batchSize; i++) {\n    const batch = [];\n    for (let j = 0; j < 10; j++) {\n      timeStep += 60;\n\n      // Simulate different speed profiles for city and highway\n      if (i < cityBatches) {\n        // Simulate city driving with lower speeds\n        speed = citySpeedRange.min + Math.random() * (citySpeedRange.max - citySpeedRange.min);\n      } else {\n        // Simulate highway driving with higher speeds\n        speed = highwaySpeedRange.min + Math.random() * (highwaySpeedRange.max - highwaySpeedRange.min);\n      }\n\n      // Simulate gradual movement\n      if (i < batchSize / 2) {\n        // Moving away from home\n        lat += Math.random() * 0.001;\n        lon += Math.random() * 0.001;\n      } else {\n        // Returning toward home\n        lat -= (lat - homeLat) / (batchSize - i);\n        lon -= (lon - homeLon) / (batchSize - i);\n      }\n\n      // Push the GPS data point for this batch\n      batch.push({\n        Latitude: lat,\n        Longitude: lon,\n        Time_Step: timeStep,\n        Speed: speed * 3.6,\n        // Convert speed to km/h for backend compatibility\n        Acceleration: Math.random() * 2 - 1,\n        // Simulate acceleration between -1 and 1 m/s²\n        Jerk: Math.random() * 0.2 - 0.1 // Simulate jerk between -0.1 and 0.1 m/s³\n      });\n    }\n\n    // Add batch to the list of batches\n    gpsBatches.push({\n      driver_id: driverId,\n      gps_data: batch\n    });\n  }\n  return gpsBatches;\n};","map":{"version":3,"names":["generateSimulatedRoute","driverId","batchSize","gpsBatches","lat","lon","homeLat","homeLon","timeStep","speed","citySpeedRange","min","max","highwaySpeedRange","cityBatches","Math","floor","highwayBatches","i","batch","j","random","push","Latitude","Longitude","Time_Step","Speed","Acceleration","Jerk","driver_id","gps_data"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\n\r\n// Generate simulated routes with realistic speed profiles (busy road, highway, etc.)\r\nexport const generateSimulatedRoute = (driverId, batchSize) => {\r\n  const gpsBatches = [];\r\n  let lat = 26.6337; // Starting latitude (home)\r\n  let lon = 92.7926; // Starting longitude (home)\r\n  const homeLat = lat; // Store home location to return later\r\n  const homeLon = lon;\r\n  let timeStep = 0;\r\n  let speed = 0; // Initial speed (m/s)\r\n  \r\n  const citySpeedRange = { min: 8.33, max: 11.11 }; // 30-40 km/h in m/s (city driving)\r\n  const highwaySpeedRange = { min: 13.88, max: 16.67 }; // 50-60 km/h in m/s (highway driving)\r\n  \r\n  // Determine the batch segments for city vs highway\r\n  const cityBatches = Math.floor(batchSize * 0.6); // 60% city driving\r\n  const highwayBatches = batchSize - cityBatches; // 40% highway driving\r\n\r\n  for (let i = 0; i < batchSize; i++) {\r\n    const batch = [];\r\n    for (let j = 0; j < 10; j++) {\r\n      timeStep += 60;\r\n\r\n      // Simulate different speed profiles for city and highway\r\n      if (i < cityBatches) {\r\n        // Simulate city driving with lower speeds\r\n        speed = citySpeedRange.min + Math.random() * (citySpeedRange.max - citySpeedRange.min);\r\n      } else {\r\n        // Simulate highway driving with higher speeds\r\n        speed = highwaySpeedRange.min + Math.random() * (highwaySpeedRange.max - highwaySpeedRange.min);\r\n      }\r\n\r\n      // Simulate gradual movement\r\n      if (i < batchSize / 2) {\r\n        // Moving away from home\r\n        lat += Math.random() * 0.001;\r\n        lon += Math.random() * 0.001;\r\n      } else {\r\n        // Returning toward home\r\n        lat -= (lat - homeLat) / (batchSize - i);\r\n        lon -= (lon - homeLon) / (batchSize - i);\r\n      }\r\n\r\n      // Push the GPS data point for this batch\r\n      batch.push({\r\n        Latitude: lat,\r\n        Longitude: lon,\r\n        Time_Step: timeStep,\r\n        Speed: speed * 3.6, // Convert speed to km/h for backend compatibility\r\n        Acceleration: Math.random() * 2 - 1, // Simulate acceleration between -1 and 1 m/s²\r\n        Jerk: Math.random() * 0.2 - 0.1 // Simulate jerk between -0.1 and 0.1 m/s³\r\n      });\r\n    }\r\n\r\n    // Add batch to the list of batches\r\n    gpsBatches.push({ driver_id: driverId, gps_data: batch });\r\n  }\r\n\r\n  return gpsBatches;\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,sBAAsB,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAAK;EAC7D,MAAMC,UAAU,GAAG,EAAE;EACrB,IAAIC,GAAG,GAAG,OAAO,CAAC,CAAC;EACnB,IAAIC,GAAG,GAAG,OAAO,CAAC,CAAC;EACnB,MAAMC,OAAO,GAAGF,GAAG,CAAC,CAAC;EACrB,MAAMG,OAAO,GAAGF,GAAG;EACnB,IAAIG,QAAQ,GAAG,CAAC;EAChB,IAAIC,KAAK,GAAG,CAAC,CAAC,CAAC;;EAEf,MAAMC,cAAc,GAAG;IAAEC,GAAG,EAAE,IAAI;IAAEC,GAAG,EAAE;EAAM,CAAC,CAAC,CAAC;EAClD,MAAMC,iBAAiB,GAAG;IAAEF,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAM,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACd,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC;EACjD,MAAMe,cAAc,GAAGf,SAAS,GAAGY,WAAW,CAAC,CAAC;;EAEhD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,SAAS,EAAEgB,CAAC,EAAE,EAAE;IAClC,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BZ,QAAQ,IAAI,EAAE;;MAEd;MACA,IAAIU,CAAC,GAAGJ,WAAW,EAAE;QACnB;QACAL,KAAK,GAAGC,cAAc,CAACC,GAAG,GAAGI,IAAI,CAACM,MAAM,CAAC,CAAC,IAAIX,cAAc,CAACE,GAAG,GAAGF,cAAc,CAACC,GAAG,CAAC;MACxF,CAAC,MAAM;QACL;QACAF,KAAK,GAAGI,iBAAiB,CAACF,GAAG,GAAGI,IAAI,CAACM,MAAM,CAAC,CAAC,IAAIR,iBAAiB,CAACD,GAAG,GAAGC,iBAAiB,CAACF,GAAG,CAAC;MACjG;;MAEA;MACA,IAAIO,CAAC,GAAGhB,SAAS,GAAG,CAAC,EAAE;QACrB;QACAE,GAAG,IAAIW,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,KAAK;QAC5BhB,GAAG,IAAIU,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,KAAK;MAC9B,CAAC,MAAM;QACL;QACAjB,GAAG,IAAI,CAACA,GAAG,GAAGE,OAAO,KAAKJ,SAAS,GAAGgB,CAAC,CAAC;QACxCb,GAAG,IAAI,CAACA,GAAG,GAAGE,OAAO,KAAKL,SAAS,GAAGgB,CAAC,CAAC;MAC1C;;MAEA;MACAC,KAAK,CAACG,IAAI,CAAC;QACTC,QAAQ,EAAEnB,GAAG;QACboB,SAAS,EAAEnB,GAAG;QACdoB,SAAS,EAAEjB,QAAQ;QACnBkB,KAAK,EAAEjB,KAAK,GAAG,GAAG;QAAE;QACpBkB,YAAY,EAAEZ,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAAE;QACrCO,IAAI,EAAEb,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;MAClC,CAAC,CAAC;IACJ;;IAEA;IACAlB,UAAU,CAACmB,IAAI,CAAC;MAAEO,SAAS,EAAE5B,QAAQ;MAAE6B,QAAQ,EAAEX;IAAM,CAAC,CAAC;EAC3D;EAEA,OAAOhB,UAAU;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}