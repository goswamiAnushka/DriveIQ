{"ast":null,"code":"// src/utils/geolocation.js\nimport api from './api'; // Axios instance\n\n// Helper to send a batch of GPS data to the backend\nconst sendGPSBatchToBackend = async (batch, driverId) => {\n  try {\n    const token = localStorage.getItem('token'); // Get JWT token\n    const response = await api.post('/record-telematics', {\n      driver_id: driverId,\n      gps_data: batch // Send the batch data\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log('Batch successfully sent:', response.data);\n  } catch (error) {\n    console.error('Error sending GPS data:', error);\n  }\n};\n\n// Function to simulate GPS data in batches\nexport const mockGPSData = async (setGpsData, driverId) => {\n  const journey = [{\n    Latitude: 26.6338,\n    Longitude: 92.8006,\n    Time_Step: 1\n  }, {\n    Latitude: 26.6348,\n    Longitude: 92.8016,\n    Time_Step: 60\n  }, {\n    Latitude: 26.6370,\n    Longitude: 92.8050,\n    Time_Step: 120\n  }, {\n    Latitude: 26.6382,\n    Longitude: 92.8074,\n    Time_Step: 180\n  }, {\n    Latitude: 26.6402,\n    Longitude: 92.8102,\n    Time_Step: 360\n  }, {\n    Latitude: 26.6451,\n    Longitude: 92.8185,\n    Time_Step: 900\n  }];\n  let batch = [];\n  for (let i = 0; i < journey.length; i++) {\n    batch.push(journey[i]);\n    setGpsData(prev => [...prev, journey[i]]); // Update the state with new data\n\n    // Send batch when reaching 5 data points or at the end\n    if (batch.length === 5 || i === journey.length - 1) {\n      await sendGPSBatchToBackend(batch, driverId); // Send batch to backend\n      batch = []; // Clear the batch\n    }\n  }\n};\n\n// Real-time GPS tracking function\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\n  if (!navigator.geolocation) {\n    console.error('Geolocation is not supported by your browser');\n    return;\n  }\n  const gpsBatch = [];\n  let lastPosition = null;\n  let startTime = Date.now();\n  const onSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    const timestamp = Date.now();\n    const timeStep = lastPosition ? (timestamp - startTime) / 1000 : 0;\n    startTime = timestamp;\n    const gpsDataPoint = {\n      Latitude: latitude,\n      Longitude: longitude,\n      Time_Step: timeStep\n    };\n    gpsBatch.push(gpsDataPoint);\n    setGpsData(prevGpsData => [...prevGpsData, gpsDataPoint]);\n\n    // Send data every 5 points or at stops\n    if (gpsBatch.length >= 5 || timeStep > 300) {\n      sendGPSBatchToBackend(gpsBatch, driverId); // Send to backend\n      gpsBatch.length = 0; // Clear batch\n    }\n    lastPosition = {\n      latitude,\n      longitude\n    };\n  };\n  const onError = error => {\n    console.error(`Error fetching geolocation: ${error.message}`);\n  };\n  navigator.geolocation.watchPosition(onSuccess, onError, {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  });\n};","map":{"version":3,"names":["api","sendGPSBatchToBackend","batch","driverId","token","localStorage","getItem","response","post","driver_id","gps_data","headers","Authorization","console","log","data","error","mockGPSData","setGpsData","journey","Latitude","Longitude","Time_Step","i","length","push","prev","trackRealTimeGPS","navigator","geolocation","gpsBatch","lastPosition","startTime","Date","now","onSuccess","position","latitude","longitude","coords","timestamp","timeStep","gpsDataPoint","prevGpsData","onError","message","watchPosition","enableHighAccuracy","timeout","maximumAge"],"sources":["C:/Users/anush/OneDrive/Desktop/minor project/DriveIQ/DriveIQ/DriveIQ-PWA/src/utils/geolocation.js"],"sourcesContent":["// src/utils/geolocation.js\r\nimport api from './api';  // Axios instance\r\n\r\n// Helper to send a batch of GPS data to the backend\r\nconst sendGPSBatchToBackend = async (batch, driverId) => {\r\n  try {\r\n    const token = localStorage.getItem('token');  // Get JWT token\r\n    const response = await api.post('/record-telematics', {\r\n      driver_id: driverId,\r\n      gps_data: batch,  // Send the batch data\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Batch successfully sent:', response.data);\r\n  } catch (error) {\r\n    console.error('Error sending GPS data:', error);\r\n  }\r\n};\r\n\r\n// Function to simulate GPS data in batches\r\nexport const mockGPSData = async (setGpsData, driverId) => {\r\n  const journey = [\r\n    { Latitude: 26.6338, Longitude: 92.8006, Time_Step: 1 },\r\n    { Latitude: 26.6348, Longitude: 92.8016, Time_Step: 60 },\r\n    { Latitude: 26.6370, Longitude: 92.8050, Time_Step: 120 },\r\n    { Latitude: 26.6382, Longitude: 92.8074, Time_Step: 180 },\r\n    { Latitude: 26.6402, Longitude: 92.8102, Time_Step: 360 },\r\n    { Latitude: 26.6451, Longitude: 92.8185, Time_Step: 900 }\r\n  ];\r\n\r\n  let batch = [];\r\n  for (let i = 0; i < journey.length; i++) {\r\n    batch.push(journey[i]);\r\n    setGpsData(prev => [...prev, journey[i]]);  // Update the state with new data\r\n\r\n    // Send batch when reaching 5 data points or at the end\r\n    if (batch.length === 5 || i === journey.length - 1) {\r\n      await sendGPSBatchToBackend(batch, driverId);  // Send batch to backend\r\n      batch = [];  // Clear the batch\r\n    }\r\n  }\r\n};\r\n\r\n// Real-time GPS tracking function\r\nexport const trackRealTimeGPS = (setGpsData, driverId) => {\r\n  if (!navigator.geolocation) {\r\n    console.error('Geolocation is not supported by your browser');\r\n    return;\r\n  }\r\n\r\n  const gpsBatch = [];\r\n  let lastPosition = null;\r\n  let startTime = Date.now();\r\n\r\n  const onSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    const timestamp = Date.now();\r\n\r\n    const timeStep = lastPosition ? (timestamp - startTime) / 1000 : 0;\r\n    startTime = timestamp;\r\n\r\n    const gpsDataPoint = {\r\n      Latitude: latitude,\r\n      Longitude: longitude,\r\n      Time_Step: timeStep\r\n    };\r\n\r\n    gpsBatch.push(gpsDataPoint);\r\n    setGpsData((prevGpsData) => [...prevGpsData, gpsDataPoint]);\r\n\r\n    // Send data every 5 points or at stops\r\n    if (gpsBatch.length >= 5 || timeStep > 300) {\r\n      sendGPSBatchToBackend(gpsBatch, driverId);  // Send to backend\r\n      gpsBatch.length = 0;  // Clear batch\r\n    }\r\n\r\n    lastPosition = { latitude, longitude };\r\n  };\r\n\r\n  const onError = (error) => {\r\n    console.error(`Error fetching geolocation: ${error.message}`);\r\n  };\r\n\r\n  navigator.geolocation.watchPosition(onSuccess, onError, {\r\n    enableHighAccuracy: true,\r\n    timeout: 5000,\r\n    maximumAge: 0,\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}